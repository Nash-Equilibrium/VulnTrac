{
    "10": {
        "Title": "CWE CATEGORY: DEPRECATED: ASP.NET Environment Issues"
    },
    "11": {
        "Title": "CWE-11: ASP.NET Misconfiguration: Creating Debug Binary",
        "Potential Mitigations": "Potential Mitigations\nPhase:  System ConfigurationAvoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production."
    },
    "12": {
        "Title": "CWE-12: ASP.NET Misconfiguration: Missing Custom Error Page",
        "Potential Mitigations": "Potential Mitigations\nPhase:  System ConfigurationHandle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page. \nPhase:  Architecture and DesignDo not attempt to process an error or attempt to mask it. \nPhase:  ImplementationVerify return values are correct and do not supply sensitive information about the system."
    },
    "13": {
        "Title": "CWE-13: ASP.NET Misconfiguration: Password in Configuration File",
        "Potential Mitigations": "Potential Mitigations\nPhase:  ImplementationCredentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files."
    },
    "14": {
        "Title": "CWE-14: Compiler Removal of Code to Clear Buffers",
        "Potential Mitigations": "Potential Mitigations\nPhase:  ImplementationStore the sensitive data in a \"volatile\" memory location if available. \nPhase:  Build and CompilationIf possible, configure your compiler so that it does not remove dead stores. \nPhase:  Architecture and DesignWhere possible, encrypt sensitive data that are used by a software system."
    },
    "15": {
        "Title": "CWE-15: External Control of System or Configuration Setting",
        "Potential Mitigations": "Potential Mitigations\nPhase:  Architecture and DesignStrategy:  Separation of Privilege Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.  Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.  \nPhases:  Implementation; Architecture and DesignBecause setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control. \nPhases:  Implementation; Architecture and DesignIn general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker."
    }
}